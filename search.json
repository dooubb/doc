[{"title":"Dockerfile","url":"/2022/08/24/Docker/dockerfile/","content":"<h1 id=\"使用Dockerfile自定义镜像\"><a href=\"#使用Dockerfile自定义镜像\" class=\"headerlink\" title=\"使用Dockerfile自定义镜像\"></a>使用Dockerfile自定义镜像</h1><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>\n<h1 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h1><p> <code>FROM</code> 就是指定 <strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h1><p><code>RUN</code> 指令是用来执行命令行命令的。其格式有两种：</p>\n<ul>\n<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>\n</ul>\n<p>在编写RUN命令时，需要尽量将多个命令合并成为一个命令，这样可以减少镜像的层数。在执行后最好执行下清理缓存的命令，这样可以减少镜像臃肿。</p>\n<h1 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h1><p>构建命令的格式为：</p>\n<p><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code></p>\n<p>在 <code>Dockerfile</code> 文件所在目录执行build命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[appadmin@centos dockerfile]$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM nginx</span><br><span class=\"line\"> ---&gt; 2b7d6430f78d</span><br><span class=\"line\">Step 2/2 : RUN <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> deaa41e0a7a8</span><br><span class=\"line\">Removing intermediate container deaa41e0a7a8</span><br><span class=\"line\"> ---&gt; 6493aeeb3bfe</span><br><span class=\"line\">Successfully built 6493aeeb3bfe</span><br><span class=\"line\">Successfully tagged nginx:v3</span><br><span class=\"line\">[appadmin@centos dockerfile]$ </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像构建上下文（Context）\"><a href=\"#镜像构建上下文（Context）\" class=\"headerlink\" title=\"镜像构建上下文（Context）\"></a>镜像构建上下文（Context）</h1><p> <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code>表示的是上下文路径。</p>\n<p>当构建的时候，我们会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>\n<p>在执行 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p> <code>docker build</code> 的输出log</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[appadmin@centos dockerfile]$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<p>如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>\n<p>也可以用 <code>-f ../Dockerfile.sh</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>\n<h1 id=\"其它-docker-build-的用法\"><a href=\"#其它-docker-build-的用法\" class=\"headerlink\" title=\"其它 docker build 的用法\"></a>其它 <code>docker build</code> 的用法</h1><h2 id=\"直接用-Git-repo-进行构建\"><a href=\"#直接用-Git-repo-进行构建\" class=\"headerlink\" title=\"直接用 Git repo 进行构建\"></a>直接用 Git repo 进行构建</h2><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># $env:DOCKER_BUILDKIT=0</span></span><br><span class=\"line\"><span class=\"comment\"># export DOCKER_BUILDKIT=0</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t hello-world https://github.com/docker-library/hello-world.git<span class=\"comment\">#master:amd64/hello-world</span></span><br><span class=\"line\"></span><br><span class=\"line\">Step 1/3 : FROM scratch</span><br><span class=\"line\"> ---&gt;</span><br><span class=\"line\">Step 2/3 : COPY hello /</span><br><span class=\"line\"> ---&gt; ac779757d46e</span><br><span class=\"line\">Step 3/3 : CMD [<span class=\"string\">&quot;/hello&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> d2a513a760ed</span><br><span class=\"line\">Removing intermediate container d2a513a760ed</span><br><span class=\"line\"> ---&gt; 038ad4142d2b</span><br><span class=\"line\">Successfully built 038ad4142d2b</span><br></pre></td></tr></table></figure>\n\n<p>这行命令指定了构建所需的 Git repo，并且指定分支为 <code>master</code>，构建目录为 <code>/amd64/hello-world/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>\n<h2 id=\"用给定的-tar-压缩包构建\"><a href=\"#用给定的-tar-压缩包构建\" class=\"headerlink\" title=\"用给定的 tar 压缩包构建\"></a>用给定的 tar 压缩包构建</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build http://server/context.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>如果所给出的 URL 不是个 Git repo，而是个 <code>tar</code> 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p>\n<h2 id=\"从标准输入中读取-Dockerfile-进行构建\"><a href=\"#从标准输入中读取-Dockerfile-进行构建\" class=\"headerlink\" title=\"从标准输入中读取 Dockerfile 进行构建\"></a>从标准输入中读取 Dockerfile 进行构建</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build - &lt; Dockerfile</span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">cat</span> Dockerfile | docker build -</span><br></pre></td></tr></table></figure>\n\n<p>如果标准输入传入的是文本文件，则将其视为 <code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情。</p>\n<h2 id=\"从标准输入中读取上下文压缩包进行构建\"><a href=\"#从标准输入中读取上下文压缩包进行构建\" class=\"headerlink\" title=\"从标准输入中读取上下文压缩包进行构建\"></a>从标准输入中读取上下文压缩包进行构建</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>如果发现标准输入的文件格式是 <code>gzip</code>、<code>bzip2</code> 以及 <code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建</p>\n<h1 id=\"Dockerfile指令\"><a href=\"#Dockerfile指令\" class=\"headerlink\" title=\"Dockerfile指令\"></a>Dockerfile指令</h1><h2 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a><code>COPY</code></h2><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件&#x2F;目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置</p>\n<p>格式：</p>\n<ul>\n<li>COPY [–chown&#x3D;<user>:<group>] &lt;源路径&gt;… &lt;目标路径&gt;</group></user></li>\n<li>COPY [–chown&#x3D;<user>:<group>] [“&lt;源路径1&gt;”,… “&lt;目标路径&gt;”]</group></user></li>\n</ul>\n<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href=\"https://golang.org/pkg/path/filepath/#Match\"><code>filepath.Match</code></a> 规则，如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> hom* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<p>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。</p>\n<p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=55:mygroup files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=bin files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=1 files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure>\n\n<p>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</p>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a><code>ADD</code></h2><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>\n<ul>\n<li>ADD 的优点：在执行<code>源文件</code>为 tar 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及<code> xz</code> 的情况下，会自动复制并解压到 <code>目标路径</code>。</li>\n<li>ADD <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>，如果这并不是想要的权限，那么还需要增加额外的一层 <code>RUN</code> 进行权限调整。如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 <code>RUN</code> 指令进行解压缩。所以不如直接使用 <code>RUN</code> 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</li>\n<li>ADD 的缺点：在不解压的前提下，无法复制 <code>tar 压缩文件</code>。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>\n</ul>\n<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>\n<p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=55:mygroup files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=bin files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=1 files* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> --<span class=\"built_in\">chown</span>=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a><code>CMD</code></h2><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。<code>CMD</code> 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>\n<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>\n<ul>\n<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>\n<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>\n<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>\n</ul>\n<p>但二者运行的时间点不同:</p>\n<ul>\n<li><code>CMD</code>在<code>docker run</code> 时运行。</li>\n<li><code>RUN</code> 是在 <code>docker build</code>。</li>\n</ul>\n<p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p>\n<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$HOME</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在实际执行中，会将其变更为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [ <span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;echo <span class=\"variable\">$HOME</span>&quot;</span> ]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>Dockerfile</code>中如果存在多个 <code>CMD</code>指令，仅最后一个生效。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> &lt;shell 命令&gt; </span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param2&gt;&quot;</span>,...]  <span class=\"comment\"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a><code>ENTRYPOINT</code></h2><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数，但是不同点在于</p>\n<ul>\n<li><code>CMD</code>指定这个容器启动的时候要运行的命令，不可以追加命令</li>\n<li><code>ENTRYPOINT</code>指定这个容器启动的时候要运行的命令，可以追加命令</li>\n</ul>\n<p><code>ENTRYPOINT</code>格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]</span><br><span class=\"line\">ENTRYPOINT command param1 param2（shell中执行）</span><br></pre></td></tr></table></figure>\n\n<p><code>ENTRYPOINT</code> 在运行时也可以替代，通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p>\n<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\">&gt; <span class=\"string\">&quot;&lt;CMD&gt;&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"追加命令\"><a href=\"#追加命令\" class=\"headerlink\" title=\"追加命令\"></a>追加命令</h3><h4 id=\"测试-CMD\"><a href=\"#测试-CMD\" class=\"headerlink\" title=\"测试 CMD\"></a>测试 CMD</h4><p>dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ls&quot;</span>,<span class=\"string\">&quot;-a&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v1 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM alpine</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/2 : CMD [<span class=\"string\">&quot;ls&quot;</span>,<span class=\"string\">&quot;-a&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 68306a7d8b96</span><br><span class=\"line\">Removing intermediate container 68306a7d8b96</span><br><span class=\"line\"> ---&gt; 09085f2e8eae</span><br><span class=\"line\">Successfully built 09085f2e8eae</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v1</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v1</span></span><br><span class=\"line\">.</span><br><span class=\"line\">..</span><br><span class=\"line\">.dockerenv</span><br><span class=\"line\">bin</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">tmp</span><br><span class=\"line\">usr</span><br><span class=\"line\">var</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>运行容器并追加命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v1 -l</span></span><br><span class=\"line\">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: <span class=\"built_in\">exec</span>: <span class=\"string\">&quot;-l&quot;</span>: executable file not found <span class=\"keyword\">in</span> <span class=\"variable\">$PATH</span>: unknown.</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可执行文件找不到的报错，executable file not found</li>\n<li>跟在镜像名后面的是 command，运行时会替换 CMD 的默认值，因此这里的 -l 替换了原来的 CMD，而不是追加在原来的 ls -a 后面</li>\n<li>而 -l 根本不是命令，所以自然找不到</li>\n</ul>\n<p><strong>如果想加入 -i 参数，必须重写 ls 命令</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v1 ls -al</span></span><br><span class=\"line\">total 64</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:41 .</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:41 ..</span><br><span class=\"line\">-rwxr-xr-x    1 root     root             0 Aug 23 14:41 .dockerenv</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 bin</span><br><span class=\"line\">drwxr-xr-x    5 root     root           340 Aug 23 14:41 dev</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:41 etc</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 home</span><br><span class=\"line\">drwxr-xr-x    7 root     root          4096 Aug  9 08:47 lib</span><br><span class=\"line\">drwxr-xr-x    5 root     root          4096 Aug  9 08:47 media</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 mnt</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 opt</span><br><span class=\"line\">dr-xr-xr-x  122 root     root             0 Aug 23 14:41 proc</span><br><span class=\"line\">drwx------    2 root     root          4096 Aug  9 08:47 root</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 run</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 sbin</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 srv</span><br><span class=\"line\">dr-xr-xr-x   13 root     root             0 Mar 20 13:40 sys</span><br><span class=\"line\">drwxrwxrwt    2 root     root          4096 Aug  9 08:47 tmp</span><br><span class=\"line\">drwxr-xr-x    7 root     root          4096 Aug  9 08:47 usr</span><br><span class=\"line\">drwxr-xr-x   12 root     root          4096 Aug  9 08:47 var</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试-ENTRYPOINT\"><a href=\"#测试-ENTRYPOINT\" class=\"headerlink\" title=\"测试 ENTRYPOINT\"></a>测试 ENTRYPOINT</h4><p>dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;ls&quot;</span>,<span class=\"string\">&quot;-a&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v2 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM alpine</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/2 : ENTRYPOINT [<span class=\"string\">&quot;ls&quot;</span>,<span class=\"string\">&quot;-a&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> e7e8583e2b50</span><br><span class=\"line\">Removing intermediate container e7e8583e2b50</span><br><span class=\"line\"> ---&gt; d02dec248ddd</span><br><span class=\"line\">Successfully built d02dec248ddd</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v2</span><br><span class=\"line\">[root@qingyun dockerfile]</span><br></pre></td></tr></table></figure>\n\n<p>运行容器并追加命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v2  -l</span></span><br><span class=\"line\">total 64</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:43 .</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:43 ..</span><br><span class=\"line\">-rwxr-xr-x    1 root     root             0 Aug 23 14:43 .dockerenv</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 bin</span><br><span class=\"line\">drwxr-xr-x    5 root     root           340 Aug 23 14:43 dev</span><br><span class=\"line\">drwxr-xr-x    1 root     root          4096 Aug 23 14:43 etc</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 home</span><br><span class=\"line\">drwxr-xr-x    7 root     root          4096 Aug  9 08:47 lib</span><br><span class=\"line\">drwxr-xr-x    5 root     root          4096 Aug  9 08:47 media</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 mnt</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 opt</span><br><span class=\"line\">dr-xr-xr-x  116 root     root             0 Aug 23 14:43 proc</span><br><span class=\"line\">drwx------    2 root     root          4096 Aug  9 08:47 root</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 run</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 sbin</span><br><span class=\"line\">drwxr-xr-x    2 root     root          4096 Aug  9 08:47 srv</span><br><span class=\"line\">dr-xr-xr-x   13 root     root             0 Mar 20 13:40 sys</span><br><span class=\"line\">drwxrwxrwt    2 root     root          4096 Aug  9 08:47 tmp</span><br><span class=\"line\">drwxr-xr-x    7 root     root          4096 Aug  9 08:47 usr</span><br><span class=\"line\">drwxr-xr-x   12 root     root          4096 Aug  9 08:47 var</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ENTRYPOINT-和-CMD-联合使用\"><a href=\"#ENTRYPOINT-和-CMD-联合使用\" class=\"headerlink\" title=\"ENTRYPOINT 和 CMD 联合使用\"></a>ENTRYPOINT 和 CMD 联合使用</h3><p>dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;free -h&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v3 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/3 : FROM alpine</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/3 : ENTRYPOINT [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 15a4f18d8406</span><br><span class=\"line\">Removing intermediate container 15a4f18d8406</span><br><span class=\"line\"> ---&gt; a02b22a14b1a</span><br><span class=\"line\">Step 3/3 : CMD [<span class=\"string\">&quot;free -h&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> d86618f05178</span><br><span class=\"line\">Removing intermediate container d86618f05178</span><br><span class=\"line\"> ---&gt; 4ab2e4722739</span><br><span class=\"line\">Successfully built 4ab2e4722739</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v3</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v3</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           1.8G      937.3M      135.0M           0      765.5M      640.5M</span><br><span class=\"line\">Swap:          2.0G      111.4M        1.9G</span><br></pre></td></tr></table></figure>\n\n<p>传递参数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v3 df -h</span></span><br><span class=\"line\">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class=\"line\">overlay               51472912  12497160  36338032  26% /</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /dev</span><br><span class=\"line\">tmpfs                   941000         0    941000   0% /sys/fs/cgroup</span><br><span class=\"line\">shm                      65536         0     65536   0% /dev/shm</span><br><span class=\"line\">/dev/vda1             51472912  12497160  36338032  26% /etc/resolv.conf</span><br><span class=\"line\">/dev/vda1             51472912  12497160  36338032  26% /etc/hostname</span><br><span class=\"line\">/dev/vda1             51472912  12497160  36338032  26% /etc/hosts</span><br><span class=\"line\">tmpfs                   941000         0    941000   0% /proc/asound</span><br><span class=\"line\">tmpfs                   941000         0    941000   0% /proc/acpi</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /proc/kcore</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /proc/keys</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /proc/timer_list</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /proc/timer_stats</span><br><span class=\"line\">tmpfs                    65536         0     65536   0% /proc/sched_debug</span><br><span class=\"line\">tmpfs                   941000         0    941000   0% /proc/scsi</span><br><span class=\"line\">tmpfs                   941000         0    941000   0% /sys/firmware</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a><code>ENV</code></h2><p>格式有两种：</p>\n<ul>\n<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>\n<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>\n</ul>\n<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>\n<p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>FROM</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>、<code>RUN</code>。</p>\n<h2 id=\"ARG\"><a href=\"#ARG\" class=\"headerlink\" title=\"ARG\"></a><code>ARG</code></h2><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 <code>docker build</code> 的过程中有效，构建好的镜像内不存在此环境变量。</p>\n<p>构建命令 docker build 中可以用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a><code>VOLUME</code></h2><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;路径1&gt;&quot;</span>, <span class=\"string\">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"language-bash\"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点</p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a><code>EXPOSE</code></h2><p>仅仅只是声明端口。</p>\n<p>作用：</p>\n<ul>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>\n<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a><code>WORKDIR</code></h2><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code>。</p>\n<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>\n<p>如果你的 <code>WORKDIR</code> 指令使用的相对路径，那么所切换的路径与之前的 <code>WORKDIR</code> 有关：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /a</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> b</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> c</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;free -h&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像并以交互模式运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v5 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/6 : FROM alpine</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/6 : WORKDIR /a</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 68e020c40fe0</span><br><span class=\"line\">Step 3/6 : WORKDIR b</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 417872a63628</span><br><span class=\"line\">Removing intermediate container 417872a63628</span><br><span class=\"line\"> ---&gt; 651db8e25a9c</span><br><span class=\"line\">Step 4/6 : WORKDIR c</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 9f42dfeb55d8</span><br><span class=\"line\">Removing intermediate container 9f42dfeb55d8</span><br><span class=\"line\"> ---&gt; 3ddfd8d8c58f</span><br><span class=\"line\">Step 5/6 : ENTRYPOINT [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 063b78cc8497</span><br><span class=\"line\">Removing intermediate container 063b78cc8497</span><br><span class=\"line\"> ---&gt; 653e57f2c6a8</span><br><span class=\"line\">Step 6/6 : CMD [<span class=\"string\">&quot;free -h&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 9c498cc4337b</span><br><span class=\"line\">Removing intermediate container 9c498cc4337b</span><br><span class=\"line\"> ---&gt; 76c8dba5224b</span><br><span class=\"line\">Successfully built 76c8dba5224b</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v5</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run -it test:v5 sh</span></span><br><span class=\"line\">/a/b/c <span class=\"comment\"># pwd</span></span><br><span class=\"line\">/a/b/c</span><br><span class=\"line\">/a/b/c <span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n\n<p><code>RUN pwd</code> 的工作目录为 <code>/a/b/c</code>。</p>\n<h2 id=\"USER\"><a href=\"#USER\" class=\"headerlink\" title=\"USER\"></a><code>USER</code></h2><p>指定当前用户</p>\n<p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p>\n<p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</p>\n<p>注意，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>\n<h2 id=\"HEALTHCHECK\"><a href=\"#HEALTHCHECK\" class=\"headerlink\" title=\"HEALTHCHECK\"></a><code>HEALTHCHECK</code></h2><p>格式：</p>\n<ul>\n<li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li>\n<li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li>\n</ul>\n<p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常。</p>\n<p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p>\n<p><code>HEALTHCHECK</code> 支持下列选项：</p>\n<ul>\n<li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li>\n<li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>\n<li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li>\n</ul>\n<p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p>\n<p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式，和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p>\n<h2 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a><code>ONBUILD</code></h2><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>\n<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>\n<p>dokcerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\">  apk --update add curl</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> onbuild</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">ONBUILD</span> <span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;free -h&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v6 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/5 : FROM alpine</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/5 : RUN  apk --update add curl</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 3b9766c5d5f0</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">(1/5) Installing ca-certificates (20220614-r0)</span><br><span class=\"line\">(2/5) Installing brotli-libs (1.0.9-r6)</span><br><span class=\"line\">(3/5) Installing nghttp2-libs (1.47.0-r0)</span><br><span class=\"line\">(4/5) Installing libcurl (7.83.1-r2)</span><br><span class=\"line\">(5/5) Installing curl (7.83.1-r2)</span><br><span class=\"line\">Executing busybox-1.35.0-r17.trigger</span><br><span class=\"line\">Executing ca-certificates-20220614-r0.trigger</span><br><span class=\"line\">OK: 8 MiB <span class=\"keyword\">in</span> 19 packages</span><br><span class=\"line\">Removing intermediate container 3b9766c5d5f0</span><br><span class=\"line\"> ---&gt; 353f338bfafc</span><br><span class=\"line\">Step 3/5 : ONBUILD RUN <span class=\"built_in\">mkdir</span> onbuild</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> ef183f376f5f</span><br><span class=\"line\">Removing intermediate container ef183f376f5f</span><br><span class=\"line\"> ---&gt; 61e16dd3f469</span><br><span class=\"line\">Step 4/5 : ONBUILD ENTRYPOINT [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> b7d9df57c67d</span><br><span class=\"line\">Removing intermediate container b7d9df57c67d</span><br><span class=\"line\"> ---&gt; 217a09b73da9</span><br><span class=\"line\">Step 5/5 : ONBUILD CMD [<span class=\"string\">&quot;free -h&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> f2c1d2f0efe7</span><br><span class=\"line\">Removing intermediate container f2c1d2f0efe7</span><br><span class=\"line\"> ---&gt; eb83cf40569e</span><br><span class=\"line\">Successfully built eb83cf40569e</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v6</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun fan]<span class=\"comment\"># docker run test:v6</span></span><br><span class=\"line\">[root@qingyun fan]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run -it test:v6 sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># curl</span></span><br><span class=\"line\">curl: try <span class=\"string\">&#x27;curl --help&#x27;</span> or <span class=\"string\">&#x27;curl --manual&#x27;</span> <span class=\"keyword\">for</span> more information</span><br><span class=\"line\">/ <span class=\"comment\"># ls</span></span><br><span class=\"line\">bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var</span><br><span class=\"line\">/ <span class=\"comment\"># exit</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>容器运行是没有创建文件夹也没有执行cmd的命令</code></p>\n<p>dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> test:v6</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> fan</span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun fan]<span class=\"comment\"># docker build -t test:v7 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/2 : FROM <span class=\"built_in\">test</span>:v6</span><br><span class=\"line\"><span class=\"comment\"># Executing 3 build triggers</span></span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 023583b0da4d</span><br><span class=\"line\">Removing intermediate container 023583b0da4d</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 28808f4858f8</span><br><span class=\"line\">Removing intermediate container 28808f4858f8</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> d4a68b62d7a5</span><br><span class=\"line\">Removing intermediate container d4a68b62d7a5</span><br><span class=\"line\"> ---&gt; d8b6c5dc9f70</span><br><span class=\"line\">Step 2/2 : MAINTAINER fan</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 4cfeea24b75a</span><br><span class=\"line\">Removing intermediate container 4cfeea24b75a</span><br><span class=\"line\"> ---&gt; 0fc92fd2284a</span><br><span class=\"line\">Successfully built 0fc92fd2284a</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v7</span><br><span class=\"line\">[root@qingyun fan]<span class=\"comment\"># docker run -it test:v7 sh</span></span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun fan]<span class=\"comment\"># docker run test:v7</span></span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:           1.8G      947.2M      124.4M           0      766.3M      630.7M</span><br><span class=\"line\">Swap:          2.0G      111.9M        1.9G</span><br><span class=\"line\">[root@qingyun fan]<span class=\"comment\"># docker run -it test:v7 sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># ls</span></span><br><span class=\"line\">bin      dev      etc      home     lib      media    mnt      onbuild opt      proc     root     run      sbin     srv      sys      tmp      usr      var</span><br><span class=\"line\">/ <span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>容器运行创建了文件夹也运行了cmd中的命令</code></p>\n<h2 id=\"LABEL\"><a href=\"#LABEL\" class=\"headerlink\" title=\"LABEL\"></a><code>LABEL</code></h2><p><code>LABEL</code> 指令用来给镜像以键值对的形式添加一些元数据（metadata）。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a><code>MAINTAINER</code></h2><p>指定镜像的 <code>Author</code> 字段。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Docker"],"tags":["Docker"]},{"title":"Dockerfile多阶段构建","url":"/2022/08/24/Docker/dockerfile%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA/","content":"<h1 id=\"多阶段构建\"><a href=\"#多阶段构建\" class=\"headerlink\" title=\"多阶段构建\"></a>多阶段构建</h1><p>多阶段构建，可以<code>FROM</code>在Dockerfile中使用多个语句。每个<code>FROM</code>指令可以使用不同的基础镜像，并且每个指令都可以开始构建的新阶段。可以有选择地将文件从一个阶段复制到另一个阶段，从而在最终镜像中留下所需要的文件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest </span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb2</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=0 /dooubb/doc.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v1 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/7 : FROM alpine:latest</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/7 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 1d2dd9a14a2d</span><br><span class=\"line\">Removing intermediate container 1d2dd9a14a2d</span><br><span class=\"line\"> ---&gt; 528501439181</span><br><span class=\"line\">Step 3/7 : RUN apk --update add curl     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> f463379cd1b2</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">(1/5) Installing ca-certificates (20220614-r0)</span><br><span class=\"line\">(2/5) Installing brotli-libs (1.0.9-r6)</span><br><span class=\"line\">(3/5) Installing nghttp2-libs (1.47.0-r0)</span><br><span class=\"line\">(4/5) Installing libcurl (7.83.1-r2)</span><br><span class=\"line\">(5/5) Installing curl (7.83.1-r2)</span><br><span class=\"line\">Executing busybox-1.35.0-r17.trigger</span><br><span class=\"line\">Executing ca-certificates-20220614-r0.trigger</span><br><span class=\"line\">OK: 8 MiB <span class=\"keyword\">in</span> 19 packages</span><br><span class=\"line\">Removing intermediate container f463379cd1b2</span><br><span class=\"line\"> ---&gt; 007a9b94e8c3</span><br><span class=\"line\">Step 4/7 : FROM alpine:latest</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 5/7 : WORKDIR /dooubb2</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> e33cfbbc87ac</span><br><span class=\"line\">Removing intermediate container e33cfbbc87ac</span><br><span class=\"line\"> ---&gt; 9c9c6571ba1d</span><br><span class=\"line\">Step 6/7 : COPY --from=0 /dooubb/doc.txt .</span><br><span class=\"line\"> ---&gt; d71058ae41f6</span><br><span class=\"line\">Step 7/7 : CMD [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 6e1a47ec479d</span><br><span class=\"line\">Removing intermediate container 6e1a47ec479d</span><br><span class=\"line\"> ---&gt; 737fbf66e51c</span><br><span class=\"line\">Successfully built 737fbf66e51c</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v1</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v1</span></span><br><span class=\"line\">Hello, Docker!</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v1 curl</span></span><br><span class=\"line\">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: <span class=\"built_in\">exec</span>: <span class=\"string\">&quot;curl&quot;</span>: executable file not found <span class=\"keyword\">in</span> <span class=\"variable\">$PATH</span>: unknown.</span><br></pre></td></tr></table></figure>\n\n<p>第二<code>FROM</code>条指令以<code>alpine:latest</code>图像为基础开始新的构建阶段。该<code>COPY --from=0</code>行仅将之前阶段的构建工件复制到新阶段。任何中间层都被遗忘，而不是保存在最终镜像中。</p>\n<hr>\n<p>在第二个FROM中添加curl，然后再执行命令</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest </span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb2</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl </span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=0 /dooubb/doc.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v2 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/8 : FROM alpine:latest</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/8 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 528501439181</span><br><span class=\"line\">Step 3/8 : RUN apk --update add curl     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 007a9b94e8c3</span><br><span class=\"line\">Step 4/8 : FROM alpine:latest</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 5/8 : WORKDIR /dooubb2</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 9c9c6571ba1d</span><br><span class=\"line\">Step 6/8 : RUN apk --update add curl</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> d9b792e0e8c9</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86_64/APKINDEX.tar.gz</span><br><span class=\"line\">(1/5) Installing ca-certificates (20220614-r0)</span><br><span class=\"line\">(2/5) Installing brotli-libs (1.0.9-r6)</span><br><span class=\"line\">(3/5) Installing nghttp2-libs (1.47.0-r0)</span><br><span class=\"line\">(4/5) Installing libcurl (7.83.1-r2)</span><br><span class=\"line\">(5/5) Installing curl (7.83.1-r2)</span><br><span class=\"line\">Executing busybox-1.35.0-r17.trigger</span><br><span class=\"line\">Executing ca-certificates-20220614-r0.trigger</span><br><span class=\"line\">OK: 8 MiB <span class=\"keyword\">in</span> 19 packages</span><br><span class=\"line\">Removing intermediate container d9b792e0e8c9</span><br><span class=\"line\"> ---&gt; 267cb5020358</span><br><span class=\"line\">Step 7/8 : COPY --from=0 /dooubb/doc.txt .</span><br><span class=\"line\"> ---&gt; a8486e702e82</span><br><span class=\"line\">Step 8/8 : CMD [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 8f83586c2685</span><br><span class=\"line\">Removing intermediate container 8f83586c2685</span><br><span class=\"line\"> ---&gt; a5d7d8456c18</span><br><span class=\"line\">Successfully built a5d7d8456c18</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v2</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v2 </span></span><br><span class=\"line\">Hello, Docker!</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v2 curl</span></span><br><span class=\"line\">curl: try <span class=\"string\">&#x27;curl --help&#x27;</span> or <span class=\"string\">&#x27;curl --manual&#x27;</span> <span class=\"keyword\">for</span> more information</span><br></pre></td></tr></table></figure>\n\n<p>此时最终镜像中才会包含curl命令</p>\n<h1 id=\"为多构建阶段命名\"><a href=\"#为多构建阶段命名\" class=\"headerlink\" title=\"为多构建阶段命名\"></a>为多构建阶段命名</h1><p>默认情况下，阶段未命名，您可以通过整数来引用它们，从第0个FROM指令开始。</p>\n<p>但是，可以通过向FROM指令添加as NAME来命名构建的阶段。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest as builder</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest </span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb2</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /dooubb/doc.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"停在特定的构建阶段\"><a href=\"#停在特定的构建阶段\" class=\"headerlink\" title=\"停在特定的构建阶段\"></a>停在特定的构建阶段</h1><p>构建镜像时，不一定需要构建整个Dockerfile每个阶段。</p>\n<p>可以指定目标构建阶段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build --target builder -t test:v4 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/3 : FROM alpine:latest as builder</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/3 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 528501439181</span><br><span class=\"line\">Step 3/3 : RUN apk --update add curl     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 007a9b94e8c3</span><br><span class=\"line\">Successfully built 007a9b94e8c3</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v4</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用外部镜像作为stage\"><a href=\"#使用外部镜像作为stage\" class=\"headerlink\" title=\"使用外部镜像作为stage\"></a>使用外部镜像作为stage</h1><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest as builder</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest </span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=nginx:latest /etc/nginx/nginx.conf .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v5 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/4 : FROM alpine:latest</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/4 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 528501439181</span><br><span class=\"line\">Step 3/4 : COPY --from=nginx:latest /etc/nginx/nginx.conf .</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">7a6db449b51b: Pull complete </span><br><span class=\"line\">ca1981974b58: Pull complete </span><br><span class=\"line\">d4019c921e20: Pull complete </span><br><span class=\"line\">7cb804d746d4: Pull complete </span><br><span class=\"line\">e7a561826262: Pull complete </span><br><span class=\"line\">7247f6e5c182: Pull complete </span><br><span class=\"line\">Digest: sha256:b95a99feebf7797479e0c5eb5ec0bdfa5d9f504bc94da550c2f58e839ea6914f</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> nginx:latest</span><br><span class=\"line\"> ---&gt; 3d045af5aaff</span><br><span class=\"line\">Step 4/4 : CMD [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;cat doc.txt&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 885e127e7c56</span><br><span class=\"line\">Removing intermediate container 885e127e7c56</span><br><span class=\"line\"> ---&gt; 8b83a663e9c9</span><br><span class=\"line\">Successfully built 8b83a663e9c9</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v5</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v5 ls</span></span><br><span class=\"line\">nginx.conf</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"将上一个阶段用作新阶段\"><a href=\"#将上一个阶段用作新阶段\" class=\"headerlink\" title=\"将上一个阶段用作新阶段\"></a>将上一个阶段用作新阶段</h1><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:latest as builder</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --update add curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> builder as builder1</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=nginx:latest /etc/nginx/nginx.conf .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> builder1 as builder2</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /dooubb</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;ls&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>构建镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker build -t test:v6 .</span></span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/9 : FROM alpine:latest as builder</span><br><span class=\"line\"> ---&gt; 9c6f07244728</span><br><span class=\"line\">Step 2/9 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 528501439181</span><br><span class=\"line\">Step 3/9 : RUN apk --update add curl     &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;Hello, Docker!&#x27;</span> &gt; doc.txt</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 007a9b94e8c3</span><br><span class=\"line\">Step 4/9 : FROM builder as builder1</span><br><span class=\"line\"> ---&gt; 007a9b94e8c3</span><br><span class=\"line\">Step 5/9 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 31c923fc099f</span><br><span class=\"line\">Removing intermediate container 31c923fc099f</span><br><span class=\"line\"> ---&gt; e458b9c85633</span><br><span class=\"line\">Step 6/9 : COPY --from=nginx:latest /etc/nginx/nginx.conf .</span><br><span class=\"line\"> ---&gt; 4becfce50158</span><br><span class=\"line\">Step 7/9 : FROM builder1 as builder2</span><br><span class=\"line\"> ---&gt; 4becfce50158</span><br><span class=\"line\">Step 8/9 : WORKDIR /dooubb</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> a406b5f2a202</span><br><span class=\"line\">Removing intermediate container a406b5f2a202</span><br><span class=\"line\"> ---&gt; c5245e307260</span><br><span class=\"line\">Step 9/9 : CMD [<span class=\"string\">&quot;sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;ls&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> a67074a489db</span><br><span class=\"line\">Removing intermediate container a67074a489db</span><br><span class=\"line\"> ---&gt; 78c8754e3b86</span><br><span class=\"line\">Successfully built 78c8754e3b86</span><br><span class=\"line\">Successfully tagged <span class=\"built_in\">test</span>:v6</span><br></pre></td></tr></table></figure>\n\n<p>运行容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\"># docker run test:v6</span></span><br><span class=\"line\">doc.txt</span><br><span class=\"line\">nginx.conf</span><br><span class=\"line\">[root@qingyun dockerfile]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Docker"],"tags":["Docker"]},{"title":"Docker in Docker","url":"/2024/07/31/Docker/docker%20in%20docker/","content":"<h1 id=\"Docker-in-Docker-DinD-深入解析\"><a href=\"#Docker-in-Docker-DinD-深入解析\" class=\"headerlink\" title=\"Docker in Docker (DinD) 深入解析\"></a>Docker in Docker (DinD) 深入解析</h1><p>Docker 技术在现代软件开发中已经成为一种标准，尤其是在微服务架构和持续集成&#x2F;持续部署（CI&#x2F;CD）流程中。随着 Docker 的普及，开发者们开始探索在容器内部运行 Docker 的能力，这种技术被称为 Docker in Docker（DinD）。</p>\n<h1 id=\"什么是-Docker-in-Docker？\"><a href=\"#什么是-Docker-in-Docker？\" class=\"headerlink\" title=\"什么是 Docker in Docker？\"></a>什么是 Docker in Docker？</h1><p>Docker in Docker 是指在一个 Docker 容器内部运行 Docker 守护进程的技术。这意味着你可以在一个容器中创建、管理和操作其他 Docker 容器。这种模式通常用于 CI&#x2F;CD 流程中，允许在隔离环境中构建和测试应用程序。</p>\n<h2 id=\"DinD-的实现方式\"><a href=\"#DinD-的实现方式\" class=\"headerlink\" title=\"DinD 的实现方式\"></a>DinD 的实现方式</h2><h3 id=\"1-直接挂载-Docker-sock\"><a href=\"#1-直接挂载-Docker-sock\" class=\"headerlink\" title=\"1. 直接挂载 Docker.sock\"></a>1. 直接挂载 Docker.sock</h3><p>最简单的实现方式是将宿主机的 Docker 套接字（<code>/var/run/docker.sock</code>）挂载到容器中，这样容器内的应用可以直接与宿主机的 Docker 守护进程进行交互。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker:latest sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># docker run hello-world</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">c1ec31eb5944: Pull complete </span><br><span class=\"line\">Digest: sha256:1408fec50309afee38f3535383f5b09419e6dc0925bc69891e79d84cc4cdcec6</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the <span class=\"string\">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image <span class=\"built_in\">which</span> runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, <span class=\"built_in\">which</span> sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>这样启动的hello-world会再宿主机上真实的启动一个容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">root@devops:~/poc<span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID   IMAGE                                           COMMAND                  CREATED              STATUS                      PORTS                                                                      NAMES</span><br><span class=\"line\">174757c01f08   hello-world                                     <span class=\"string\">&quot;/hello&quot;</span>                 About a minute ago   Exited (0) 59 seconds ago                                                                              inspiring_morse</span><br><span class=\"line\">c0d09eee09a6   docker:latest                                   <span class=\"string\">&quot;dockerd-entrypoint.…&quot;</span>   About a minute ago   Up About a minute           2375-2376/tcp                                                              sharp_dubinsky</span><br><span class=\"line\">e244d45174b3   dockerhub.qingcloud.com/doubao/rancher:latest   <span class=\"string\">&quot;entrypoint.sh&quot;</span>          2 weeks ago          Up 39 minutes               0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, :::443-&gt;443/tcp   rancher</span><br><span class=\"line\">root@devops:~/poc<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><strong>简单性</strong>：设置和使用非常简单，快速上手。</li>\n<li><strong>性能</strong>：直接使用宿主机的 Docker 守护进程，避免了性能开销。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li><strong>安全风险</strong>：容器内应用拥有对宿主机 Docker 的完全控制，存在安全隐患。</li>\n<li><strong>环境污染</strong>：容器内的操作可能影响宿主机上的 Docker 环境，导致不一致性。</li>\n</ul>\n<h3 id=\"2-使用-Docker-的-DinD-镜像\"><a href=\"#2-使用-Docker-的-DinD-镜像\" class=\"headerlink\" title=\"2. 使用 Docker 的 DinD 镜像\"></a>2. 使用 Docker 的 DinD 镜像</h3><p>Docker 官方提供了一个名为 <code>docker:dind</code> 的镜像，专门用于在容器中运行 Docker。这种方式允许你在容器内启动一个独立的 Docker 守护进程。</p>\n<h4 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~#  docker run --privileged  --name dind-container -d docker:latest</span><br><span class=\"line\">8cecade0bdc3e3a8de171caaf5706253bdc7920473512692a5f5ea6610725ef2</span><br><span class=\"line\">root@devops:~# docker exec -it dind-container sh</span><br><span class=\"line\">/ # docker run hello-world</span><br><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">c1ec31eb5944: Pull complete </span><br><span class=\"line\">Digest: sha256:1408fec50309afee38f3535383f5b09419e6dc0925bc69891e79d84cc4cdcec6</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br><span class=\"line\">/ # docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND    CREATED              STATUS                          PORTS     NAMES</span><br><span class=\"line\">1253974190f1   hello-world   &quot;/hello&quot;   About a minute ago   Exited (0) About a minute ago             thirsty_mclean</span><br><span class=\"line\">/ # </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样启动的hello-world只会在容器内启动，宿主机上是没有hello-world的容器。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~/poc<span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID   IMAGE                                           COMMAND                  CREATED              STATUS              PORTS                                                                      NAMES</span><br><span class=\"line\">8cecade0bdc3   docker:latest                                   <span class=\"string\">&quot;dockerd-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   2375-2376/tcp                                                              dind-container</span><br><span class=\"line\">e244d45174b3   dockerhub.qingcloud.com/doubao/rancher:latest   <span class=\"string\">&quot;entrypoint.sh&quot;</span>          2 weeks ago          Up 56 minutes       0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, :::443-&gt;443/tcp   rancher</span><br><span class=\"line\">root@devops:~/poc<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h4><p>第一种DinD的启动方式，是直接挂载sock，然后直接docker run -it 容器 sh就直接进入到容器中了，就可以直接操作容器内部的docker。</p>\n<p>第二种DinD的启动方式，是没有挂载sock，所以不可以直接docker run -it 容器 sh，这样进入到容器中，docker的sock还没有完全启动，所以需要先docker run启动容器，然后再docker exec进入容器，然后就可以操作容器内的docker了。</p>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><strong>官方支持</strong>：由 Docker 官方维护，确保兼容性和稳定性。</li>\n<li><strong>隔离性</strong>：每个 DinD 容器都有自己的 Docker 守护进程，彼此之间完全隔离。</li>\n</ul>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li><strong>性能开销</strong>：由于在容器内管理 Docker，可能会引入额外的性能开销。</li>\n<li><strong>复杂性</strong>：需要配置网络和存储，以确保容器间的通信。</li>\n</ul>\n<h3 id=\"3-使用-Sysbox\"><a href=\"#3-使用-Sysbox\" class=\"headerlink\" title=\"3. 使用 Sysbox\"></a>3. 使用 Sysbox</h3><p>Sysbox 是一个增强型容器运行时，允许你在容器中运行完整的系统服务，包括 Docker。与直接挂载 Docker.sock 相比，Sysbox 提供了更好的隔离性。</p>\n<h4 id=\"验证-2\"><a href=\"#验证-2\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>由于需要更改docker的runtime，由于现在的默认runtimes是runc，更改成sysbox有挑战。目前没有技术知识，等后续。。。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><strong>增强的隔离性</strong>：容器内的操作不会影响宿主机 Docker 环境。</li>\n<li><strong>支持复杂应用</strong>：可以在容器中运行更复杂的应用程序和服务。</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li><strong>安装复杂性</strong>：需要额外的步骤来安装和配置 Sysbox。</li>\n<li><strong>性能开销</strong>：可能引入额外的性能开销。</li>\n</ul>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><h3 id=\"CI-x2F-CD-流程\"><a href=\"#CI-x2F-CD-流程\" class=\"headerlink\" title=\"CI&#x2F;CD 流程\"></a>CI&#x2F;CD 流程</h3><p>DinD 在 CI&#x2F;CD 流程中被广泛使用，尤其是在构建和测试 Docker 镜像时。通过在 CI&#x2F;CD 工具（如 Jenkins、GitLab CI）中使用 DinD，开发者可以在隔离的环境中快速构建和测试应用。</p>\n<h3 id=\"开发和测试\"><a href=\"#开发和测试\" class=\"headerlink\" title=\"开发和测试\"></a>开发和测试</h3><p>开发人员可以使用 DinD 在本地或测试环境中模拟生产环境，创建和管理多个容器化服务。这种方式能够快速迭代和测试代码，确保应用的稳定性。</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ol>\n<li><strong>安全性考虑</strong>：在使用 Docker.sock 时，要确保容器内的应用是可信的，避免潜在的安全风险。</li>\n<li><strong>资源管理</strong>：确保为 DinD 容器分配足够的资源，避免因资源不足导致的性能问题。</li>\n<li><strong>使用工具</strong>：结合使用 Docker Compose 或 Kubernetes，提升容器管理的便利性和可维护性。</li>\n</ol>\n","categories":["Docker"],"tags":["Docker"]},{"title":"Git Action","url":"/2022/08/26/Devops/Git-Action/","content":"<h1 id=\"Actions-secrets\"><a href=\"#Actions-secrets\" class=\"headerlink\" title=\"Actions secrets\"></a>Actions secrets</h1><p>在<strong>Actions secrets</strong>中添加的变量，可以直接在Git Action中使用个来直接获取到<code>$&#123;&#123;&#125;&#125;</code>，并且打印到CI流程中是***。</p>\n<p>在添加Actions secrets，也无法查看到Actions secrets的value。也保证了私密信息的安全性。</p>\n<h1 id=\"Git-Action\"><a href=\"#Git-Action\" class=\"headerlink\" title=\"Git Action\"></a>Git Action</h1><p>在项目的根目录下创建一个文件夹，文件夹中创建一个yml文件，目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.github</span><br><span class=\"line\">---workflows</span><br><span class=\"line\">------main.yml</span><br></pre></td></tr></table></figure>\n\n<p>在创建的main.yml中编写项目的CI</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a basic workflow to help you get started with Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Controls when the workflow will run</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">JDK</span> <span class=\"number\">1.8</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-java@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">java-version:</span> <span class=\"number\">1.8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">with</span> <span class=\"string\">Maven</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">mvn</span> <span class=\"string\">-B</span> <span class=\"string\">package</span> <span class=\"string\">--file</span> <span class=\"string\">pom.xml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BuildDockerImage</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">docker</span> <span class=\"string\">build</span> <span class=\"string\">.</span> <span class=\"string\">--file</span> <span class=\"string\">Dockerfile</span> <span class=\"string\">--tag</span> <span class=\"string\">my-image-name:$(date</span> <span class=\"string\">+%s)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Login</span> <span class=\"string\">to</span> <span class=\"string\">DockerHub</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/login-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKER_USERNAME</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 这个Actions secrets中添加的秘钥</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKER_PASSWORD</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 这个Actions secrets中添加的秘钥</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">to</span> <span class=\"string\">Docker</span> <span class=\"string\">Repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/build-push-action@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">          <span class=\"attr\">push:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">tags:</span> <span class=\"string\">fanq1213/app:latest</span></span><br></pre></td></tr></table></figure>\n\n<p>当有新的代码提交后，会自动触发Git Action实现CI流程。</p>\n","categories":["CICD"],"tags":["CICD"]},{"title":"Docker compose","url":"/2024/05/16/Docker/docker-compose/","content":"<h1 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h1><p>docker-compose 是一个基于 docker 的开源项目，一般用来管理容器服务，通过调用 docker 服务的 API 实现对 docker 容器集群的快速编排。docker-compose 可以使用 YAML 文件来定义和配置应用程序需要的所有服务，包括容器的镜像、端口、环境变量、依赖关系、网络、存储等。通过一个简单的命令，就可以启动或停止应用程序的所有服务，而不需要逐个操作容器。</p>\n<h1 id=\"docker-compose-1\"><a href=\"#docker-compose-1\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h1><p>docker compose 是 docker 1.27 版本后引入的一个新特性，它是一个命令行工具，可以直接使用 docker 命令来运行 docker-compose 文件。docker compose 的目标是替代 docker-compose，提供更好的性能和兼容性，以及更简洁的语法和功能。docker compose 还支持使用云原生应用模型（CNAB）来打包和共享多容器应用。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h1><ul>\n<li>docker-compose 需要单独安装，而 docker compose 是内置在 docker 中的。</li>\n<li>docker-compose 使用 <code>docker-compose</code> 命令来运行 YAML 文件，而 docker compose 使用 <code>docker compose</code> 命令来运行 YAML 文件。</li>\n<li>docker-compose 的 YAML 文件格式和语法与 docker compose 有一些差异，例如 docker compose 不支持 <code>extends</code> 和 <code>depends_on</code> 等关键字。</li>\n<li>docker compose 支持使用 CNAB 来打包和共享多容器应用，而 docker-compose 不支持。</li>\n</ul>\n<h1 id=\"升级遇到的坑\"><a href=\"#升级遇到的坑\" class=\"headerlink\" title=\"升级遇到的坑\"></a>升级遇到的坑</h1><p>同样的yaml来启动，docker-compose启动没有任何问题，但是docker compose启动就有问题，错误log. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The driver could not establish a secure connection to SQL Server by using Secure Sockets Layer (SSL) encryption. Error: &quot;PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target&quot;. ClientConnectionId:a7f57706-f5cc-466f-afd1-0a2b2a6f11ed</span><br></pre></td></tr></table></figure>\n\n<p>无论添加那些忽略SSL配置，或者将证书手动挂载等等等方案，都是无法解决此问题！</p>\n<p>最后定位到是command中的bash转义的问题，将 yaml 中的<code>&quot;&quot;</code>改成<code>&#39;&#39;</code>后，docker compose v2可以正常启动，或者在<code>&quot;&quot;</code>中使用<code>\\\\</code>来在进行转义。</p>\n<p>最新版本的docker compose的yaml已经不在需要写version了，docker compose会根据上下文自行解析。</p>\n","categories":["Docker"],"tags":["Docker"]},{"title":"Jenkins的使用","url":"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"插件的安装\"><a href=\"#插件的安装\" class=\"headerlink\" title=\"插件的安装\"></a>插件的安装</h1><blockquote>\n<p>在Manage Jenkins下的Manage Plugins中安装一下插件</p>\n</blockquote>\n<ul>\n<li><p><strong>Docker Pipeline &amp;&amp; Docker</strong></p>\n<ul>\n<li><p>安装Docker Pipeline会自动安装docker相关的</p>\n</li>\n<li><p>这个允许我们自定义agent使用docker环境</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Git Parameter</strong></p>\n<ul>\n<li>解析git参数，允许我们选择分支进行构建</li>\n</ul>\n</li>\n<li><p><strong>Active Choices</strong></p>\n<ul>\n<li>可以做到参数的级联选择</li>\n</ul>\n</li>\n<li><p><strong>Generic Webhook Trigger</strong></p>\n<ul>\n<li>通用的webhook触发器，构建更强大的webhook功能</li>\n</ul>\n</li>\n<li><p><strong>Role-based Authorization Strategy</strong> </p>\n<ul>\n<li>RBAC权限指定，给一个用户精确指定权限</li>\n</ul>\n</li>\n<li><p><strong>List Git Branches Parameter</strong></p>\n<ul>\n<li>列出分支参数</li>\n</ul>\n</li>\n<li><p><strong>Build With Parameters</strong></p>\n<ul>\n<li>基于自定义参数构建</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"流水线的创建\"><a href=\"#流水线的创建\" class=\"headerlink\" title=\"流水线的创建\"></a>流水线的创建</h1><blockquote>\n<p>在Dashboard下的新建Item，创建一个流水线，然后确定。</p>\n</blockquote>\n<img src=\"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209211809255.png\" class title=\"image-20211209211809255\">\n\n<blockquote>\n<p>然后再java-devops-demo中选择配置，添加触发远程构建，在流水线定义中，选择Pipeline script from SCM。</p>\n<span id=\"more\"></span>\n\n<p>下图中的身份验证令牌在jenkins可以随意填写，等到在git或者gitee仓库添加WebHooks的时候，保持一直即可。</p>\n<p>Repository URL就是你自己的代码仓库的URL。由于我目前的仓库是公开的，所以不需要添加Credentials。</p>\n</blockquote>\n<img src=\"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209212141935.png\" class title=\"image-20211209212141935\">\n\n<img src=\"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209212213159.png\" class title=\"image-20211209212213159\">\n\n<h1 id=\"创建Jenkins用户\"><a href=\"#创建Jenkins用户\" class=\"headerlink\" title=\"创建Jenkins用户\"></a>创建Jenkins用户</h1><blockquote>\n<p>在Manage Jenkins下的Manage Users创建一个新的用户，创建完成后使用新的用户登录Jenkins，然后使用当前登录用户创建一个token，是用来下面在git或者gitee添加WebHooks时使用。</p>\n<p>将创建好的用户名和token安装下面格式保存起来，下面添加WebHooks会用到。</p>\n<p>UserName:Token</p>\n</blockquote>\n<h1 id=\"添加WebHooks\"><a href=\"#添加WebHooks\" class=\"headerlink\" title=\"添加WebHooks\"></a>添加WebHooks</h1><blockquote>\n<p>为了测试方便，我目前使用的gitee下的仓库，如果使用的git，同理也可以同样添加。</p>\n<p>首先去到仓库的管理面板，选择WebHooks，选择添加。在URL处添加格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://UserName:Token@JenkinsURL:Port/job/流水线名字/build?token=流水线中添加的身份令牌的名字</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://fanq:1aqafb08456f2a35698wffad68fb4a7436@127.0.0.1:8080/job/java-devops-demo/build?token=fanq</span><br></pre></td></tr></table></figure>\n\n<p>默认选择的push事件，即当提交代码推送到仓库时，就会触发Jenkins的流水线工作。</p>\n</blockquote>\n<img src=\"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209213948231.png\" class title=\"image-20211209213948231\">\n\n<blockquote>\n<p>添加完成后，点击测试，显示成功。</p>\n</blockquote>\n<img src=\"/2021/12/09/Devops/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209214134952.png\" class title=\"image-20211209214134952\">\n\n<p>以上就完成Jenkins了的自动触发流水线工作。</p>\n","categories":["Devops"],"tags":["Devops"]},{"title":"git-secret","url":"/2021/12/09/Devops/git-secret/","content":"<h1 id=\"安装git-secret\"><a href=\"#安装git-secret\" class=\"headerlink\" title=\"安装git-secret\"></a>安装git-secret</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装git</span></span><br><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\"># 安装git-secret</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/sobolevn/git-secret.git git-secret</span><br><span class=\"line\"><span class=\"comment\">#初始化secret</span></span><br><span class=\"line\">git init &amp;&amp; git secret init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装GPG</span></span><br><span class=\"line\">sudo yum install gnupg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生成gpg --gen-key</span></span><br><span class=\"line\">gpg --gen-key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行log\"><a href=\"#执行log\" class=\"headerlink\" title=\"执行log\"></a>执行log</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># gpg --gen-key</span></span><br><span class=\"line\">gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Use <span class=\"string\">&quot;gpg --full-generate-key&quot;</span> <span class=\"keyword\">for</span> a full featured key generation dialog.</span><br><span class=\"line\"></span><br><span class=\"line\">GnuPG needs to construct a user ID to identify your key.</span><br><span class=\"line\"></span><br><span class=\"line\">Real name: fanqiang</span><br><span class=\"line\">Email address: fanq1213@163.com</span><br><span class=\"line\">You selected this USER-ID:</span><br><span class=\"line\">    <span class=\"string\">&quot;fanqiang &lt;fanq1213@163.com&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Change (N)ame, (E)mail, or (O)kay/(Q)uit? o</span><br><span class=\"line\">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class=\"line\">some other action (<span class=\"built_in\">type</span> on the keyboard, move the mouse, utilize the</span><br><span class=\"line\">disks) during the prime generation; this gives the random number</span><br><span class=\"line\">generator a better chance to gain enough entropy.</span><br><span class=\"line\">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class=\"line\">some other action (<span class=\"built_in\">type</span> on the keyboard, move the mouse, utilize the</span><br><span class=\"line\">disks) during the prime generation; this gives the random number</span><br><span class=\"line\">generator a better chance to gain enough entropy.</span><br><span class=\"line\">gpg: key 127A170867B0BB5D marked as ultimately trusted</span><br><span class=\"line\">gpg: revocation certificate stored as <span class=\"string\">&#x27;/root/.gnupg/openpgp-revocs.d/396021C7A0773749CD2C3BEF127A170867B0BB5D.rev&#x27;</span></span><br><span class=\"line\">public and secret key created and signed.</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2021-11-30 [SC] [expires: 2023-11-30]</span><br><span class=\"line\">      396021C7A0773749CD2C3BEF127A170867B0BB5D</span><br><span class=\"line\">uid                      fanqiang &lt;fanq1213@163.com&gt;</span><br><span class=\"line\">sub   rsa2048 2021-11-30 [E] [expires: 2023-11-30]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git init &amp;&amp; git secret init</span></span><br><span class=\"line\">Reinitialized existing Git repository <span class=\"keyword\">in</span> /java-devops-demo/sec/.git/</span><br><span class=\"line\">git-secret: abort: already initialized.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret tell fanq1213@163.com</span></span><br><span class=\"line\">gpg: checking the trustdb</span><br><span class=\"line\">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class=\"line\">gpg: depth: 0  valid:   3  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 3u</span><br><span class=\"line\">gpg: next trustdb check due at 2023-11-30</span><br><span class=\"line\">gpg: keybox <span class=\"string\">&#x27;/java-devops-demo/sec/.gitsecret/keys/pubring.kbx&#x27;</span> created</span><br><span class=\"line\">gpg: /java-devops-demo/sec/.gitsecret/keys/trustdb.gpg: trustdb created</span><br><span class=\"line\">git-secret: <span class=\"keyword\">done</span>. fanq1213@163.com added as user(s) <span class=\"built_in\">who</span> know the secret.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret add secret</span></span><br><span class=\"line\">git-secret: these files are not <span class=\"keyword\">in</span> .gitignore: secret</span><br><span class=\"line\">git-secret: auto adding them to .gitignore</span><br><span class=\"line\">git-secret: 1 item(s) added.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret hide</span></span><br><span class=\"line\">git-secret: <span class=\"keyword\">done</span>. 1 of 1 files are hidden.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["CICD"],"tags":["CICD"]},{"title":"Jasypt加密工具","url":"/2021/12/09/Devops/Jasypt%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7/","content":"<h1 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.ulisesbocchio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加application-yaml配置\"><a href=\"#添加application-yaml配置\" class=\"headerlink\" title=\"添加application.yaml配置\"></a>添加application.yaml配置</h1><ul>\n<li>采用对称加密的yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">  <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">fanq1213@163.com</span> <span class=\"comment\"># 加密和解密使用的盐</span></span><br><span class=\"line\">    <span class=\"attr\">algorithm:</span> <span class=\"string\">PBEWithMD5AndDES</span> <span class=\"comment\"># jasypt的默认对称加密算法</span></span><br><span class=\"line\">    <span class=\"attr\">property:</span></span><br><span class=\"line\">      <span class=\"attr\">prefix:</span> <span class=\"string\">ENC(</span> <span class=\"comment\"># 加密后的信息的前缀</span></span><br><span class=\"line\">      <span class=\"attr\">suffix:</span> <span class=\"string\">)</span> <span class=\"comment\"># 加密后的信息的后缀 </span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"comment\"># 此处可以是各种敏感信息(数据库密码，Redis密码)，此处简化处理</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span> <span class=\"string\">ENC(Pjp...)</span> <span class=\"comment\"># 被加密的密文，增加前后缀是为了让jasypt可以定位到密文</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>采用非对称加密的yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">  <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">    <span class=\"attr\">privateKeyFormat:</span> <span class=\"string\">PEM</span> <span class=\"comment\"># 非对称加密的秘钥类型: DER和PEM 此处要和你自己实现的非对称加密的工具相对应</span></span><br><span class=\"line\">    <span class=\"attr\">privateKeyString:</span> &#123;<span class=\"string\">RSAPrivateKey</span>&#125; <span class=\"comment\"># 非对称加密的私钥，用来解密密文</span></span><br><span class=\"line\">    <span class=\"attr\">property:</span></span><br><span class=\"line\">      <span class=\"attr\">prefix:</span> <span class=\"string\">ENC(</span> <span class=\"comment\"># 加密后的信息的前缀</span></span><br><span class=\"line\">      <span class=\"attr\">suffix:</span> <span class=\"string\">)</span> <span class=\"comment\"># 加密后的信息的后缀 </span></span><br><span class=\"line\"><span class=\"attr\">secret:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span> <span class=\"string\">ENC(Pjp...)</span> <span class=\"comment\"># 被加密的密文，增加前后缀是为了让jasypt可以定位到密文</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>非对称加密需要自己实现非对称加密的算法(网上找的工具类)</p>\n<span id=\"more\"></span>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.devops.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.encryptor.SimpleAsymmetricConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.encryptor.SimpleAsymmetricStringEncryptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.util.AsymmetricCryptography;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Key;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPairGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RSA公钥/私钥 工具类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 注:此工具类摘录自某个网友，具体的我忘记了，这是之前去网上找的，当时忘记把链接记下来了，深感抱歉。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> JustryDeng</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/12 13:19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KeypairUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_ALGORITHM</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PUBLIC_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSAPublicKey&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PRIVATE_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSAPrivateKey&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取公钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyMap 公钥/私钥信息map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getPublicKey</span><span class=\"params\">(Map&lt;String, Object&gt; keyMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Key</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (Key) keyMap.get(PUBLIC_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encryptBase64(key.getEncoded());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取私钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyMap 公钥/私钥信息map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getPrivateKey</span><span class=\"params\">(Map&lt;String, Object&gt; keyMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Key</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (Key) keyMap.get(PRIVATE_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encryptBase64(key.getEncoded());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将byte[]型的密钥转换为String类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 公钥/私钥字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥/私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encryptBase64</span><span class=\"params\">(<span class=\"type\">byte</span>[] key)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将String类型的密钥转换为byte[]</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 公钥/私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥/私钥字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] decryptBase64(String key) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.getDecoder().decode(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RSA是目前最有影响力的公钥加密算法，该算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，</span></span><br><span class=\"line\"><span class=\"comment\">     * 但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥，即公钥，而两个大素数</span></span><br><span class=\"line\"><span class=\"comment\">     * 组合成私钥。公钥是可发布的供任何人使用，私钥则为自己所有，供解密之用。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密者拥有私钥，并且将由私钥计算生成的公钥发布给加密者。加密都使用公钥进行加密，并将密文发送到</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密者，解密者用私钥解密将密文解码为明文。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 以甲要把信息发给乙为例，首先确定角色：甲为加密者，乙为解密者。首先由乙随机确定一个KEY，称之为</span></span><br><span class=\"line\"><span class=\"comment\">     * 密匙，将这个KEY始终保存在机器B中而不发出来；然后，由这个 KEY计算出另一个KEY，称之为公匙。这</span></span><br><span class=\"line\"><span class=\"comment\">     * 个公钥的特性是几乎不可能通过它自身计算出生成它的私钥。接下来通过网络把这个公钥传给甲，甲收到公</span></span><br><span class=\"line\"><span class=\"comment\">     * 钥后，利用公钥对信息加密，并把密文通过网络发送到乙，最后乙利用已知的私钥，就对密文进行解码了。</span></span><br><span class=\"line\"><span class=\"comment\">     * 以上就是RSA算法的工作流程。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 算法实现过程为：</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 随意选择两个大的质数p和q，p不等于q，计算N=pq。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. 根据欧拉函数，不大于N且与N互质的整数個数為(p-1)(q-1)。</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. 选择一个整数e与(p-1)(q-1)互质，并且e小于(p-1)(q-1)。</span></span><br><span class=\"line\"><span class=\"comment\">     * 4. 用以下这个公式计算d：d× e ≡ 1 (mod (p-1)(q-1))。</span></span><br><span class=\"line\"><span class=\"comment\">     * 5. 将p和q的记录销毁。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 以上内容中，(N,e)是公钥，(N,d)是私钥。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RSA算法的应用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. RSA的公钥和私钥是由KeyPairGenerator生成的，获取KeyPairGenerator的实例后还需要设置其密钥位数。</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置密钥位数越高，加密过程越安全，一般使用1024位。     *</span></span><br><span class=\"line\"><span class=\"comment\">     * KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * keyPairGen.initialize(1024);</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.公钥和私钥可以通过KeyPairGenerator执行generateKeyPair()后生成密钥对KeyPair，</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过KeyPair.getPublic()和KeyPair.getPrivate()来获取。</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态生成密钥对，这是当前最耗时的操作，一般要2s以上。</span></span><br><span class=\"line\"><span class=\"comment\">     * KeyPair keyPair = keyPairGen.generateKeyPair();</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥</span></span><br><span class=\"line\"><span class=\"comment\">     * PublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span></span><br><span class=\"line\"><span class=\"comment\">     * 私钥</span></span><br><span class=\"line\"><span class=\"comment\">     * PrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * byte[] publicKeyData = publicKey.getEncoded();</span></span><br><span class=\"line\"><span class=\"comment\">     * byte[] privateKeyData = publicKey.getEncoded();</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥和私钥都有它们自己独特的比特编码，可以通过getEncoded()方法获取，返回类型为byte[]。</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过byte[]可以再度将公钥或私钥还原出来。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, Object&gt; <span class=\"title function_\">initKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取密钥对生成器</span></span><br><span class=\"line\">        <span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">keyPairGen</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(KEY_ALGORITHM);</span><br><span class=\"line\">        <span class=\"comment\">// 设置密钥位数</span></span><br><span class=\"line\">        keyPairGen.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成密钥对</span></span><br><span class=\"line\">        <span class=\"type\">KeyPair</span> <span class=\"variable\">keyPair</span> <span class=\"operator\">=</span> keyPairGen.generateKeyPair();</span><br><span class=\"line\">        <span class=\"comment\">// 公钥</span></span><br><span class=\"line\">        <span class=\"type\">RSAPublicKey</span> <span class=\"variable\">publicKey</span> <span class=\"operator\">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">        <span class=\"comment\">// 私钥</span></span><br><span class=\"line\">        <span class=\"type\">RSAPrivateKey</span> <span class=\"variable\">privateKey</span> <span class=\"operator\">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\">        Map&lt;String, Object&gt; keyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class=\"line\">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = initKey();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;公钥---&gt;&gt;&gt;&quot;</span> + getPublicKey(map));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;私钥---&gt;&gt;&gt;&quot;</span> + getPrivateKey(map));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        getKey();</span><br><span class=\"line\">        <span class=\"type\">SimpleAsymmetricConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAsymmetricConfig</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置密钥类型</span></span><br><span class=\"line\">        config.setKeyFormat(AsymmetricCryptography.KeyFormat.PEM);</span><br><span class=\"line\">        <span class=\"comment\">// 设置用来加密的公钥(注:生成的公钥/私钥可能会有换行，保不保留换行都一样)</span></span><br><span class=\"line\">        config.setPublicKey(<span class=\"string\">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJqB5wNM2Q5mcyIP/LHgNDQLhOZ0zAGE3Q4/fNJ0EDQe1ZJFLUx3IVveNXpv2AzPG33t9lmSOcbY4PpRlG+AJkWUDqyOg2ITc3YTbqyC0uTodBpX2f45mBdhX2yr/G3Np1hSZm9wogHZHYkFdZMEyWQtW7hINgSmDXBcx5q0JprwIDAQAB&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">StringEncryptor</span> <span class=\"variable\">encryptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAsymmetricStringEncryptor</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanq1213@163.com&quot;</span>;</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;加密前---&gt;&gt;&gt;&quot;</span> + info));</span><br><span class=\"line\">        <span class=\"comment\">// 加密</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> encryptor.encrypt(info);</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;加密后---&gt;&gt;&gt;&quot;</span> + result));</span><br><span class=\"line\">        <span class=\"comment\">// 解密</span></span><br><span class=\"line\">        config.setPrivateKey(<span class=\"string\">&quot;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAImoHnA0zZDmZzIg/8seA0NAuE5nTMAYTdDj980nQQNB7VkkUtTHchW941em/YDM8bfe32WZI5xtjg+lGUb4AmRZQOrI6DYhNzdhNurILS5Oh0GlfZ/jmYF2FfbKv8bc2nWFJmb3CiAdkdiQV1kwTJZC1buEg2BKYNcFzHmrQmmvAgMBAAECgYANQx87nDq53RjQIZHDVe7midO36gfg8fZ9S5lSMJf44l8lmXRJf7WkFplSlooR4KzhFB3dwfVGWt+27icTSU2hjAG+NOnzJZG6l115LEtxHQ6FcaTiEI74IntFmJj7A7iIJqjvOhd0NdsPByRbdnuNa9KckvQxBWxAMG1Eas+LoQJBAPKV78bn120sriuJr6F3CNp9L7+IiYkFHK30+d4UP0sBazwB6EabDvFbV0myBu8jbAqqGICoKT6WVDEpkzmyTgcCQQCRRMyETmAusbx+vF99IM2c7F7tPf+r3uMPgwWv/dntqODM80cuqa7CA96FWl61UjM+5kn/Cn3FmNGfTSd5bh0ZAkBOEYi353bB0MZAhq/585fq0KzkI+m3Kej/5r3fBX8VAWDkT+zThCU78VxXAC8RGMI1cGYwSW30kWaI58tUnxhTAkABr9PUIXjacfPnYNaXBF9+1/vOM28Zls/6KSJSxdbW/KQHnTeRYiUGWbcmw0LgRiEUNOZdEMkfF0Qv3lx7+3xZAkAfRfaNUc7wgC6S46R210Inl6ysTC0iOs7mKt7pZXfUb4IlMpF5QwokRXNL9GPaiz9OrmYw60sXBqsHrS11Deum&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originInfo</span> <span class=\"operator\">=</span> encryptor.decrypt(result);</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;解密后---&gt;&gt;&gt;&quot;</span> + originInfo));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Jenkins整合Jasypt\"><a href=\"#Jenkins整合Jasypt\" class=\"headerlink\" title=\"Jenkins整合Jasypt\"></a>Jenkins整合Jasypt</h1><p>将解密的私钥放在Jenkins的Credentials中，然后使用Jenkins的流水线中的环境变量可以取出，然后可以使用sed命令替换，或者使用docker run -e的命令从环境变量中取出来设置到SpringBoot应用中来实现私钥的管理。</p>\n<p>代码示例(Jenkins的流水线都在代码的Jenkinsfile中)：</p>\n<p><a href=\"https://gitee.com/fanq1213/java-devops-demo.git\">java-devops-demo</a></p>\n","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"sealed-secrets","url":"/2024/07/10/Devops/sealed-secrets%E9%83%A8%E7%BD%B2/","content":"<h1 id=\"安装Controller\"><a href=\"#安装Controller\" class=\"headerlink\" title=\"安装Controller\"></a>安装Controller</h1><p>部署项目资源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.27.0/controller.yaml</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装二进制命令\"><a href=\"#安装二进制命令\" class=\"headerlink\" title=\"安装二进制命令\"></a>安装二进制命令</h1><p>安装目前最新版本<code>0.27.0</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">KUBESEAL_VERSION=<span class=\"string\">&#x27;0.27.0&#x27;</span> <span class=\"comment\"># Set this to, for example, KUBESEAL_VERSION=&#x27;0.23.0&#x27;</span></span><br><span class=\"line\">curl -OL <span class=\"string\">&quot;https://github.com/bitnami-labs/sealed-secrets/releases/download/v<span class=\"variable\">$&#123;KUBESEAL_VERSION:?&#125;</span>/kubeseal-<span class=\"variable\">$&#123;KUBESEAL_VERSION:?&#125;</span>-linux-amd64.tar.gz&quot;</span></span><br><span class=\"line\">tar -xvzf kubeseal-<span class=\"variable\">$&#123;KUBESEAL_VERSION:?&#125;</span>-linux-amd64.tar.gz kubeseal</span><br><span class=\"line\">sudo install -m 755 kubeseal /usr/local/bin/kubeseal</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"加密现有的secret\"><a href=\"#加密现有的secret\" class=\"headerlink\" title=\"加密现有的secret\"></a>加密现有的secret</h1><p>现有的secret的配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">secret-data</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">&#x27;YWRtaW4=&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">&#x27;MWYyZDFlMmU2N2Rm&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>kubeseal</code>加密secret</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeseal &lt; secret.yaml &gt; sealed-secret.yaml</span><br></pre></td></tr></table></figure>\n\n<p>加密后的sealed-secret.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;kind&quot;:</span> <span class=\"string\">&quot;SealedSecret&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;apiVersion&quot;:</span> <span class=\"string\">&quot;bitnami.com/v1alpha1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;metadata&quot;:</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;:</span> <span class=\"string\">&quot;secret-data&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;namespace&quot;:</span> <span class=\"string\">&quot;doubao&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;creationTimestamp&quot;:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;spec&quot;:</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;template&quot;:</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;metadata&quot;:</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;:</span> <span class=\"string\">&quot;secret-data&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;namespace&quot;:</span> <span class=\"string\">&quot;doubao&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;creationTimestamp&quot;:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;:</span> <span class=\"string\">&quot;Opaque&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;encryptedData&quot;:</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;password&quot;:</span> <span class=\"string\">&quot;AgBeGhg/QichjPxn1IiFNp07imo3srzor8eiXkm9KKQcB3KHVMza1QId1JlJNLntrA7J+9dX78TbIZ8b3ioqfGInZPe89PhN4BBS0RZDLarn6+Lh3Yl9g4e+EA+7bNVkm8Sk1iEABO5cTJ3VW2rZiIBp0ENl62LBPhR9BYvQLiN0T/e8LCgVOs9nzByjXjDdxRL1R6jhLIpVhyvTQ7hzy6c348EJlxU/3/mX+efMnAiwZpiF0b/OJThW8Yg3CuKicNaK/zhBLt7QwZ33oqA9EnD2px+LPQnPNUXJW6mM+g/vszJMoEFhQJRev5ghZwkDeya/5lOaPCvMG31cYKShvqLGbW31+csWimMbXmom31sDTnp8j+BBji+1hnfkCC5cjE8RVrUPcc6Mhv/JBxkjVxuzJblfH+qHdr+7LTvMXPw7sgfTtQedb4pQ77wk6FWaIXMs8pud92UFaubF2+XTERKkPLik5b6sRX33Cc+quUfg2kxnUCnX+qmMXl6YleFw8j8uBLMH+NREHzVPLmAQmbf5xUD5Opi1cID2ySVfNNI+vEhMCNh1DtXy5WhFUS0Qy+lknmLW/V+IGKDVXD19wxL9OK9ClfSmWjRVinL5Wez9fIiPLvry3L69cavzd3OJDAWQoOCkGRKNXLt5YyW/cnR2Dz9IiRs3/I8PfrAewqmEU1nwyHAuWOo3JpoXrWI/9l9Ny75mjvgK2NZPf9I=&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;username&quot;:</span> <span class=\"string\">&quot;AgC59C1VoIEqqimk9iiyeGULkW9aYKG4oacXXGPY0K1+Nd2q0U9fC1N5emnrjV7pRaCH3VdCgvOMyHSBnNv5Xk2ZtNRRlBdjhJoABhixvTrxPz2Q9Fk2pApZriZ51jGeVH6XtOwrKfCB1SrTHjC5Y5A9ZXB3NkQmOX0bKVZVAKD/Vg2Y7ZZxvi/ZmL6WbBYWypneb3x5Tgn6d+POIsD6qURw0xEwmeneNlZDqmGraBW0y5Ry4bYfIqG7ra/ukMqMaKj9eBL3ROSNKPPCXFpI8sLt6BxUjJ7dlPo5b787yXYzhQl8skIb7WtPSuiBms/fKqrIEklNCI/enReHDJezS6nNOkjA/wWgcfwkcyuBOrqkJUp2YToXX1QJivmeQGHjBiM6Y271skkv7D+F+B2qT6ZjZ5SgSbECuAzsp7UxO79KsAOTzBzYIk70NkWxKUT+VunMABxVZz5dCOtxVa0eq050X7pzEp1i7fZ4PLupNwz6rJvNopgIKopQo4dxNo2szD9Lwvd6sQRdl0X8la2ShNX83Zwprlv/UBd+4dPlteGFrrq1xKSXW7K7mXFYYJDoJBmGiZYwUmSaVvIErwYoC1AmVUCxp97GcpEV0ndyK+o9zAL5NAnVPSa/jxlcTWAqHF9ssXM4095RR1L85V0v9+URZ1ngoeRnkrWownF34RYWoqZArwj0DGgHI3NmQs+C7jq2EqppWw==&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用到集群中\"><a href=\"#应用到集群中\" class=\"headerlink\" title=\"应用到集群中\"></a>应用到集群中</h1><p>当apply后，<code>SealedSecret</code>会帮忙管理原有的secret，如果想查看原值，可以在k8s集群中查看。</p>\n<p><code>SealedSecret</code>加密后的密文，可以提交到git上，因为加解密都在k8s集群中的SealedSecret Controller中执行。</p>\n<img src=\"/2024/07/10/Devops/sealed-secrets%E9%83%A8%E7%BD%B2/image-20240712105005663.png\" class title=\"image-20240712105005663\">\n\n<h1 id=\"查看pod中引用结果\"><a href=\"#查看pod中引用结果\" class=\"headerlink\" title=\"查看pod中引用结果\"></a>查看pod中引用结果</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~/k8s<span class=\"comment\"># kubectl get po -n doubao </span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-d56bbf567-s94bw    1/1     Running   0          14h</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   0          14h</span><br><span class=\"line\">root@devops:~/k8s<span class=\"comment\"># kubectl exec -it -n doubao redis-6b5f9c8866-hdlmc  bash -- env|grep -E &#x27;user|pass&#x27;</span></span><br><span class=\"line\">password=1f2d1e2e67df</span><br><span class=\"line\">username=admin</span><br><span class=\"line\">root@devops:~/k8s<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Devops"],"tags":["Devops"]},{"title":"部署Argo CD","url":"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/","content":"<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p>新建命名空间并部署项目资源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create namespace argocd</span><br><span class=\"line\">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"暴露服务\"><a href=\"#暴露服务\" class=\"headerlink\" title=\"暴露服务\"></a>暴露服务</h2><p>默认情况下， Argo CD 服务不对外暴露服务，可以通过 LoadBalancer 或者 NodePort 类型的 Service、Ingress、Kubectl 端口转发等方式将 Argo CD 服务发布到 Kubernetes 集群外部。</p>\n<p>由于是vm自建，所以选择使用NodePort 的方式暴露服务。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch svc argocd-server -n argocd -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;: &#123;&quot;type&quot;: &quot;NodePort&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看随机暴露的端口</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get svc -n argocd </span></span><br><span class=\"line\">NAME                                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class=\"line\">argocd-applicationset-controller          ClusterIP   10.43.49.182    &lt;none&gt;        7000/TCP,8080/TCP            78m</span><br><span class=\"line\">argocd-dex-server                         ClusterIP   10.43.155.32    &lt;none&gt;        5556/TCP,5557/TCP,5558/TCP   78m</span><br><span class=\"line\">argocd-metrics                            ClusterIP   10.43.241.106   &lt;none&gt;        8082/TCP                     78m</span><br><span class=\"line\">argocd-notifications-controller-metrics   ClusterIP   10.43.239.240   &lt;none&gt;        9001/TCP                     78m</span><br><span class=\"line\">argocd-redis                              ClusterIP   10.43.37.52     &lt;none&gt;        6379/TCP                     78m</span><br><span class=\"line\">argocd-repo-server                        ClusterIP   10.43.79.21     &lt;none&gt;        8081/TCP,8084/TCP            78m</span><br><span class=\"line\">argocd-server                             NodePort    10.43.65.157    &lt;none&gt;        80:32221/TCP,443:31046/TCP   78m</span><br><span class=\"line\">argocd-server-metrics                     ClusterIP   10.43.235.50    &lt;none&gt;        8083/TCP                     78m</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"访问UI\"><a href=\"#访问UI\" class=\"headerlink\" title=\"访问UI\"></a>访问UI</h2><p>使用node:31046访问</p>\n<img src=\"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/image-20240708103122048.png\" class title=\"image-20240708103122048\">\n\n<h2 id=\"添加git仓库\"><a href=\"#添加git仓库\" class=\"headerlink\" title=\"添加git仓库\"></a>添加git仓库</h2><p>因为本机vm访问git不通，所以选择gitlab，使用ui添加</p>\n<img src=\"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/image-20240708114924594.png\" class title=\"image-20240708114924594\">\n\n<h2 id=\"添加app\"><a href=\"#添加app\" class=\"headerlink\" title=\"添加app\"></a>添加app</h2><h3 id=\"使用argo-cli-创建\"><a href=\"#使用argo-cli-创建\" class=\"headerlink\" title=\"使用argo cli 创建\"></a>使用argo cli 创建</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">argocd app create myapp \\</span><br><span class=\"line\">--repo https://gitlab.com/doubao2/doubao.git \\</span><br><span class=\"line\">--path nginx --dest-server \\</span><br><span class=\"line\">https://kubernetes.default.svc \\</span><br><span class=\"line\">--dest-namespace doubao</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用yaml创建\"><a href=\"#使用yaml创建\" class=\"headerlink\" title=\"使用yaml创建\"></a>使用yaml创建</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">argoproj.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Application</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">argocd</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">doubao</span> <span class=\"comment\"># 部署应用的命名空间</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://kubernetes.default.svc</span> <span class=\"comment\"># API Server 地址</span></span><br><span class=\"line\">  <span class=\"attr\">project:</span> <span class=\"string\">default</span> <span class=\"comment\"># 项目名</span></span><br><span class=\"line\">  <span class=\"attr\">source:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">nginx</span> <span class=\"comment\"># 资源文件路径</span></span><br><span class=\"line\">    <span class=\"attr\">repoURL:</span> <span class=\"string\">https://gitlab.com/doubao2/doubao.git</span> <span class=\"comment\"># Git 仓库地址</span></span><br><span class=\"line\">    <span class=\"attr\">targetRevision:</span> <span class=\"string\">main</span> <span class=\"comment\"># 分支名</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用ui创建\"><a href=\"#使用ui创建\" class=\"headerlink\" title=\"使用ui创建\"></a>使用ui创建</h3><p>添加对应的参数</p>\n<img src=\"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/image-20240708115216963.png\" class title=\"image-20240708115216963\">\n\n\n\n<h2 id=\"手动同步gitlab配置\"><a href=\"#手动同步gitlab配置\" class=\"headerlink\" title=\"手动同步gitlab配置\"></a>手动同步gitlab配置</h2><img src=\"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/image-20240708115324529.png\" class title=\"image-20240708115324529\">\n\n<h2 id=\"发布和回滚\"><a href=\"#发布和回滚\" class=\"headerlink\" title=\"发布和回滚\"></a>发布和回滚</h2><p>手动同步gitlab配置后，可以进行版本的发布和回滚的管理</p>\n<img src=\"/2024/07/09/Devops/argo%E9%83%A8%E7%BD%B2/image-20240708115427611.png\" class title=\"image-20240708115427611\">\n\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><p>Argocd在自动部署的时候，会自动给资源添加labels。默认值是<code>app.kubernetes.io/instance: $name</code>，可以在argocd-cm中设置labels的key。</p>\n<p><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/\">argocd-cm官方样例</a></p>\n<p>由于自动添加labels会导致Kustomization编排的资源会被覆盖labels，这样会导致不同app引用相同的configmap后，会出现OutOfSync的问题。</p>\n<p>由于目前没有禁止自动添加labels的功能和配置，但是可以自定义忽略不同的资源信息。所以曲线救国可以直接忽略掉这个labels的变更，这样argocd在sync后就不会出现OutOfSync了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/name:</span> <span class=\"string\">argocd-cm</span></span><br><span class=\"line\">    <span class=\"attr\">app.kubernetes.io/part-of:</span> <span class=\"string\">argocd</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">argocd-cm</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">argocd</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">resource.customizations.ignoreDifferences.all:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    managedFieldsManagers:</span></span><br><span class=\"line\"><span class=\"string\">    - kube-controller-manager</span></span><br><span class=\"line\"><span class=\"string\">    jsonPointers:</span></span><br><span class=\"line\"><span class=\"string\">    - /metadata/labels/app.kubernetes.io~1instance</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Devops"],"tags":["Devops"]},{"title":"安装Jenkins","url":"/2022/08/10/Devops/%E5%AE%89%E8%A3%85Jenkins/","content":"<h1 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h1><p>官方文档地址：<strong><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">https://www.jenkins.io/zh/doc/book/installing/</a></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一步安装docker环境，然后执行docker run命令</span></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">-v jenkins-data:/var/jenkins_home \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime:ro \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">jenkinsci/blueocean </span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，通过ip地址访问，端口默认是docker run命令执行的8080端口，打开界面如下：</p>\n<img src=\"/2022/08/10/Devops/%E5%AE%89%E8%A3%85Jenkins/image-20211201233748173.png\" class title=\"image-20211201233748173\">\n\n<h2 id=\"获取管理员密码\"><a href=\"#获取管理员密码\" class=\"headerlink\" title=\"获取管理员密码\"></a>获取管理员密码</h2><h3 id=\"查看Jenkins启动日志\"><a href=\"#查看Jenkins启动日志\" class=\"headerlink\" title=\"查看Jenkins启动日志\"></a>查看Jenkins启动日志</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用命令</span></span><br><span class=\"line\">docker logs <span class=\"variable\">$&#123;CONTAINER ID&#125;</span></span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class=\"line\">Please use the following password to proceed to installation:</span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e</span><br><span class=\"line\"></span><br><span class=\"line\">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class=\"line\"></span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"进入到容器内部查看密码\"><a href=\"#进入到容器内部查看密码\" class=\"headerlink\" title=\"进入到容器内部查看密码\"></a>进入到容器内部查看密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用命令</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it <span class=\"variable\">$&#123;CONTAINER ID&#125;</span> /bin/sh</span><br><span class=\"line\">/ <span class=\"comment\"># cat /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看docker容器volume挂载位置\"><a href=\"#查看docker容器volume挂载位置\" class=\"headerlink\" title=\"查看docker容器volume挂载位置\"></a>查看docker容器volume挂载位置</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@master var]<span class=\"comment\"># docker volume ls</span></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\"><span class=\"built_in\">local</span>     jenkins-data</span><br><span class=\"line\">[root@master var]<span class=\"comment\"># docker volume inspect jenkins-data</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2021-12-01T23:05:24+08:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Driver&quot;</span>: <span class=\"string\">&quot;local&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Labels&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Mountpoint&quot;</span>: <span class=\"string\">&quot;/var/lib/docker/volumes/jenkins-data/_data&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;jenkins-data&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Options&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Scope&quot;</span>: <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">[root@master secrets]<span class=\"comment\"># cat /var/lib/docker/volumes/jenkins-data/_data/secrets/initialAdminPassword</span></span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化过程\"><a href=\"#初始化过程\" class=\"headerlink\" title=\"初始化过程\"></a>初始化过程</h1><p>选择安装推荐的插件，安装完成后需要<strong>创建第一个管理员用户</strong>，然后保存并完成。</p>\n<img src=\"/2022/08/10/Devops/%E5%AE%89%E8%A3%85Jenkins/image-20211201233848226.png\" class title=\"image-20211201233848226\">\n\n<h1 id=\"完成安装\"><a href=\"#完成安装\" class=\"headerlink\" title=\"完成安装\"></a>完成安装</h1><p>使用admin登录后界面如下</p>\n<img src=\"/2022/08/10/Devops/%E5%AE%89%E8%A3%85Jenkins/image-20211201234103165.png\" class title=\"image-20211201234103165\">","categories":["Devops"],"tags":["Devops"]},{"title":"Hexo部署到Github文件夹大小写问题","url":"/2024/07/30/Hexo/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/","content":"<h1 id=\"hexo生成文件夹\"><a href=\"#hexo生成文件夹\" class=\"headerlink\" title=\"hexo生成文件夹\"></a>hexo生成文件夹</h1><p>生成的文件夹是区分大小写的，但是提交到git时候，git是不区分大小写的。</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>更改git的<code>config</code>配置，文件位置<code>D:\\hexo\\.deploy_git\\.git\\config</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = false  #更改成false</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">\tremote = https://github.com/dooubb/doc.git</span><br><span class=\"line\">\tmerge = refs/heads/master</span><br></pre></td></tr></table></figure>\n\n<p>在手动更改<code>D:\\hexo\\.deploy_git\\tags</code>下的目标文件夹，将小写改成大写。</p>\n<p>然后hexo clean，在hexo g，最后在hexo d推送并部署到git仓库中</p>\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo搭建博客","url":"/2022/08/12/Hexo/Hexo%E4%BD%BF%E7%94%A8Next%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"初始化博客目录\"><a href=\"#初始化博客目录\" class=\"headerlink\" title=\"初始化博客目录\"></a>初始化博客目录</h2><p><code>例如：D:\\hexoblog\\docblog</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ hexo init</span><br><span class=\"line\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class=\"line\">INFO  Install dependencies</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">INFO  Start blogging with Hexo</span><br></pre></td></tr></table></figure>\n\n<p><code>目录信息</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml <span class=\"comment\">#Hexo的配置文件</span></span><br><span class=\"line\">├── db.json <span class=\"comment\">#Hexo自动生成的文件</span></span><br><span class=\"line\">├── package.json <span class=\"comment\">#插件配置文件，下同</span></span><br><span class=\"line\">├── package-lock.json </span><br><span class=\"line\">├── node_modules <span class=\"comment\">#生成网站需要用到的Node.js模块</span></span><br><span class=\"line\">├── scaffolds <span class=\"comment\">#存放模板的文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span> <span class=\"comment\">#博客Markdown源文件夹</span></span><br><span class=\"line\">├── public <span class=\"comment\">#存放生成的静态HTML文件</span></span><br><span class=\"line\">└── themes <span class=\"comment\">#主题文件夹</span></span><br></pre></td></tr></table></figure>\n\n<p><code>环境的各个信息</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ hexo -v</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 6.2.0</span><br><span class=\"line\">hexo-cli: 4.3.0</span><br><span class=\"line\">os: win32 10.0.22000 </span><br><span class=\"line\">node: 16.15.1</span><br><span class=\"line\">v8: 9.4.146.24-node.21</span><br><span class=\"line\">uv: 1.43.0</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.9</span><br><span class=\"line\">ares: 1.18.1</span><br><span class=\"line\">modules: 93</span><br><span class=\"line\">nghttp2: 1.47.0</span><br><span class=\"line\">napi: 8</span><br><span class=\"line\">llhttp: 6.0.4</span><br><span class=\"line\">openssl: 1.1.1o+quic</span><br><span class=\"line\">cldr: 40.0</span><br><span class=\"line\">icu: 70.1</span><br><span class=\"line\">tz: 2021a3</span><br><span class=\"line\">unicode: 14.0</span><br><span class=\"line\">ngtcp2: 0.1.0-DEV</span><br><span class=\"line\">nghttp3: 0.1.0-DEV</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ npm -v</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">8.17.0</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ node -v</span><br><span class=\"line\">v16.15.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装所需插件\"><a href=\"#安装所需插件\" class=\"headerlink\" title=\"安装所需插件\"></a>安装所需插件</h2><p><code>安装Next主题</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;themes/next&#x27;</span>...</span><br></pre></td></tr></table></figure>\n\n<p><code>安装字数统计和阅读时长</code></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install hexo-symbols-count-time --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">npm WARN deprecated highlight.js@9.18.5: Support has ended <span class=\"keyword\">for</span> 9.x series. Upgrade to @latest</span><br><span class=\"line\"></span><br><span class=\"line\">added 8 packages, and audited 249 packages <span class=\"keyword\">in</span> 25s</span><br><span class=\"line\"></span><br><span class=\"line\">20 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues, run:</span><br><span class=\"line\">  npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install eslint --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 71 packages, and audited 320 packages <span class=\"keyword\">in</span> 1m</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n<p><code>安装git远程部署</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$  npm install hexo-deployer-git --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 1 package, and audited 321 packages <span class=\"keyword\">in</span> 3s</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>添加搜索</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install hexo-generator-searchdb --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 1 package, and audited 322 packages <span class=\"keyword\">in</span> 3s</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更改配置文件\"><a href=\"#更改配置文件\" class=\"headerlink\" title=\"更改配置文件\"></a>更改配置文件</h2><p><code>更改_config.yml中的主题配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p><code>更改_config.yml中的Site配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\">title: dooubb</span><br><span class=\"line\">subtitle: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">description: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: dooubb</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>添加git部署配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  ignore_hidden: <span class=\"literal\">false</span> <span class=\"comment\"># 添加这个属性值为false 此配置为了git workflows工作</span></span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    <span class=\"comment\">#gitee: https://gitee.com/dooubb/doc.git,master</span></span><br><span class=\"line\">    github: https://github.com/dooubb/doco.git,master</span><br></pre></td></tr></table></figure>\n\n<p><code>在_config.yml添加字数统计和阅读时长配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: <span class=\"literal\">true</span></span><br><span class=\"line\">  time: <span class=\"literal\">true</span></span><br><span class=\"line\">  total_symbols: <span class=\"literal\">false</span></span><br><span class=\"line\">  total_time: <span class=\"literal\">false</span></span><br><span class=\"line\">  exclude_codeblock: <span class=\"literal\">false</span></span><br><span class=\"line\">  awl: 4</span><br><span class=\"line\">  wpm: 275</span><br><span class=\"line\">  suffix: <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更改主题配置文件\"><a href=\"#更改主题配置文件\" class=\"headerlink\" title=\"更改主题配置文件\"></a>更改主题配置文件</h2><p><code>更改NexT主题下_config.yml配置文件</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings 主题显示样式</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: <span class=\"literal\">false</span>     <span class=\"comment\"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class=\"line\">  item_text_post: <span class=\"literal\">false</span>     <span class=\"comment\"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class=\"line\"> <span class=\"comment\"># item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class=\"line\">  awl: 4                   <span class=\"comment\"># Average Word Length</span></span><br><span class=\"line\">  wpm: 275                 <span class=\"comment\"># Words Per Minute（每分钟阅读词数）</span></span><br><span class=\"line\">  suffix: mins.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Site Information Settings 网页小图标</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://theme-next.org/docs/getting-started/</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/qpp.png</span><br><span class=\"line\">  medium: /images/qpp.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br><span class=\"line\">  <span class=\"comment\">#android_manifest: /images/manifest.json</span></span><br><span class=\"line\">  <span class=\"comment\">#ms_browserconfig: /images/browserconfig.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Settings 文章的目录显示位置</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">sidebar:</span><br><span class=\"line\">  <span class=\"comment\"># Sidebar Position.</span></span><br><span class=\"line\">  <span class=\"comment\">#position: left</span></span><br><span class=\"line\">  position: right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Social Links</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the link label showing to end users.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/dooubb  || fab fa-github</span><br><span class=\"line\">  E-Mail: fanq1213@163.com || fa fa-envelope</span><br><span class=\"line\">  </span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  icons_only: <span class=\"literal\">false</span></span><br><span class=\"line\">  transition: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local Search 本地搜索</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  top_n_per_article: 1</span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  unescape: <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  preload: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文章创建时间和更新时间</span></span><br><span class=\"line\"><span class=\"comment\"># Post meta display settings</span></span><br><span class=\"line\">post_meta:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  created_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  updated_at:</span><br><span class=\"line\">    <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    another_day: <span class=\"literal\">false</span>  <span class=\"comment\">#如果是true表示同一天只显示创建时间</span></span><br><span class=\"line\">  categories: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改首页文章标题和统计信息居中\"><a href=\"#修改首页文章标题和统计信息居中\" class=\"headerlink\" title=\"修改首页文章标题和统计信息居中\"></a>修改首页文章标题和统计信息居中</h2><p><code>替换themes/next/source/css/_schemes/Mist/_posts-expanded.styl文件内容</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Post Expand</span><br><span class=\"line\">// --------------------------------------------------</span><br><span class=\"line\">.posts-expand &#123;</span><br><span class=\"line\">  &amp;.index &#123;</span><br><span class=\"line\">    .post-title&#123;</span><br><span class=\"line\">      text-align: center; <span class=\"comment\">#文章标题</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    .post-meta &#123;</span><br><span class=\"line\">      text-align: center; <span class=\"comment\">#统计信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      +<span class=\"function\"><span class=\"title\">mobile</span></span>() &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .post-meta &#123;</span><br><span class=\"line\">      margin: 5px 0 20px 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-eof &#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-block:not(:first-child) &#123;</span><br><span class=\"line\">    margin-top: 120px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-title, .post-meta &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-body img &#123;</span><br><span class=\"line\">    margin-left: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-tags &#123;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\"></span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">      background: <span class=\"variable\">$whitesmoke</span>;</span><br><span class=\"line\">      border-bottom: none;</span><br><span class=\"line\">      padding: 1px 5px;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;:hover &#123;</span><br><span class=\"line\">        background: <span class=\"variable\">$grey</span>-light;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-nav &#123;</span><br><span class=\"line\">    margin-top: 40px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.post-button &#123;</span><br><span class=\"line\">  margin-top: 20px;</span><br><span class=\"line\">  text-align: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  .btn &#123;</span><br><span class=\"line\">    // color: <span class=\"variable\">$grey</span>-dim;</span><br><span class=\"line\">    background: none;</span><br><span class=\"line\">    border: 0;</span><br><span class=\"line\">    border-bottom: 2px solid var(--btn-default-border-color);</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    transition-property: border;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      border-bottom-color: var(--btn-default-hover-border-color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加网站运行时长和备案号\"><a href=\"#添加网站运行时长和备案号\" class=\"headerlink\" title=\"添加网站运行时长和备案号\"></a>添加网站运行时长和备案号</h2><p><code>全部替换themes\\next\\layout\\_partials\\footer.swig文件</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.footer.beian.enable %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;beian&quot;</span>&gt;</span><br><span class=\"line\">    &#123;&#123;- next_url(<span class=\"string\">&#x27;https://beian.miit.gov.cn&#x27;</span>, theme.footer.beian.icp + <span class=\"string\">&#x27; &#x27;</span>) &#125;&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.footer.beian.gongan_icon_url %&#125;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">&quot;&#123;&#123; url_for(theme.footer.beian.gongan_icon_url) &#125;&#125;&quot;</span> style=<span class=\"string\">&quot;display: inline-block;&quot;</span>&gt;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.footer.beian.gongan_id and theme.footer.beian.gongan_num %&#125;</span><br><span class=\"line\">      &#123;&#123;- next_url(<span class=\"string\">&#x27;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=&#x27;</span> + theme.footer.beian.gongan_id, theme.footer.beian.gongan_num + <span class=\"string\">&#x27; &#x27;</span>) &#125;&#125;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=<span class=\"string\">&quot;copyright&quot;</span>&gt;</span><br><span class=\"line\">  &#123;%- <span class=\"built_in\">set</span> copyright_year = <span class=\"built_in\">date</span>(null, <span class=\"string\">&#x27;YYYY&#x27;</span>) %&#125;</span><br><span class=\"line\">  &amp;copy; &#123;% <span class=\"keyword\">if</span> theme.footer.since and theme.footer.since != copyright_year %&#125;&#123;&#123; theme.footer.since &#125;&#125; – &#123;% endif %&#125;</span><br><span class=\"line\">  &lt;span itemprop=<span class=\"string\">&quot;copyrightYear&quot;</span>&gt;&#123;&#123; copyright_year &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=<span class=\"string\">&quot;with-love&quot;</span>&gt;</span><br><span class=\"line\">    &lt;i class=<span class=\"string\">&quot;&#123;&#123; theme.footer.icon.name &#125;&#125;&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=<span class=\"string\">&quot;author&quot;</span> itemprop=<span class=\"string\">&quot;copyrightHolder&quot;</span>&gt;&#123;&#123; theme.footer.copyright or author &#125;&#125; &amp;&amp; &lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;sitetime&quot;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">  &lt;script language=javascript&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">siteTime</span></span>()&#123;</span><br><span class=\"line\">\t\twindow.setTimeout(<span class=\"string\">&quot;siteTime()&quot;</span>, 1000);</span><br><span class=\"line\">\t\tvar seconds = 1000;</span><br><span class=\"line\">\t\tvar minutes = seconds * 60;</span><br><span class=\"line\">\t\tvar hours = minutes * 60;</span><br><span class=\"line\">\t\tvar days = hours * 24;</span><br><span class=\"line\">\t\tvar years = days * 365;</span><br><span class=\"line\">\t\tvar today = new Date();</span><br><span class=\"line\">\t\tvar todayYear = today.getFullYear();</span><br><span class=\"line\">\t\tvar todayMonth = today.getMonth()+1;</span><br><span class=\"line\">\t\tvar todayDate = today.getDate();</span><br><span class=\"line\">\t\tvar todayHour = today.getHours();</span><br><span class=\"line\">\t\tvar todayMinute = today.getMinutes();</span><br><span class=\"line\">\t\tvar todaySecond = today.getSeconds();</span><br><span class=\"line\">\t\t/* Date.UTC() -- 返回<span class=\"built_in\">date</span>对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span><br><span class=\"line\">\t\tyear - 作为<span class=\"built_in\">date</span>对象的年份，为4位年份值</span><br><span class=\"line\">\t\tmonth - 0-11之间的整数，做为<span class=\"built_in\">date</span>对象的月份</span><br><span class=\"line\">\t\tday - 1-31之间的整数，做为<span class=\"built_in\">date</span>对象的天数</span><br><span class=\"line\">\t\thours - 0(午夜24点)-23之间的整数，做为<span class=\"built_in\">date</span>对象的小时数</span><br><span class=\"line\">\t\tminutes - 0-59之间的整数，做为<span class=\"built_in\">date</span>对象的分钟数</span><br><span class=\"line\">\t\tseconds - 0-59之间的整数，做为<span class=\"built_in\">date</span>对象的秒数</span><br><span class=\"line\">\t\tmicroseconds - 0-999之间的整数，做为<span class=\"built_in\">date</span>对象的毫秒数 */</span><br><span class=\"line\">\t\tvar t1 = Date.UTC(2018,02,13,15,00,00); //北京时间2018-2-13 00:00:00</span><br><span class=\"line\">\t\tvar t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span><br><span class=\"line\">\t\tvar diff = t2-t1;</span><br><span class=\"line\">\t\tvar diffYears = Math.floor(diff/years);</span><br><span class=\"line\">\t\tvar diffDays = Math.floor((diff/days)-diffYears*365);</span><br><span class=\"line\">\t\tvar diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);</span><br><span class=\"line\">\t\tvar diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);</span><br><span class=\"line\">\t\tvar diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span><br><span class=\"line\">\t\tdocument.getElementById(<span class=\"string\">&quot;sitetime&quot;</span>).innerHTML=<span class=\"string\">&quot; 已运行&quot;</span>+/*diffYears+<span class=\"string\">&quot; 年 &quot;</span>+*/diffDays+<span class=\"string\">&quot; 天 &quot;</span>+diffHours+<span class=\"string\">&quot; 小时 &quot;</span>+diffMinutes+<span class=\"string\">&quot; 分钟 &quot;</span>+diffSeconds+<span class=\"string\">&quot; 秒&quot;</span>;</span><br><span class=\"line\">\t&#125;/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span><br><span class=\"line\">\tsiteTime();</span><br><span class=\"line\">&lt;/script&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.footer.powered %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;powered-by&quot;</span>&gt;</span><br><span class=\"line\">    &#123;%- <span class=\"built_in\">set</span> next_site = <span class=\"string\">&#x27;https://theme-next.org&#x27;</span> %&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.scheme !== <span class=\"string\">&#x27;Gemini&#x27;</span> %&#125;</span><br><span class=\"line\">      &#123;%- <span class=\"built_in\">set</span> next_site = <span class=\"string\">&#x27;https://&#x27;</span> + theme.scheme | lower + <span class=\"string\">&#x27;.theme-next.org&#x27;</span> %&#125;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;footer.powered&#x27;</span>, next_url(<span class=\"string\">&#x27;https://hexo.io&#x27;</span>, <span class=\"string\">&#x27;Hexo&#x27;</span>, &#123;class: <span class=\"string\">&#x27;theme-link&#x27;</span>&#125;) + <span class=\"string\">&#x27; &amp; &#x27;</span> + next_url(next_site, <span class=\"string\">&#x27;NexT.&#x27;</span> + theme.scheme, &#123;class: <span class=\"string\">&#x27;theme-link&#x27;</span>&#125;)) &#125;&#125;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;https://beian.miit.gov.cn/&quot;</span>&gt;京ICP备2022022850号-1&lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.add_this_id %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;addthis_inline_share_toolbox&quot;</span>&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=&#123;&#123; theme.add_this_id &#125;&#125;&quot;</span> async=<span class=\"string\">&quot;async&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- next_inject(<span class=\"string\">&#x27;footer&#x27;</span>) &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改浏览器标签页title\"><a href=\"#修改浏览器标签页title\" class=\"headerlink\" title=\"修改浏览器标签页title\"></a>修改浏览器标签页title</h2><p><code>更改themes\\next\\layout\\page.swig</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% block title %&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"built_in\">set</span> page_title_suffix = <span class=\"string\">&#x27; | &#x27;</span> + title %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">if</span> page.type === <span class=\"string\">&#x27;categories&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.category&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">elif</span> page.type === <span class=\"string\">&#x27;tags&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.tag&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">elif</span> page.type === <span class=\"string\">&#x27;schedule&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.schedule&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">    &#123;&#123;- page.name + page_title_suffix &#125;&#125;<span class=\"comment\">#有title更改为name</span></span><br><span class=\"line\">  &#123;%- endif %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>在对应菜单的index.md文件中修改title为name</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">name: 分类</span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo主题美化","url":"/2022/10/28/Hexo/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/","content":"<h1 id=\"文件和文件夹\"><a href=\"#文件和文件夹\" class=\"headerlink\" title=\"文件和文件夹\"></a>文件和文件夹</h1><p><code>编写文章所在目录</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\hexoblog\\docblog\\<span class=\"built_in\">source</span>\\_posts</span><br><span class=\"line\">当前目录下是存放笔记和笔记中所带的图片信息，笔记编辑使用Typora，</span><br><span class=\"line\">图片使用相对位置存放在同级目录并且和笔记名字一致的文件夹中[需要安装插件，在搭建hexo的笔记中有体现]</span><br></pre></td></tr></table></figure>\n\n<p><code>创建不同的文件夹</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">当笔记过多的时候，可以在\\_posts下面创建不同的文件夹来存放不同的笔记</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\hexoblog\\docblog\\<span class=\"built_in\">source</span>\\_posts\\java  </span><br><span class=\"line\">                            ├── java   <span class=\"comment\">#创建存放笔记的文件夹</span></span><br><span class=\"line\">                                ├── JavaClassLoader   <span class=\"comment\">#存放笔记引用的图片</span></span><br><span class=\"line\">                                ├── JavaClassLoader.md   <span class=\"comment\">#笔记</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更改侧边栏背景颜色\"><a href=\"#更改侧边栏背景颜色\" class=\"headerlink\" title=\"更改侧边栏背景颜色\"></a>更改侧边栏背景颜色</h1><p><code>更改配置文件themes\\next\\source\\css\\_common\\outline\\sidebar\\sidebar.styl</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background: <span class=\"variable\">$black</span>-deep; <span class=\"comment\">#背景颜色</span></span><br><span class=\"line\">  bottom: 0;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!hexo-config(<span class=\"string\">&#x27;back2top.sidebar&#x27;</span>))&#123;</span><br><span class=\"line\">    box-shadow: inset 0 2px 6px black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  +tablet-<span class=\"function\"><span class=\"title\">mobile</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hexo-config(<span class=\"string\">&#x27;sidebar.onmobile&#x27;</span>)) &#123;</span><br><span class=\"line\">      display: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"修改底部用户图标为跳动的心\"><a href=\"#修改底部用户图标为跳动的心\" class=\"headerlink\" title=\"修改底部用户图标为跳动的心\"></a>修改底部用户图标为跳动的心</h1><p>在主题的<code>_config.yml</code>中修改如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#网站的页脚设置部分</span></span><br><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class=\"line\">  <span class=\"attr\">since:</span> <span class=\"number\">2021</span> <span class=\"comment\">#网站的建站时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Icon between year and copyright info.</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"comment\">#这里的icon是页脚建站时间和网站名字之间的图标，默认是 `user`图标</span></span><br><span class=\"line\">    <span class=\"comment\"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-heart</span>  <span class=\"comment\">#图标名称</span></span><br><span class=\"line\">    <span class=\"comment\"># If you want to animate the icon, set it to true.</span></span><br><span class=\"line\">    <span class=\"attr\">animated:</span> <span class=\"literal\">true</span> <span class=\"comment\">#是否是动画，默认</span></span><br><span class=\"line\">    <span class=\"comment\"># Change the color of icon, using Hex Code.</span></span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"string\">&quot;#ff0000&quot;</span> <span class=\"comment\">#图标颜色</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改底部信息居中\"><a href=\"#修改底部信息居中\" class=\"headerlink\" title=\"修改底部信息居中\"></a>修改底部信息居中</h1><p>修改文件<code>D:\\hexoblog\\docblog\\themes\\next\\source\\css\\_schemes\\Mist\\_layout.styl</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Tags</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">hr</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">2px;</span></span><br><span class=\"line\">  <span class=\"attr\">margin:</span> <span class=\"string\">20px</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Components</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">padding:</span> <span class=\"number\">0</span> <span class=\"string\">10px;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.headband</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">display:</span> <span class=\"string\">none;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Page</span> <span class=\"bullet\">-</span> <span class=\"string\">Container</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">.main-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">padding-bottom:</span> <span class=\"string\">80px;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">+mobile()</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"string\">auto;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">padding-top:</span> <span class=\"string\">80px;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">+mobile()</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">padding-top:</span> <span class=\"string\">60px;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Pagination</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">.pagination</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">margin:</span> <span class=\"string\">120px</span> <span class=\"number\">0</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">  <span class=\"attr\">text-align:</span> <span class=\"string\">left;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">+mobile()</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">margin:</span> <span class=\"string\">80px</span> <span class=\"string\">10px</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"attr\">text-align:</span> <span class=\"string\">center;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">Footer</span></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">--------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">background:</span> <span class=\"string\">var(--content-bg-color);</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">var(--text-color);</span></span><br><span class=\"line\">  <span class=\"attr\">padding:</span> <span class=\"string\">10px</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">.footer-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">text-align:</span> <span class=\"string\">center;</span>  <span class=\"comment\">#left改为center</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">+mobile()</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">text-align:</span> <span class=\"string\">center;</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"string\">auto;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>未完待续。。。</p>\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Next主题升级","url":"/2024/07/14/Hexo/Next%E5%8D%87%E7%BA%A7/","content":"<h1 id=\"备份旧版本\"><a href=\"#备份旧版本\" class=\"headerlink\" title=\"备份旧版本\"></a>备份旧版本</h1><p>将hexo的themes文件夹中的next更改为next-old，然后从github官方下载最新版本的next主题。由于升级变动较大，导致部分配置已经过时或者无用。</p>\n<p>只能一点一点比对和更新并测试。</p>\n<h1 id=\"首页文章标题居中\"><a href=\"#首页文章标题居中\" class=\"headerlink\" title=\"首页文章标题居中\"></a>首页文章标题居中</h1><p>由于Next中的Mist主题首页文章的标题默认是左对齐的。添加配置后才可以是居中。</p>\n<p>添加配置到<code>D:\\hexo\\themes\\next\\source\\css\\_schemes\\Mist\\_menu.styl</code>中，重新启动就可以让首页文章的标题居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.posts-expand</span> <span class=\"selector-class\">.post-title</span>, <span class=\"selector-class\">.posts-expand</span> <span class=\"selector-class\">.post-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"内联代码文字背景\"><a href=\"#内联代码文字背景\" class=\"headerlink\" title=\"内联代码文字背景\"></a>内联代码文字背景</h1><p><code>内联代码</code>文字和背景设置</p>\n<p>添加配置到<code>D:\\hexo\\themes\\next\\source\\css\\main.styl</code>中，重新启动后新增配置就生效了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">code</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Customize inline code styles here */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f4f4f4</span>; <span class=\"comment\">/* Background color */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#08182b</span>; <span class=\"comment\">/* Text color */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">8px</span>; <span class=\"comment\">/* Padding around the code */</span></span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>; <span class=\"comment\">/* Border radius for rounded corners */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字体和背景颜色取自<a href=\"https://www.webdesignrankings.com/resources/lolcolors/\">取色器</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"首页文章简介居中\"><a href=\"#首页文章简介居中\" class=\"headerlink\" title=\"首页文章简介居中\"></a>首页文章简介居中</h1><p>更改<code>D:\\hexo\\themes\\next\\source\\css\\_schemes\\Mist\\_posts-expand.styl</code>中的配置，重新启动就可以让章简介的居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Post Expand</span><br><span class=\"line\">// --------------------------------------------------</span><br><span class=\"line\"><span class=\"selector-class\">.posts-expand</span> &#123;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.index</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">text-align</span>: $scheme-text-align;</span><br><span class=\"line\"></span><br><span class=\"line\">      +mobile() &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.post-meta-container</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.post-meta</span> &#123;</span><br><span class=\"line\">//由<span class=\"attribute\">flex</span>-start更改为center</span><br><span class=\"line\">      <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\"></span><br><span class=\"line\">      +mobile() &#123;</span><br><span class=\"line\">        <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.post-eof</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.post-block</span><span class=\"selector-pseudo\">:not</span>(<span class=\"selector-pseudo\">:first</span>-of-type) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.post-header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.post-tags</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--content-bg-color);</span><br><span class=\"line\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1px</span> <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--menu-item-bg-color);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.post-nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2px</span> solid <span class=\"built_in\">var</span>(--btn-default-border-color);</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-property</span>: border;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-bottom-color</span>: <span class=\"built_in\">var</span>(--btn-default-hover-border-color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Next启用Fancybox","url":"/2024/07/08/Hexo/next%E4%B8%BB%E9%A2%98%E5%90%AF%E7%94%A8fancybox/","content":"<h1 id=\"FancyBox\"><a href=\"#FancyBox\" class=\"headerlink\" title=\"FancyBox\"></a>FancyBox</h1><p><a href=\"https://fancyapps.com/fancybox/\">FancyBox文档 </a></p>\n<p>FancyBox 是基于 JQuery 开发的类 Lightbox 插件，可以将图片放大查看，同时支持对放大的图片添加阴影效果，并对于一组相关的图片添加导航操作按纽</p>\n<h1 id=\"Next启用FancyBox\"><a href=\"#Next启用FancyBox\" class=\"headerlink\" title=\"Next启用FancyBox\"></a>Next启用FancyBox</h1><p>在 <code>theme/next/</code> 文件夹下找到 Next 7.0+ 主题的 <code>_config.yml</code> 配置文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://fancyapps.com/fancybox</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"FancyBox隐藏图片标题\"><a href=\"#FancyBox隐藏图片标题\" class=\"headerlink\" title=\"FancyBox隐藏图片标题\"></a>FancyBox隐藏图片标题</h1><p>启用后fancybox，hexo文章中的图片可以点击放大查看，但是文章中的图片下面会有md文件中引用图片的名字(默认是[]中的名字)</p>\n<img src=\"/2024/07/08/Hexo/next%E4%B8%BB%E9%A2%98%E5%90%AF%E7%94%A8fancybox/image-20240708214502891.png\" class title=\"image-20240708214502891\">\n\n<p>文章中的显示如下图</p>\n<img src=\"/2024/07/08/Hexo/next%E4%B8%BB%E9%A2%98%E5%90%AF%E7%94%A8fancybox/image-20240708214608291.png\" class title=\"image-20240708214608291\">\n\n<p>隐藏方式</p>\n<p>更改<code>D:\\hexo\\themes\\next\\source\\js\\utils.js</code>中的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原值\t  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imageTitle = $image.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;title&#x27;</span>) || $image.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;alt&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">//更改后的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imageTitle =  $image.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;alt&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>更改后文章中的显示</p>\n<img src=\"/2024/07/08/Hexo/next%E4%B8%BB%E9%A2%98%E5%90%AF%E7%94%A8fancybox/image-20240708214927642.png\" class title=\"image-20240708214927642\">\n\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Dubbo","url":"/2024/06/24/Dubbo/Dubbo/","content":"<h1 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h1>","categories":["Dubbo"],"tags":["Dubbo"]},{"title":"JMM详解","url":"/2022/09/21/JUC/JMM/","content":"<h1 id=\"JMM模型\"><a href=\"#JMM模型\" class=\"headerlink\" title=\"JMM模型\"></a>JMM模型</h1><p>Java内存模型(Java Memory Model简称JMM)是一种抽象的概念，并不是真正的存在，它描述的是一组规则或规范。通过这组规范定义了程序中各个变量(包括实例字段，静态字段和构成数组对象的元素)的访问方式。JVM运行程序的实体是线程，而每个线程创建时，JVM都会为其创建一个工作内存(栈空间)，用于存储线程私有的数据，而Java内存模型中规定所有变量都存储在主内存中，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作(读取赋值等)必须在工作内存中进行。</p>\n<p>进行过程为，首先要将变量从主内存拷贝到自己的工作内存中，然后对变量进行操作，操作完成后再将变量写回到主内存，不能直接操作主内存中的变量，工作内存中存储这主内存变量的副本。</p>\n<p>工作内存是每个线程的私有数据区域，所以不同的线程无法访问对方的工作内存，线程的通信(传值)必须通过主内存来完成。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数据同步八大原子操作\"><a href=\"#数据同步八大原子操作\" class=\"headerlink\" title=\"数据同步八大原子操作\"></a>数据同步八大原子操作</h2><p>主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成。</p>\n<blockquote>\n<p><code>lock(锁定)</code>：作用于主内存的变量，把一个变量标记为一条线程独占状态</p>\n<p><code>unlock(解锁)</code>：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</p>\n<p><code>read(读取)</code>：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</p>\n<p><code>load(载入)</code>：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</p>\n<p><code>use(使用)</code>：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</p>\n<p><code>assign(赋值)</code>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量</p>\n<p><code>store(存储)</code>：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</p>\n<p><code>write(写入)</code>：作用于工作内存的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中</p>\n</blockquote>\n<p>如果要把一个变量从主内存中复制到工作内存中，就需要按顺序地执行read和load操作，如果把变量从工作内存中同步到主内存中，就需要按顺序地执行store和write操作。但Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。</p>\n<img src=\"/2022/09/21/JUC/JMM/image-20220920195717398.png\" class title=\"image-20220920195717398\">\n\n<h2 id=\"同步规则分析\"><a href=\"#同步规则分析\" class=\"headerlink\" title=\"同步规则分析\"></a><strong>同步规则分析</strong></h2><ul>\n<li><p>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</p>\n</li>\n<li><p>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或者assign）的变量。即就是对一个变量实施use和store操作之前，必须先自行assign和load操作。</p>\n</li>\n<li><p>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现。</p>\n</li>\n<li><p>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量之前需要重新执行load或assign操作初始化变量的值。</p>\n</li>\n<li><p>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</p>\n</li>\n<li><p>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</p>\n</li>\n</ul>\n<h2 id=\"JMM不同于JVM内存\"><a href=\"#JMM不同于JVM内存\" class=\"headerlink\" title=\"JMM不同于JVM内存\"></a><strong>JMM不同于JVM内存</strong></h2><p>JMM与JVM内存区域的划分是不同的概念层次，JMM描述的是一组规则，通过这组规则来控制程序中各个变量在共享数据区域和私有数据区域的访问方式，JMM是围绕<code>原子性</code>、<code>有序性</code>、<code>可见性</code>展开的。JMM与JVM内存区域唯一的相似点，就是都存在共享数据区和私有数据区。在JMM中主内存数据为共享数据区域，工作内存数据为私有数据区域。</p>\n<h1 id=\"并发编程的问题\"><a href=\"#并发编程的问题\" class=\"headerlink\" title=\"并发编程的问题\"></a>并发编程的问题</h1><h2 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h2><p>原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。</p>\n<h2 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h2><p>可见性指的是当一个线程修改了某个共享变量的值，其他线程是否能够马上得知这个修改的值。</p>\n<h2 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h2><p>有序性是指对于单线程的执行代码，我们总是认为代码的执行是按顺序依次执行的，但对于多线程环境，则可能出现乱序现象，因为程序编译成机器码指令后可能会出现<code>指令重排</code>现象，重排后的指令与原指令的顺序未必一致。</p>\n<h1 id=\"JMM如何解决并发编程的问题\"><a href=\"#JMM如何解决并发编程的问题\" class=\"headerlink\" title=\"JMM如何解决并发编程的问题\"></a>JMM如何解决并发编程的问题</h1><h2 id=\"原子性问题\"><a href=\"#原子性问题\" class=\"headerlink\" title=\"原子性问题\"></a>原子性问题</h2><p>除了JVM自身提供的对基本数据类型读写操作的原子性外，可以通过 <code>synchronized</code>和<code>Lock</code>实现原子性。因为synchronized和Lock能够保证任一时刻只有一个线程访问该代码块。</p>\n<h2 id=\"可见性问题\"><a href=\"#可见性问题\" class=\"headerlink\" title=\"可见性问题\"></a>可见性问题</h2><p><code>volatile</code>关键字保证可见性。当一个共享变量被<code>volatile</code>修饰时，它会保证修改的值立即被其他的线程看到，即修改的值立即更新到主存中，当其他线程需要读取时，它会去内存中读取新值。</p>\n<p><code>synchronized</code>和<code>Lock</code>也可以保证可见性，因为它们可以保证任一时刻只有一个线程能访问共享资源，并在其释放锁之前将修改的变量刷新到内存中。</p>\n<h2 id=\"有序性问题\"><a href=\"#有序性问题\" class=\"headerlink\" title=\"有序性问题\"></a>有序性问题</h2><p><strong>Java内存模型</strong>：每个线程都有自己的工作内存，线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p>\n<p><strong>指令重排序</strong>：java语言规范规定JVM线程内部维持顺序化语义。即只要程序的最终结果与它顺序化情况的结果相等，那么指令的执行顺序可以与代码顺序不一致，此过程叫<code>指令的重排序</code>。JVM能根据处理器特性（CPU多级缓存系统、多核处理器等）适当的对机器指令进行重排序，使机器指令能更符合CPU的执行特性，最大限度的发挥机器性能。</p>\n<img src=\"/2022/09/21/JUC/JMM/image-20220920202303569.png\" class title=\"image-20220920202303569\">\n\n<h2 id=\"as-if-serial语义\"><a href=\"#as-if-serial语义\" class=\"headerlink\" title=\"as-if-serial语义\"></a>as-if-serial语义</h2><p>不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。</p>\n<p><code>编译器</code>、<code>runtime</code>和<code>处理器</code>都必须遵守as-if-serial语义。</p>\n<p>为了遵守<code>as-if-serial语义</code>，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p>\n<h2 id=\"happens-before-原则\"><a href=\"#happens-before-原则\" class=\"headerlink\" title=\"happens-before 原则\"></a>happens-before 原则</h2><p>从JDK 5开始，Java使用新的<code>JSR-133内存模型</code>，提供了<code>happens-before </code>原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是<code>否存在竞争</code>、<code>线程是否安全</code>的依据，happens-before 原则内容如下</p>\n<ol>\n<li>程序顺序原则，即在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。</li>\n<li>锁规则 解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。</li>\n<li>volatile规则 volatile变量的写，先发生于读，这保证了volatile变量的可见性，简单的理解就是，volatile变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。</li>\n<li>线程启动规则 线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的start方法之前修改了共享变量的值，那么当线程B执行start方法时，线程A对共享变量的修改对线程B可见</li>\n<li>传递性 A先于B ，B先于C 那么A必然先于C</li>\n<li>线程终止规则 线程的所有操作先于线程的终结，Thread.join()方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。</li>\n<li>线程中断规则 对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。</li>\n<li>对象终结规则对象的构造函数执行，结束先于finalize()方法</li>\n</ol>\n<h1 id=\"volatile内存语义\"><a href=\"#volatile内存语义\" class=\"headerlink\" title=\"volatile内存语义\"></a>volatile内存语义</h1><p>volatile是Java虚拟机提供的轻量级的同步机制。volatile关键字有如下作用</p>\n<ul>\n<li>volatile的可见性<ul>\n<li>保证被volatile修饰的共享变量对所有线程总数可见的，也就是当一个线程修改了一个被volatile修饰共享变量的值，新值总是可以被其他线程立即得知。</li>\n</ul>\n</li>\n<li>volatile禁止指令重排优化<ul>\n<li>禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象。</li>\n</ul>\n</li>\n<li>volatile无法保证原子性</li>\n</ul>\n<blockquote>\n<p>如何实现禁止指令重排优化的。先了解一个概念，内存屏障(Memory Barrier）</p>\n</blockquote>\n<p><strong>硬件层的内存屏障</strong></p>\n<p>Intel硬件提供了一系列的内存屏障，主要有： </p>\n<ol>\n<li><p>lfence，是一种Load Barrier 读屏障 </p>\n</li>\n<li><p>sfence, 是一种Store Barrier 写屏障 </p>\n</li>\n<li><p>mfence, 是一种全能型的屏障，具备ifence和sfence的能力 </p>\n</li>\n<li><p>Lock前缀，Lock不是一种内存屏障，但是它能完成类似内存屏障的功能。Lock会对CPU总线和高速缓存加锁，可以理解为CPU指令级的一种锁。它后面可以跟ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG等指令。</p>\n</li>\n</ol>\n<p>不同硬件实现内存屏障的方式不同，Java内存模型屏蔽了这种底层硬件平台的差异，由JVM来为不同的平台生成相应的机器码。 JVM中提供了四类内存屏障指令：</p>\n<table>\n<thead>\n<tr>\n<th>屏障类型</th>\n<th>指令示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LoadLoad</td>\n<td>Load1; LoadLoad; Load2</td>\n<td>保证load1的读取操作在load2及后续读取操作之前执行</td>\n</tr>\n<tr>\n<td>StoreStore</td>\n<td>Store1; StoreStore; Store2</td>\n<td>在store2及其后的写操作执行前，保证store1的写操作已刷新到主内存</td>\n</tr>\n<tr>\n<td>LoadStore</td>\n<td>Load1; LoadStore; Store2</td>\n<td>在stroe2及其后的写操作执行前，保证load1的读操作已读取结束</td>\n</tr>\n<tr>\n<td>StoreLoad</td>\n<td>Store1; StoreLoad; Load2</td>\n<td>保证store1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td>\n</tr>\n</tbody></table>\n<p>内存屏障，又称内存栅栏，是一个CPU指令，它的作用有两个，</p>\n<ul>\n<li><p>保证特定操作的执行顺序，</p>\n</li>\n<li><p>保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）</p>\n</li>\n</ul>\n<p>由于<code>编译器</code>和<code>处理器</code>都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。</p>\n<p><code>Memory Barrier</code>的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。总之，volatile变量正是通过内存屏障实现其在内存中的语义，即可见性和禁止重排优化。</p>\n","categories":["JUC"],"tags":["JUC"]},{"title":"LockSupport详解","url":"/2022/09/21/JUC/LockSupport/","content":"<h1 id=\"LockSupport简介\"><a href=\"#LockSupport简介\" class=\"headerlink\" title=\"LockSupport简介\"></a>LockSupport简介</h1><p><code>LockSupport</code>是用来创建锁和其他同步类的基本线程阻塞原语。简而言之，当调用<code>LockSupport.park</code>时，表示当前线程将会等待，直至获得许可证，当调用<code>LockSupport.unpark</code>时，必须把等待获得许可证的线程作为参数进行传递，才能让此线程继续运行。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"属性与方法\"><a href=\"#属性与方法\" class=\"headerlink\" title=\"属性与方法\"></a>属性与方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LockSupport</span><span class=\"params\">()</span> &#123;&#125; <span class=\"comment\">// Cannot be instantiated.</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过 Unsafe 设置线程的 parkBlocker 属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBlocker</span><span class=\"params\">(Thread t, Object arg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 唤醒指定的线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：如果指定线程处于阻塞状态可以被唤醒，否则当其下次调用 park 时不会被阻塞，指定线程必须是 start状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unpark</span><span class=\"params\">(Thread thread)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程，指定blocker</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">(Object blocker)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        setBlocker(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程，指定blocker，设置超时时间</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"type\">long</span> nanos)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">            setBlocker(t, blocker);</span><br><span class=\"line\">            UNSAFE.park(<span class=\"literal\">false</span>, nanos);</span><br><span class=\"line\">            setBlocker(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程，指定blocker，指定 deadline 的时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"type\">long</span> deadline)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">true</span>, deadline);</span><br><span class=\"line\">        setBlocker(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过 Unsafe 获取线程的 parkBlocker 属性值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getBlocker</span><span class=\"params\">(Thread t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程，设置超时时间</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkNanos</span><span class=\"params\">(<span class=\"type\">long</span> nanos)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            UNSAFE.park(<span class=\"literal\">false</span>, nanos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暂停当前线程，指定 deadline 的时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkUntil</span><span class=\"params\">(<span class=\"type\">long</span> deadline)</span> &#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">true</span>, deadline);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class=\"line\"><span class=\"comment\">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">nextSecondarySeed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">13</span>;   <span class=\"comment\">// xorshift</span></span><br><span class=\"line\">            r ^= r &gt;&gt;&gt; <span class=\"number\">17</span>;</span><br><span class=\"line\">            r ^= r &lt;&lt; <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            r = <span class=\"number\">1</span>; <span class=\"comment\">// avoid zero</span></span><br><span class=\"line\">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hotspot implementation via intrinsics API</span></span><br><span class=\"line\">    <span class=\"comment\">// Unsafe实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"comment\">//Thread parkBlocker字段内存偏移地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> parkBlockerOffset;</span><br><span class=\"line\">    <span class=\"comment\">//Thread threadLocalRandomSeed字段的内存偏移地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> SEED;</span><br><span class=\"line\">    <span class=\"comment\">//Thread threadLocalRandomProbe字段的内存偏移地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> PROBE;</span><br><span class=\"line\">    <span class=\"comment\">//Thread threadLocalRandomSecondarySeed字段的内存偏移地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> SECONDARY;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取Unsafe实例</span></span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            <span class=\"comment\">//获取Thread对应字段的内存偏移地址</span></span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;parkBlocker&quot;</span>));</span><br><span class=\"line\">            SEED = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class=\"line\">            PROBE = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class=\"line\">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">private LockSupport() &#123;&#125; // Cannot be instantiated. 构造器私有化，LockSupport不允许实例化</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h2><p><code>LockSupport</code>的核心方法都是基于<code>Unsafe</code>类中定义的<code>park</code>和<code>unpark</code>方法实现的</p>\n<p>Unsafe中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unpark</span><span class=\"params\">(Object var1)</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">(<span class=\"type\">boolean</span> var1, <span class=\"type\">long</span> var2)</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"park方法\"><a href=\"#park方法\" class=\"headerlink\" title=\"park方法\"></a>park方法</h3><p><code>LockSupport中park方法</code>有两个重载版本，区别在于park()方法有没有blocker，即有没有设置线程的parkBlocker属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">(Object blocker)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    setBlocker(t, blocker);<span class=\"comment\">//设置当前线程的parkBlocker属性</span></span><br><span class=\"line\">    UNSAFE.park(<span class=\"literal\">false</span>, <span class=\"number\">0L</span>);<span class=\"comment\">//阻塞当前线程</span></span><br><span class=\"line\">    setBlocker(t, <span class=\"literal\">null</span>);<span class=\"comment\">//调用unpark后，将当前线程的parkBlocker属性置空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么要在此park方法中要调用两次setBlocker方法?</strong> </p>\n<p>调用park方法后，当前线程会设置线程的<code>parkBlocker属性</code>，然后再调用<code>Unsafe的park方法</code>，然后，当前线程就已经阻塞了，等待该线程的<code>unpark方法</code>被调用，所以后面<code>第二个setBlocker方法</code>无法运行，等待<code>unpark方法</code>被调用，该线程获得许可后，就可以继续运行，然后运行<code>第二个setBlocker方法</code>，把该线程的<code>parkBlocker属性</code>设置为null。<strong>如果没有第二个setBlocker，那么之后没有调用park(Object blocker)，而直接调用getBlocker方法，得到的还是前一个park(Object blocker)设置的blocker，显然是不符合逻辑的</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    UNSAFE.park(<span class=\"literal\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 调用了park方法后，会阻塞当前线程，除非许可证可用。当前线程会获取许可证条件：</p>\n<ul>\n<li>其他某个线程将当前线程作为目标调用 unpark。</li>\n<li>其他某个线程中断当前线程。</li>\n<li>该调用不合逻辑地(即毫无理由地)返回。</li>\n</ul>\n<h3 id=\"unpark方法\"><a href=\"#unpark方法\" class=\"headerlink\" title=\"unpark方法\"></a>unpark方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unpark</span><span class=\"params\">(Thread thread)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span>) <span class=\"comment\">// 线程为不空</span></span><br><span class=\"line\">        UNSAFE.unpark(thread); <span class=\"comment\">// 释放该线程许可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表示如果给定线程的许可证尚不可用，则使其可用。如果线程在 park 上受阻塞，则它将解除其阻塞状态。否则，保证下一次调用 park 不会受阻塞。<strong>如果给定线程尚未启动，则无法保证此操作有任何效果</strong>。</p>\n<h3 id=\"parkNanos方法\"><a href=\"#parkNanos方法\" class=\"headerlink\" title=\"parkNanos方法\"></a>parkNanos方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkNanos</span><span class=\"params\">(Object blocker, <span class=\"type\">long</span> nanos)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 时间大于0</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前线程</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">// 设置Blocker</span></span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        <span class=\"comment\">// 获取许可证，并设置了时间，时间到了如果未收到唤醒信号也会返回继续执行</span></span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">false</span>, nanos);</span><br><span class=\"line\">        <span class=\"comment\">// 设置许可证</span></span><br><span class=\"line\">        setBlocker(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表示在许可可用前禁用当前线程，并最多等待指定的等待时间</p>\n<h3 id=\"parkUntil方法\"><a href=\"#parkUntil方法\" class=\"headerlink\" title=\"parkUntil方法\"></a>parkUntil方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parkUntil</span><span class=\"params\">(Object blocker, <span class=\"type\">long</span> deadline)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程</span></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">// 设置Blocker</span></span><br><span class=\"line\">    setBlocker(t, blocker);</span><br><span class=\"line\">    <span class=\"comment\">//如果time &lt;= 0则直接返回,如果time &gt; 0,则会挂起当前线程，但是在时间到了如果未收到唤醒信号也会返回继续执行</span></span><br><span class=\"line\">    UNSAFE.park(<span class=\"literal\">true</span>, deadline);</span><br><span class=\"line\">    <span class=\"comment\">// 设置Blocker为null</span></span><br><span class=\"line\">    setBlocker(t, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表示在指定的时限前禁用当前线程，除非许可证可用</p>\n","categories":["JUC"],"tags":["JUC"]},{"title":"JVM内存模型","url":"/2022/09/21/JVM/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/","content":"<h1 id=\"JVM整体结构及内存模型\"><a href=\"#JVM整体结构及内存模型\" class=\"headerlink\" title=\"JVM整体结构及内存模型\"></a>JVM整体结构及内存模型</h1><img src=\"/2022/09/21/JVM/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20220921211433082.png\" class title=\"image-20220921211433082\">\n\n<span id=\"more\"></span>\n\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>JVM中的堆是用来存放对象的内存空间，几乎所有的Java对象、数组都存储在JVM的堆内存中。</p>\n<p>JVM规范规定堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n<h2 id=\"堆内存\"><a href=\"#堆内存\" class=\"headerlink\" title=\"堆内存\"></a>堆内存</h2><p>堆内存逻辑角度：堆&#x3D;新生代+老年代+永久代或者元空间。</p>\n<p>堆内存物理角度：由新生代 ( Young )和老年代 ( Old )组成。</p>\n<h2 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h2><p> 新生代( Young )包括：Eden、From Survivor(From幸存区)和To Survivor(To幸存区)组成。</p>\n<p>新生代与老年代的默认比例： 1:2</p>\n<p>新生代区的默认比例是：8:1:1</p>\n<p>说明：在 HotSpot 中，Eden 空间和另外两个 SurvIvor 空间缺省所占的比例是 8:1:1</p>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p>方法区，也称非堆（Non-Heap），是一个被线程共享的内存区域。其中主要存储加载的类字节码、class&#x2F;method&#x2F;field 等元数据对象、static-final 常量、static 变量、JIT 编译器编译后的代码等数据。另外，方法区包含了一个特殊的区域 “运行时常量池”</p>\n<h2 id=\"方法区存放的数据\"><a href=\"#方法区存放的数据\" class=\"headerlink\" title=\"方法区存放的数据\"></a>方法区存放的数据</h2><ul>\n<li><strong>类全限定名</strong>：全限定名为 package 路径与类名称组合起来的路径；</li>\n<li><strong>类的直接超类的全限定名</strong>：父类或超类的全限定名；</li>\n<li><strong>类是类类型还是接口类型</strong>：判定当前类是 Class 还是接口 Interface；</li>\n<li><strong>类的访问修饰符</strong>：判断修饰符，如 pulic，private 等；</li>\n<li><strong>类的常量池</strong>：这部分会在下文进行讲解；</li>\n<li><strong>字段信息</strong>：类中字段的信息；</li>\n<li><strong>方法信息</strong>：类中方法的信息；</li>\n<li><strong>静态变量</strong>：类中的静态变量信息；</li>\n<li><strong>一个到类 ClassLoader 的引用</strong>：对 ClassLoader 的引用，这个引用指向对内存；</li>\n<li><strong>一个到 Class 类的引用</strong>：对对象实例的引用，这个引用指向对内存。</li>\n</ul>\n<h2 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h2><p>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</p>\n<p>例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。</p>\n<ul>\n<li><strong>节省内存空间</strong>：常量池中所有相同的字符串常量被合并，只占用一个空间。</li>\n<li><strong>节省运行时间</strong>：比较字符串时，<code>==</code> 比 <code>equals ()</code> 快。对于两个引用变量，只用 <code>==</code> 判断引用是否相等，也就可以判断实际值是否相等。</li>\n</ul>\n<h2 id=\"方法区内存变更\"><a href=\"#方法区内存变更\" class=\"headerlink\" title=\"方法区内存变更\"></a>方法区内存变更</h2><p>方法区的实现，虚拟机规范中并未明确规定，目前有 2 种比较主流的实现方式：</p>\n<p><strong>HotSpot 虚拟机 1.8之前</strong>：在 JDK1.6 及之前版本，HotSpot 使用 “永久代（permanent generation）” 的概念作为实现，即将 GC 分代收集扩展至方法区。这种实现比较偷懒，可以不必为方法区编写专门的内存管理，但带来的后果是容易碰到内存溢出的问题（因为永久代有 - XX:MaxPermSize 的上限）。</p>\n<p>在 JDK1.7，HotSpot 逐渐改变方法区的实现方式，如 1.7 版本移除了方法区中的字符串常量池，但为发生本质的变化。</p>\n<p><strong>HotSpot 虚拟机 1.8之后</strong>：1.8 版本中移除了方法区并使用 metaspace（元数据空间）作为替代实现。metaspace 占用系统内存，也就是说，只要不碰触到系统内存上限，方法区会有足够的内存空间。但这不意味着我们不对方法区进行限制，如果方法区无限膨胀，最终会导致系统崩溃。</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用（相当于一个个栈帧的入栈和出栈的操作）。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>Java虚拟机栈是线程私有的，生命周期和线程一致。</p>\n<p>Java虚拟机栈主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p>\n<p>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。</p>\n<p>JVM直接对Java栈的操作只有两个：每个方法执行，伴随着进栈（入栈、压栈）；执行结束后的出栈操作。</p>\n<p>栈不存在垃圾回收问题，存在内存溢出问题。</p>\n<h2 id=\"存储信息\"><a href=\"#存储信息\" class=\"headerlink\" title=\"存储信息\"></a>存储信息</h2><p>每个栈帧中存储着    </p>\n<p>局部变量表（Local Variables）</p>\n<p>操作数栈（Operand Stack）（或表达式栈）</p>\n<p>动态链接（dynamic Linking）（或指向运行时常量池的方法引用）</p>\n<p>方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）</p>\n<p>一些附加信息。</p>\n<h1 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h1><p>JVM就是通过读取程序计数器的值来决定下一条需要执行的字节码指令，进而进行选择语句、循环、异常处理等；</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>线程私有</li>\n<li>JVM规范中唯一没有规定OutOfMemoryError情况的区域</li>\n<li>如果正在执行的是Native 方法，则这个计数器值为空</li>\n</ul>\n","categories":["JVM"],"tags":["JVM"]},{"title":"Unsafe","url":"/2022/09/27/JUC/Unsafe/","content":"<h1 id=\"Unsafe介绍\"><a href=\"#Unsafe介绍\" class=\"headerlink\" title=\"Unsafe介绍\"></a>Unsafe介绍</h1><p>Unsafe类是一个位于<code>sun.misc</code>包下的类，它提供了一些相对底层方法，能够让我们接触到一些更接近操作系统底层的资源，如系统的内存资源、cpu指令、直接使用偏移地址操作对象、数组等等。但是在使用这些方法提供的便利的同时，也存在一些潜在的安全因素，例如对内存的错误操作可能会引起内存泄漏，严重时甚至可能引起jvm崩溃。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p>\n<h1 id=\"获取Unsafe对象\"><a href=\"#获取Unsafe对象\" class=\"headerlink\" title=\"获取Unsafe对象\"></a>获取Unsafe对象</h1><h2 id=\"直接通过new获取对象\"><a href=\"#直接通过new获取对象\" class=\"headerlink\" title=\"直接通过new获取对象\"></a>直接通过new获取对象</h2><p>直接使用new来获取对象会编译不通过，因为Unsafe的无参构造方法是<code>private</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tUnsafe unsafe= <span class=\"keyword\">new</span> <span class=\"title class_\">Unsafe</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">会有如下提示</span></span><br><span class=\"line\"><span class=\"comment\">&#x27;Unsafe()&#x27; has private access in &#x27;sun.misc.Unsafe&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"通过静态方法获取对象\"><a href=\"#通过静态方法获取对象\" class=\"headerlink\" title=\"通过静态方法获取对象\"></a>通过静态方法获取对象</h2><p>通过静态方法<code>Unsafe.getUnsafe()</code>获取对象时也会报错，因为当且仅当调用<code>getUnsafe</code>方法的类为引导类加载器所加载时才合法，否则抛出<code>SecurityException</code>异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> Unsafe.getUnsafe();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">执行main方法会有如下报错</span></span><br><span class=\"line\"><span class=\"comment\">Exception in thread &quot;main&quot; java.lang.SecurityException: Unsafe</span></span><br><span class=\"line\"><span class=\"comment\">\tat sun.misc.Unsafe.getUnsafe(Unsafe.java:90)</span></span><br><span class=\"line\"><span class=\"comment\">\tat com.yg.edu.util.UnsafeInstance.main(UnsafeInstance.java:41)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为Unsafe类为一单例实现，在<code>getUnsafe</code>方法中，会对调用者的<code>classLoader</code>进行检查，判断当前类是否由<code>Bootstrap classLoader</code>加载，如果不是的话那么就会抛出一个<code>SecurityException</code>异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Unsafe</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerNatives</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        registerNatives();</span><br><span class=\"line\">        sun.reflect.Reflection.registerMethodsToFilter(Unsafe.class, <span class=\"string\">&quot;getUnsafe&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Unsafe</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Unsafe</span> <span class=\"variable\">theUnsafe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Unsafe</span>();</span><br><span class=\"line\">    <span class=\"meta\">@CallerSensitive</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unsafe <span class=\"title function_\">getUnsafe</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">        <span class=\"comment\">//判断当前类是否由引导类加载器加载</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecurityException</span>(<span class=\"string\">&quot;Unsafe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> theUnsafe;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过追加引导类加载器加载的路径获取对象\"><a href=\"#通过追加引导类加载器加载的路径获取对象\" class=\"headerlink\" title=\"通过追加引导类加载器加载的路径获取对象\"></a>通过追加引导类加载器加载的路径获取对象</h2><p>Java 命令行提供了如何扩展BootStrap 级别class的简单方法</p>\n<ul>\n<li><code>-Xbootclasspath</code>: 完全取代基本核心的Java class 搜索路径。不常用，否则要重新写所有Java 核心class</li>\n<li><code>-Xbootclasspath/a</code>: 后缀在核心class搜索路径后面。常用</li>\n<li><code>-Xbootclasspath/p</code>: 前缀在核心class搜索路径前面。不常用，避免</li>\n</ul>\n<p>所以通过将当前类所在jar包添加到引导类加载器加载的路径中来跳过校验的方式来获取对象</p>\n<p>使用Java命令行命令<code>-Xbootclasspath/a</code>把调用Unsafe相关方法的类UnsafeUtil所在jar包路径追加到默认的bootstrap路径中，使得UnsafeUtil被引导类加载器加载，从而通过<code>Unsafe.getUnsafe</code>方法安全的获取Unsafe实例。</p>\n<h2 id=\"通过反射获取单例对象\"><a href=\"#通过反射获取单例对象\" class=\"headerlink\" title=\"通过反射获取单例对象\"></a>通过反射获取单例对象</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unsafe <span class=\"title function_\">reflectGetUnsafe</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取指定属性的信息</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> Unsafe.class.getDeclaredField(<span class=\"string\">&quot;theUnsafe&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//访问私有属性</span></span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//以为theUnsafe是static,所以使用field.get()来获取属性值时间,可传入任何对象都是可以的,包括null</span></span><br><span class=\"line\">        <span class=\"comment\">//字段不是静态字段的话,要传入反射类的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Unsafe) field.get(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Unsafe功能介绍\"><a href=\"#Unsafe功能介绍\" class=\"headerlink\" title=\"Unsafe功能介绍\"></a>Unsafe功能介绍</h1><img src=\"/2022/09/27/JUC/Unsafe/image-20220927200540366.png\" class title=\"image-20220927200540366\">\n\n<p>如图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类。</p>\n<h2 id=\"CAS操作\"><a href=\"#CAS操作\" class=\"headerlink\" title=\"CAS操作\"></a>CAS操作</h2><p>在<code>juc</code>包的并发工具类中大量地使用了CAS操作，在Unsafe类中，提供了<code>compareAndSwapObject</code>、<code>compareAndSwapInt</code>、<code>compareAndSwapLong</code>方法来实现的对<code>Object</code>、<code>int</code>、<code>long</code>类型的CAS操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t*  CAS</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> o         包含要修改field的对象</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> offset    对象中某field的偏移量</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> expected  期望值</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> update    更新值</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span>          true | false</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapObject</span><span class=\"params\">(Object o, <span class=\"type\">long</span> offset,  Object expected, Object update)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapInt</span><span class=\"params\">(Object o, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> expected,<span class=\"type\">int</span> update)</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapLong</span><span class=\"params\">(Object o, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> expected, <span class=\"type\">long</span> update)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>CAS即比较并替换，实现并发算法时常用到的一种技术。CAS操作包含三个操作数——内存位置、预期原值及新值。执行CAS操作的时候，将内存位置的值与预期原值比较，如果相匹配，那么处理器会自动将该位置值更新为新值，否则，处理器不做任何操作。我们都知道，CAS是一条CPU的原子指令（cmpxchg指令），不会造成所谓的数据不一致问题，Unsafe提供的CAS方法（如compareAndSwapXXX）底层实现即为CPU指令cmpxchg。</p>\n<h2 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h2><p>这部分，包括线程挂起、恢复、锁机制等方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取消阻塞线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unpark</span><span class=\"params\">(Object thread)</span>;</span><br><span class=\"line\"><span class=\"comment\">//阻塞线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">park</span><span class=\"params\">(<span class=\"type\">boolean</span> isAbsolute, <span class=\"type\">long</span> time)</span>;</span><br><span class=\"line\"><span class=\"comment\">//获得对象锁（可重入锁）</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">monitorEnter</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\"><span class=\"comment\">//释放对象锁</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">monitorExit</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\"><span class=\"comment\">//尝试获取对象锁</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryMonitorEnter</span><span class=\"params\">(Object o)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上源码说明中，方法park、unpark即可实现线程的挂起与恢复，将一个线程进行挂起是通过park方法实现的，调用park方法后，线程将一直阻塞直到超时或者中断等条件出现；unpark可以终止一个挂起的线程，使其恢复正常。</p>\n<p>Java锁和同步器框架的核心类<code>AbstractQueuedSynchronizer</code>，就是通过调用<code>LockSupport.park()</code>和<code>LockSupport.unpark()</code>实现线程的阻塞和唤醒的，而<code>LockSupport</code>的<code>park</code>、<code>unpark</code>方法实际是调用<code>Unsafe</code>的<code>park</code>、<code>unpark</code>方式来实现。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html\">Java魔法类：Unsafe应用解析 - 美团技术团队 (meituan.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/trunks2008/p/14720811.html\">Java双刃剑之Unsafe类详解 - 码农参上 - 博客园 (cnblogs.com)</a></p>\n","categories":["JUC"],"tags":["JUC"]},{"title":"Linux","url":"/2022/08/14/Linux/Linux/","content":"<h1 id=\"Linux基础\"><a href=\"#Linux基础\" class=\"headerlink\" title=\"Linux基础\"></a>Linux基础</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>是Binary的缩写，这个目录存放着最经常使用的命令</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>就是Super User的意思，放的是系统管理员使用的系统管理程序</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>该目录为系统管理员</td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</td>\n</tr>\n<tr>\n<td>&#x2F;lost+found</td>\n<td>这个目录一般情况下是空的，当系统非法关机后，当前文件夹会出现一些文件</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>所有的系统管理所需要的配置文件和子目录</td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>用户自己安装的应用程序和文件都放在这个目录下，类似于windows下的program files目录</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;bin</td>\n<td>系统用户使用的应用程序</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;sbin</td>\n<td>超级用户使用的比较高级的管理程序和系统守护程</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;src</td>\n<td>内核源代码默认的放置目录</td>\n</tr>\n<tr>\n<td>&#x2F;run</td>\n<td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</td>\n</tr>\n<tr>\n<td>&#x2F;proc</td>\n<td>这个目录是一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息<span id=\"more\"></span></td>\n</tr>\n<tr>\n<td>&#x2F;srv</td>\n<td>service缩写，该目录存放一些服务启动之后需要提取的数据。</td>\n</tr>\n<tr>\n<td>&#x2F;sys</td>\n<td>这是Linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</td>\n</tr>\n<tr>\n<td>&#x2F;tmp</td>\n<td>这个目录是用来存放一些临时文件的,Linux会自动清理当前目录内的内容[tmpwatch这个定时任务]</td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>类似于windows的设备管理器，把所有的硬件用文件的形式存储。</td>\n</tr>\n<tr>\n<td>&#x2F;media</td>\n<td>Linux系统会自动识别一些设备，例如U盘、光驱等等<br>当识别后Linux会把识别的设备挂载到这个目录下<br>CentOS7迁移到&#x2F;run&#x2F;media</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>临时挂载文件系统，可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里的内容了</td>\n</tr>\n<tr>\n<td>&#x2F;opt</td>\n<td>这是给主机额外安装软件所摆放的目录，默认是空的。</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td>\n</tr>\n</tbody></table>\n<!--more-->\n\n<h2 id=\"VI-x2F-VIM-编辑器\"><a href=\"#VI-x2F-VIM-编辑器\" class=\"headerlink\" title=\"VI&#x2F;VIM 编辑器\"></a><strong>VI&#x2F;VIM</strong> 编辑器</h2><p><strong>注: <a href=\"https://www.runoob.com/linux/linux-vim.html\">图文并茂请看菜鸟教程</a></strong></p>\n<blockquote>\n<p>VI 是 Unix 操作系统和类 Unix 操作系统中最通用的文本编辑器。<br>VIM 编辑器是从 VI 发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>VIM 与 VI 编辑器完全兼容。</p>\n</blockquote>\n<h3 id=\"常用语法之移动光标\"><a href=\"#常用语法之移动光标\" class=\"headerlink\" title=\"常用语法之移动光标\"></a><code>常用语法之移动光标</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">h 或 向左箭头键(←)</td>\n<td align=\"left\">光标向左移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">j 或 向下箭头键(↓)</td>\n<td align=\"left\">光标向下移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">k 或 向上箭头键(↑)</td>\n<td align=\"left\">光标向上移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">l 或 向右箭头键(→)</td>\n<td align=\"left\">光标向右移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [f]</td>\n<td align=\"left\">屏幕『向下』移动一页，相当于 [Page Down]按键</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [b]</td>\n<td align=\"left\">屏幕『向上』移动一页，相当于 [Page Up] 按键</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [d]</td>\n<td align=\"left\">屏幕『向下』移动半页</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之搜索替换\"><a href=\"#常用语法之搜索替换\" class=\"headerlink\" title=\"常用语法之搜索替换\"></a><code>常用语法之搜索替换</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x2F;word</td>\n<td align=\"left\">向光标之下寻找一个名称为 word 的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">?word</td>\n<td align=\"left\">向光标之上寻找一个字符串名称为 word 的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;word去向下搜寻 word这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是执行 ?word的话，那么按下 n 则会向上继续搜寻名称为 word的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">N</td>\n<td align=\"left\">这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;word后，按下 N 则表示『向上』搜寻 word</td>\n</tr>\n<tr>\n<td align=\"left\">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td align=\"left\">n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』</td>\n</tr>\n<tr>\n<td align=\"left\">:1,$s&#x2F;word1&#x2F;word2&#x2F;g或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td align=\"left\">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之复制粘贴\"><a href=\"#常用语法之复制粘贴\" class=\"headerlink\" title=\"常用语法之复制粘贴\"></a><code>常用语法之复制粘贴</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">x, X</td>\n<td align=\"left\">在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>\n</tr>\n<tr>\n<td align=\"left\">nx</td>\n<td align=\"left\">n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>\n</tr>\n<tr>\n<td align=\"left\">dd</td>\n<td align=\"left\">剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td>\n</tr>\n<tr>\n<td align=\"left\">ndd</td>\n<td align=\"left\">n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td>\n</tr>\n<tr>\n<td align=\"left\">d1G</td>\n<td align=\"left\">删除光标所在到第一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">dG</td>\n<td align=\"left\">删除光标所在到最后一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">d$</td>\n<td align=\"left\">删除游标所在处，到该行的最后一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">d0</td>\n<td align=\"left\">那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">yy</td>\n<td align=\"left\">复制游标所在的那一行(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">nyy</td>\n<td align=\"left\">n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行</td>\n</tr>\n<tr>\n<td align=\"left\">y1G</td>\n<td align=\"left\">复制游标所在行到第一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">yG</td>\n<td align=\"left\">复制游标所在行到最后一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">y0</td>\n<td align=\"left\">复制光标所在的那个字符到该行行首的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">y$</td>\n<td align=\"left\">复制光标所在的那个字符到该行行尾的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">p, P</td>\n<td align=\"left\">p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行</td>\n</tr>\n<tr>\n<td align=\"left\">J</td>\n<td align=\"left\">将光标所在行与下一行的数据结合成同一行</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">复原前一个动作。(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl]+r</td>\n<td align=\"left\">重做上一个动作。(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之模式切换\"><a href=\"#常用语法之模式切换\" class=\"headerlink\" title=\"常用语法之模式切换\"></a><code>常用语法之模式切换</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">i, I</td>\n<td align=\"left\">进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』</td>\n</tr>\n<tr>\n<td align=\"left\">a, A</td>\n<td align=\"left\">进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』</td>\n</tr>\n<tr>\n<td align=\"left\">o, O</td>\n<td align=\"left\">进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">r, R</td>\n<td align=\"left\">进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止</td>\n</tr>\n<tr>\n<td align=\"left\">[Esc]</td>\n<td align=\"left\">退出编辑模式，回到一般模式中</td>\n</tr>\n<tr>\n<td align=\"left\">:w</td>\n<td align=\"left\">将编辑的数据写入硬盘档案中(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">:w!</td>\n<td align=\"left\">若文件属性为『只读』时，强制写入该档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:q</td>\n<td align=\"left\">离开 vi</td>\n</tr>\n<tr>\n<td align=\"left\">:q!</td>\n<td align=\"left\">若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:wq</td>\n<td align=\"left\">储存后离开，若为 :wq! 则为强制储存后离开</td>\n</tr>\n<tr>\n<td align=\"left\">ZZ</td>\n<td align=\"left\">这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>\n</tr>\n<tr>\n<td align=\"left\">ZQ</td>\n<td align=\"left\">不保存，强制退出。效果等同于 **:q!**。</td>\n</tr>\n<tr>\n<td align=\"left\">:w [filename]</td>\n<td align=\"left\">将编辑的数据储存成另一个档案（类似另存新档）</td>\n</tr>\n<tr>\n<td align=\"left\">:r [filename]</td>\n<td align=\"left\">在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>\n</tr>\n<tr>\n<td align=\"left\">:n1,n2 w [filename]</td>\n<td align=\"left\">将 n1 到 n2 的内容储存成 filename 这个档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:! command</td>\n<td align=\"left\">暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux-中的服务管理\"><a href=\"#Linux-中的服务管理\" class=\"headerlink\" title=\"Linux 中的服务管理\"></a>Linux 中的服务管理</h2><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）</p>\n<p>启动之后一只存在、常驻内存的进程，一般被称作“服务”（service）</p>\n<h3 id=\"systemctl常用命令\"><a href=\"#systemctl常用命令\" class=\"headerlink\" title=\"systemctl常用命令\"></a><code>systemctl常用命令</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">systemctl start service_name</td>\n<td align=\"left\">启动某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl status service_name</td>\n<td align=\"left\">查看某个服务当前状态</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl restart service_name</td>\n<td align=\"left\">重启某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl stop service_name</td>\n<td align=\"left\">停止某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl daemon-reload</td>\n<td align=\"left\">重新加载配置文件</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl disable service_name</td>\n<td align=\"left\">关掉指定服务的自动启动</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl enable service_name</td>\n<td align=\"left\">开启指定服务的自动启动</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files</td>\n<td align=\"left\">查看服务开机启动状态</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files –type&#x3D;service</td>\n<td align=\"left\">列出所有服务（包括启用的和禁用的）</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files –type&#x3D;mount</td>\n<td align=\"left\">所有系统挂载点</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl is-enabled service_name</td>\n<td align=\"left\">检查指定服务是否启用</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl kill service_name</td>\n<td align=\"left\">杀死服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl show service_name</td>\n<td align=\"left\">检查指定服务的所有配置细节</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl get-default</td>\n<td align=\"left\">查看当前运行级别</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl set-default TARGET.target</td>\n<td align=\"left\">修改当前运行级别[TARGET 取 multi-user 或者 graphical]</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl show -p CPUShares httpd.service</td>\n<td align=\"left\">获取当前服务的CPU分配额（如httpd）</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl set-property httpd.service CPUShares&#x3D;2000</td>\n<td align=\"left\">将（httpd.service）的CPU分配份额限制为2000 CPUShares<br>（新增文件&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;httpd.service.d&#x2F;90-CPUShares.conf ）</td>\n</tr>\n</tbody></table>\n<p>查看服务的方法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -al /usr/lib/systemd/system</span><br></pre></td></tr></table></figure>\n\n<p>注：</p>\n<p><strong>Linux系统有7种运行级别(runlevel):常用的是级别3和5</strong></p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p>\n<p>运行级别1：单用户工作状态，oot权限，用于系统维护，禁止远程登陆</p>\n<p>运行级别2：多用户状态（没有NFS),不支持网络</p>\n<p>运行级别3：完全的多用户状态（有NFS),登陆后进入控制台命令行模式</p>\n<p>运行级别4：系统未使用，保留</p>\n<p>运行级别5：X11控制台，登陆后进入图形GU模式</p>\n<p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p><strong>CentOS7</strong> <strong>的运行级别简化为</strong><strong>:</strong> </p>\n<p>multi-user.target 等价于原运行级别 3（多用户有网，无图形界面） </p>\n<p>graphical.target 等价于原运行级别 5（多用户有网，有图形界面）</p>\n<h2 id=\"常用基本命令\"><a href=\"#常用基本命令\" class=\"headerlink\" title=\"常用基本命令\"></a>常用基本命令</h2><h3 id=\"常用命令之文件目录\"><a href=\"#常用命令之文件目录\" class=\"headerlink\" title=\"常用命令之文件目录\"></a><code>常用命令之文件目录</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pwd</td>\n<td align=\"left\">显示当前工作目录的绝对路径</td>\n</tr>\n<tr>\n<td align=\"left\">ls -al</td>\n<td align=\"left\">列出当前目录全部文件，包括[.开头的文件]<br>每行列出的信息依次是：<br> 文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字</td>\n</tr>\n<tr>\n<td align=\"left\">cd 绝对路径</td>\n<td align=\"left\">切换路径</td>\n</tr>\n<tr>\n<td align=\"left\">cd 相对路径</td>\n<td align=\"left\">切换路径</td>\n</tr>\n<tr>\n<td align=\"left\">cd ~或者 cd</td>\n<td align=\"left\">回到自己的家目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd -</td>\n<td align=\"left\">回到上一次所在目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd ..</td>\n<td align=\"left\">回到当前目录的上一级目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd -P</td>\n<td align=\"left\">跳转到实际物理路径，而非快捷方式路径</td>\n</tr>\n<tr>\n<td align=\"left\">mkdir -p xxx</td>\n<td align=\"left\">创建多层目录</td>\n</tr>\n<tr>\n<td align=\"left\">rmdir xxx</td>\n<td align=\"left\">删除一个空的文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">touch 文件名称</td>\n<td align=\"left\">创建空文件</td>\n</tr>\n<tr>\n<td align=\"left\">cp  source dest</td>\n<td align=\"left\">source[源文件] dest[目标文件]  复制文件</td>\n</tr>\n<tr>\n<td align=\"left\">cp  -r source dest</td>\n<td align=\"left\">递归复制整个文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">rm -r xxx</td>\n<td align=\"left\">递归删除目录中所有内容</td>\n</tr>\n<tr>\n<td align=\"left\">rm -f xxx</td>\n<td align=\"left\">强制执行删除操作，而不提示用于进行确认</td>\n</tr>\n<tr>\n<td align=\"left\">rm  -v xxx</td>\n<td align=\"left\">显示指令的详细执行过程</td>\n</tr>\n<tr>\n<td align=\"left\">mv oldNameFile newNameFile</td>\n<td align=\"left\">重命名</td>\n</tr>\n<tr>\n<td align=\"left\">mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder</td>\n<td align=\"left\">移动文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用命令之文件查看\"><a href=\"#常用命令之文件查看\" class=\"headerlink\" title=\"常用命令之文件查看\"></a><code>常用命令之文件查看</code></h3><h4 id=\"more-文件内容分屏查看器\"><a href=\"#more-文件内容分屏查看器\" class=\"headerlink\" title=\"more 文件内容分屏查看器\"></a><strong>more 文件内容分屏查看器</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">more 要查看的文件</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">Enter</td>\n<td align=\"left\">代表向下翻『一行』</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">代表立刻离开 more ，不再显示该文件内容</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+F</td>\n<td align=\"left\">向下滚动一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+B</td>\n<td align=\"left\">返回上一屏</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">:f</td>\n<td align=\"left\">输出文件名和当前行的行号</td>\n</tr>\n</tbody></table>\n<h4 id=\"less分屏显示文件内容\"><a href=\"#less分屏显示文件内容\" class=\"headerlink\" title=\"less分屏显示文件内容\"></a><strong>less分屏显示文件内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">less 要查看的文件</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pagedown]</td>\n<td align=\"left\">向下翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pageup]</td>\n<td align=\"left\">向上翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;字串</td>\n<td align=\"left\">向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>\n</tr>\n<tr>\n<td align=\"left\">?字串</td>\n<td align=\"left\">向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">离开 less 这个程序；</td>\n</tr>\n</tbody></table>\n<h4 id=\"head显示文件头部内容\"><a href=\"#head显示文件头部内容\" class=\"headerlink\" title=\"head显示文件头部内容\"></a><strong>head显示文件头部内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">head</span> 文件</span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 5 文件 <span class=\"comment\"># 指定显示头部内容的行数,可以是任意行数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"tail输出文件尾部内容\"><a href=\"#tail输出文件尾部内容\" class=\"headerlink\" title=\"tail输出文件尾部内容\"></a><strong>tail输出文件尾部内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> 文件</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -n 5 文件 <span class=\"comment\">#查看文件尾部5行内容,5可以是任意行数</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f 文件  <span class=\"comment\">#实时追踪该文档的所有更新</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gt-输出重定向和-gt-gt-追加\"><a href=\"#gt-输出重定向和-gt-gt-追加\" class=\"headerlink\" title=\"&gt;输出重定向和&gt;&gt;追加\"></a><strong>&gt;输出重定向和&gt;&gt;追加</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ls -al &gt; a.txt</td>\n<td align=\"left\">列表的内容写入文件 a.txt 中（<strong>覆盖写</strong>）</td>\n</tr>\n<tr>\n<td align=\"left\">ls -al &gt;&gt; aa.txt</td>\n<td align=\"left\">列表的内容<strong>追加</strong>到文件 aa.txt 的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">cat 文件 1 &gt; 文件 2</td>\n<td align=\"left\">将文件 1 的内容覆盖到文件 2</td>\n</tr>\n<tr>\n<td align=\"left\">echo “内容” &gt;&gt; 文件</td>\n<td align=\"left\">内容<strong>追加</strong>到文件的末尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"ln软链接\"><a href=\"#ln软链接\" class=\"headerlink\" title=\"ln软链接\"></a><strong>ln软链接</strong></h4><p><code>软链接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块.</code> </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s [原文件或目录] [软链接名] <span class=\"comment\">#给原文件创建一个软链接</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf 软链接名 <span class=\"comment\">#删除软链接(注意不要在软链接最后写/)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令之用户管理\"><a href=\"#常用命令之用户管理\" class=\"headerlink\" title=\"常用命令之用户管理\"></a><code>常用命令之用户管理</code></h3>","categories":["Linux"],"tags":["Linux"]},{"title":"JVM对象创建和内存分配","url":"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/","content":"<h1 id=\"JVM对象创建\"><a href=\"#JVM对象创建\" class=\"headerlink\" title=\"JVM对象创建\"></a>JVM对象创建</h1><p>对象创建的主要流程如下:</p>\n<img src=\"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/image-20220920205650037.png\" class title=\"image-20220920205650037\">\n\n<h2 id=\"类加载检查\"><a href=\"#类加载检查\" class=\"headerlink\" title=\"类加载检查\"></a>类加载检查</h2><p> 虚拟机遇到一条<code>new</code>指令时，首先将去检查这个指令的参数是否能在<code>常量池中</code>定位到一个类的符号引用，并且检查这个符号引用代表的类是否<code>已被加载</code>、<code>解析</code>和<code>初始化过</code>。如果没有，那必须先执行相应的类加载过程。</p>\n<blockquote>\n<p>注：new指令对应到语言层面上讲是，new关键词、对象克隆、对象序列化等。</p>\n</blockquote>\n<h2 id=\"分配内存\"><a href=\"#分配内存\" class=\"headerlink\" title=\"分配内存\"></a>分配内存</h2><p> 在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类 加载完成后便可完全确定，为对象分配空间的任务等同于把 一块确定大小的内存从Java堆中划分出来。</p>\n<p>在分配内存时，会遇到下面的两个问题</p>\n<ul>\n<li><p>如何划分内存</p>\n</li>\n<li><p>在并发情况下， 可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"划分内存的方法\"><a href=\"#划分内存的方法\" class=\"headerlink\" title=\"划分内存的方法\"></a>划分内存的方法</h3><ul>\n<li>“指针碰撞”（Bump the Pointer）(默认用指针碰撞)</li>\n</ul>\n<p>如果Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离。</p>\n<ul>\n<li>“空闲列表”（Free List）</li>\n</ul>\n<p>如果Java堆中的内存并不是规整的，已使用的内存和空 闲的内存相互交错，那就没有办法简单地进行指针碰撞，虚拟机就必须维护一个列表，记 录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例， 并更新列表上的记录</p>\n<h3 id=\"解决并发问题的方法\"><a href=\"#解决并发问题的方法\" class=\"headerlink\" title=\"解决并发问题的方法\"></a>解决并发问题的方法</h3><ul>\n<li>CAS（compare and swap）</li>\n</ul>\n<p>虚拟机采用<strong>CAS加失败重试</strong>的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理。</p>\n<ul>\n<li>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</li>\n</ul>\n<p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存。</p>\n<p>通过<code>-XX:+/-UseTLAB</code>参数来设定虚拟机是否使用TLAB(<code>JVM会默认开启-XX:+UseTLAB</code>)，<code>-XX:TLABSize</code> 指定TLAB大小。</p>\n<h2 id=\"初始化零值\"><a href=\"#初始化零值\" class=\"headerlink\" title=\"初始化零值\"></a>初始化零值</h2><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）， 如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>\n<h2 id=\"设置对象头\"><a href=\"#设置对象头\" class=\"headerlink\" title=\"设置对象头\"></a>设置对象头</h2><p>初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。</p>\n<p>在<code>HotSpot</code>虚拟机中，对象在内存中存储的布局可以分为3块区域</p>\n<ul>\n<li><p>对象头（Header）</p>\n</li>\n<li><p>实例数据（Instance Data）</p>\n</li>\n<li><p>对齐填充（Padding）</p>\n</li>\n</ul>\n<p> HotSpot虚拟机的对象头包括两部分信息，</p>\n<ul>\n<li>存储对象自身的运行时数据<ul>\n<li>如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。</li>\n</ul>\n</li>\n<li>类型指针，即对象指向它的类元数据的指针<ul>\n<li>虚拟机通过这个指针来确定这个对象是哪个类的实例。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"32位对象头\"><a href=\"#32位对象头\" class=\"headerlink\" title=\"32位对象头\"></a>32位对象头</h4><img src=\"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/image-20220920212831890.png\" class title=\"image-20220920212831890\">\n\n<h4 id=\"64位对象头\"><a href=\"#64位对象头\" class=\"headerlink\" title=\"64位对象头\"></a>64位对象头</h4><img src=\"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/image-20220920212150121.png\" class title=\"image-20220920212150121\">\n\n<hr>\n<p>对象在Suvivor中每熬过一次MinorGC，年龄就增加1，当它的年龄增加到一定程度后就会被晋升到老年代中，这个次数默认是15岁，是因为在Mark Word中可以发现标记对象分代年龄的分配的空间是4bit，而4bit能表示的最大数就是2^4-1 &#x3D; 15。</p>\n<hr>\n<h2 id=\"执行方法\"><a href=\"#执行方法\" class=\"headerlink\" title=\"执行方法\"></a>执行方法</h2><p> 执行方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为属性赋值（注意，这与上面的赋零值不同，这是由程序员赋的值），和执行构造方法。</p>\n<hr>\n<p>什么是java对象的<strong>指针压缩</strong>？</p>\n<p>1.jdk1.6 update14开始，在64bit操作系统中，JVM支持指针压缩</p>\n<p>2.jvm配置参数:UseCompressedOops，compressed–压缩、oop(ordinary object pointer)–对象指针</p>\n<p>3.启用指针压缩:-XX:+UseCompressedOops(<strong>默认开启</strong>)，禁止指针压缩:-XX:-UseCompressedOops</p>\n<p>为什么要进行指针压缩？</p>\n<p>1.在64位平台的HotSpot中使用32位指针(实际存储用64位)，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据，<strong>占用较大宽带，同时GC也会承受较大压力</strong></p>\n<p>2.为了减少64位平台下内存的消耗，启用指针压缩功能</p>\n<p>3.在jvm中，32位地址最大支持4G内存(2的32次方)，可以通过对对象指针的存入<strong>堆内存</strong>时压缩编码、取出到<strong>cpu寄存器</strong>后解码方式进行优化(对象指针在堆中是32位，在寄存器中是35位，2的35次方&#x3D;32G)，使得jvm只用32位地址就可以支持更大的内存配置(小于等于32G)</p>\n<p>4.堆内存小于4G时，不需要启用指针压缩，jvm会直接去除高32位地址，即使用低虚拟地址空间</p>\n<p>5.堆内存大于32G时，压缩指针会失效，会强制使用64位(即8字节)来对java对象寻址，这就会出现1的问题，所以堆内存不要大于32G为好</p>\n<p><code>指针压缩验证</code></p>\n<p>引入依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.9&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JOLTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ClassLayout</span> <span class=\"variable\">layout</span> <span class=\"operator\">=</span> ClassLayout.parseInstance(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\">        System.out.println(layout.toPrintable());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"type\">ClassLayout</span> <span class=\"variable\">layout1</span> <span class=\"operator\">=</span> ClassLayout.parseInstance(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;&#125;);</span><br><span class=\"line\">        System.out.println(layout1.toPrintable());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"type\">ClassLayout</span> <span class=\"variable\">layout2</span> <span class=\"operator\">=</span> ClassLayout.parseInstance(<span class=\"keyword\">new</span> <span class=\"title class_\">A</span>());</span><br><span class=\"line\">        System.out.println(layout2.toPrintable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// -XX:+UseCompressedOops           默认开启的压缩所有指针</span></span><br><span class=\"line\">    <span class=\"comment\">// -XX:+UseCompressedClassPointers  默认开启的压缩对象头里的类型指针Klass Pointer</span></span><br><span class=\"line\">    <span class=\"comment\">// Oops : Ordinary Object Pointers</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//8B mark word</span></span><br><span class=\"line\">                       <span class=\"comment\">//4B Klass Pointer   如果关闭压缩-XX:-UseCompressedClassPointers或-XX:-UseCompressedOops，则占用8B</span></span><br><span class=\"line\">        <span class=\"type\">int</span> id;        <span class=\"comment\">//4B</span></span><br><span class=\"line\">        String name;   <span class=\"comment\">//4B  如果关闭压缩-XX:-UseCompressedOops，则占用8B</span></span><br><span class=\"line\">        <span class=\"type\">byte</span> b;        <span class=\"comment\">//1B </span></span><br><span class=\"line\">        Object o;      <span class=\"comment\">//4B  如果关闭压缩-XX:-UseCompressedOops，则占用8B</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">java.lang.Object object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class=\"line\"><span class=\"comment\">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class=\"line\"><span class=\"comment\">      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span></span><br><span class=\"line\"><span class=\"comment\">     12     4        (loss due to the next object alignment)</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 16 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">[I object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class=\"line\"><span class=\"comment\">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class=\"line\"><span class=\"comment\">      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)</span></span><br><span class=\"line\"><span class=\"comment\">     12     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class=\"line\"><span class=\"comment\">     16     0    int [I.&lt;elements&gt;                             N/A</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 16 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">ren.fanq.jvm.code.JOLTest$A object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4                    (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span></span><br><span class=\"line\"><span class=\"comment\">      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span></span><br><span class=\"line\"><span class=\"comment\">      8     4                    (object header)                           66 cc 00 f8 (01100110 11001100 00000000 11111000) (-134165402)</span></span><br><span class=\"line\"><span class=\"comment\">     12     4                int A.id                                      0</span></span><br><span class=\"line\"><span class=\"comment\">     16     1               byte A.b                                       0</span></span><br><span class=\"line\"><span class=\"comment\">     17     3                    (alignment/padding gap)                  </span></span><br><span class=\"line\"><span class=\"comment\">     20     4   java.lang.String A.name                                    null</span></span><br><span class=\"line\"><span class=\"comment\">     24     4   java.lang.Object A.o                                       null</span></span><br><span class=\"line\"><span class=\"comment\">     28     4                    (loss due to the next object alignment)</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 32 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 3 bytes internal + 4 bytes external = 7 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Process finished with exit code 0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">--------------</span></span><br><span class=\"line\"><span class=\"comment\">关闭指针压缩后输出结果</span></span><br><span class=\"line\"><span class=\"comment\">java.lang.Object object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1) //mark word</span></span><br><span class=\"line\"><span class=\"comment\">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0) //mark word</span></span><br><span class=\"line\"><span class=\"comment\">      8     4        (object header)                           00 1c 11 ac (00000000 00011100 00010001 10101100) (-1408164864) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">     12     4        (object header)                           16 02 00 00 (00010110 00000010 00000000 00000000) (534) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 16 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">[I object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1) //mark word</span></span><br><span class=\"line\"><span class=\"comment\">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0) //mark word </span></span><br><span class=\"line\"><span class=\"comment\">      8     4        (object header)                           68 0b 11 ac (01101000 00001011 00010001 10101100) (-1408169112) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">     12     4        (object header)                           16 02 00 00 (00010110 00000010 00000000 00000000) (534) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">     16     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0) //数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     20     4        (alignment/padding gap)                    //对齐填充</span></span><br><span class=\"line\"><span class=\"comment\">     24     0    int [I.&lt;elements&gt;                             N/A //实例数据</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 24 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 4 bytes internal + 0 bytes external = 4 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">ren.fanq.jvm.code.JOLTest$A object internals:</span></span><br><span class=\"line\"><span class=\"comment\"> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE</span></span><br><span class=\"line\"><span class=\"comment\">      0     4                    (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1) //mark word</span></span><br><span class=\"line\"><span class=\"comment\">      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0) //mark word</span></span><br><span class=\"line\"><span class=\"comment\">      8     4                    (object header)                           f8 f5 7e ac (11111000 11110101 01111110 10101100) (-1400965640) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">     12     4                    (object header)                           16 02 00 00 (00010110 00000010 00000000 00000000) (534) //Klass Pointer</span></span><br><span class=\"line\"><span class=\"comment\">     16     4                int A.id                                      0 //实例数据</span></span><br><span class=\"line\"><span class=\"comment\">     20     1               byte A.b                                       0 //实例数据</span></span><br><span class=\"line\"><span class=\"comment\">     21     3                    (alignment/padding gap)                     //对齐填充</span></span><br><span class=\"line\"><span class=\"comment\">     24     8   java.lang.String A.name                                    null //实例数据</span></span><br><span class=\"line\"><span class=\"comment\">     32     8   java.lang.Object A.o                                       null //实例数据</span></span><br><span class=\"line\"><span class=\"comment\">Instance size: 40 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Space losses: 3 bytes internal + 0 bytes external = 3 bytes total</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Process finished with exit code 0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>关于对齐填充：</strong>对于大部分处理器，对象以8字节整数倍来对齐填充都是最高效的存取方式。</p>\n<hr>\n<h1 id=\"对象内存分配\"><a href=\"#对象内存分配\" class=\"headerlink\" title=\"对象内存分配\"></a>对象内存分配</h1><p>对象内存分配主要流程如下</p>\n<img src=\"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/image-20220920220253657.png\" class title=\"image-20220920220253657\">\n\n<h2 id=\"对象栈上分配\"><a href=\"#对象栈上分配\" class=\"headerlink\" title=\"对象栈上分配\"></a>对象栈上分配</h2><p><code>栈上分配依赖于逃逸分析和标量替换</code></p>\n<p>我们通过JVM内存分配可以知道JAVA中的对象都是在堆上进行分配，当对象没有被引用的时候，需要依靠GC进行回收内存，如果对象数量较多的时候，会给GC带来较大压力，也间接影响了应用的性能。</p>\n<p>为了减少临时对象在堆内分配的数量，JVM通过<strong>逃逸分析</strong>确定该对象不会被外部访问。如果不会逃逸可以将该对象在<strong>栈上分配</strong>内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。</p>\n<p><strong>对象逃逸分析</strong>：就是分析对象动态作用域，当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中。s</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">   user.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">   user.setName(<span class=\"string\">&quot;doubao&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//TODO 保存到数据库</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">   user.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">   user.setName(<span class=\"string\">&quot;doubao&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//TODO 保存到数据库</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很显然test1方法中的user对象被返回了，这个对象的作用域范围不确定，test2方法中的user对象我们可以确定当方法结束这个对象就可以认为是无效对象了，对于这样的对象我们其实可以将其分配在栈内存里，让其在方法结束时跟随栈内存一起被回收掉。</p>\n<p>JVM对于这种情况可以通过开启逃逸分析参数(-XX:+DoEscapeAnalysis)来优化对象内存分配位置，使其通过<strong>标量替换</strong>优先分配在栈上(<strong>栈上分配</strong>)，<strong>JDK7之后默认开启逃逸分析</strong>，如果要关闭使用参数(-XX:-DoEscapeAnalysis)</p>\n<p><strong>标量替换：</strong>通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，<strong>JVM不会创建该对象</strong>，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替，这些代替的成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。开启标量替换参数(-XX:+EliminateAllocations)，<strong>JDK7之后默认开启</strong>。</p>\n<p><strong>标量与聚合量：</strong>标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等），标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在JAVA中对象就是可以被进一步分解的聚合量。</p>\n<p>栈上分配代码验证示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ren.fanq.jvm.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ren.fanq.jvm.dao.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 栈上分配，标量替换</span></span><br><span class=\"line\"><span class=\"comment\"> * 代码调用了1亿次alloc()，如果是分配到堆上，大概需要1GB以上堆空间，如果堆空间小于该值，必然会触发GC。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 使用如下参数不会发生GC</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xmx15m -Xms15m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用如下参数都会发生大量GC</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xmx15m -Xms15m -XX:-DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations</span></span><br><span class=\"line\"><span class=\"comment\"> * -Xmx15m -Xms15m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:-EliminateAllocations</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AllotOnStack</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++) &#123;</span><br><span class=\"line\">            alloc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(end - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">alloc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;doubao&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象在Eden区分配\"><a href=\"#对象在Eden区分配\" class=\"headerlink\" title=\"对象在Eden区分配\"></a>对象在Eden区分配</h2><p>多数情况下，对象在新生代中 Eden 区分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p>\n<ul>\n<li><strong>Minor GC&#x2F;Young GC</strong>：指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。</li>\n<li><strong>Major GC&#x2F;Full GC</strong>：一般会回收老年代 ，年轻代，方法区的垃圾，Major GC的速度一般会比Minor GC的慢10倍以上。</li>\n</ul>\n<p><code>Eden与Survivor区默认8:1:1</code></p>\n<p>大量的对象被分配在eden区，eden区满了后会触发minor gc，可能会有99%以上的对象成为垃圾被回收掉，剩余存活的对象会被挪到为空的那块survivor区，下一次eden区满了后又会触发minor gc，把eden区和survivor区垃圾对象回收，把剩余存活的对象一次性挪动到另外一块为空的survivor区，因为新生代的对象都是朝生夕死的，存活时间很短，所以JVM默认的8:1:1的比例是很合适的，<strong>让eden区尽量的大，survivor区够用即可，</strong></p>\n<p>JVM默认有这个参数-XX:+UseAdaptiveSizePolicy(默认开启)，会导致这个8:1:1比例自动变化，如果不想这个比例有变化可以设置参数-XX:-UseAdaptiveSizePolicy</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加运行JVM参数： -XX:+PrintGCDetails -Xmx150m -Xms150m</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GCTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] allocation1, allocation2, allocation3, allocation4, allocation5, allocation6;</span><br><span class=\"line\">        allocation1 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">30000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"comment\">//        allocation2 = new byte[8000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation3 = new byte[8000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation4 = new byte[1000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation5 = new byte[1000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation6 = new byte[1000 * 1024];</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">Heap</span></span><br><span class=\"line\"><span class=\"comment\"> PSYoungGen      total 45056K, used 34670K [0x00000000fce00000, 0x0000000100000000, 0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\">  eden space 38912K, 89% used [0x00000000fce00000,0x00000000fefdb880,0x00000000ff400000)</span></span><br><span class=\"line\"><span class=\"comment\">  from space 6144K, 0% used [0x00000000ffa00000,0x00000000ffa00000,0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\">  to   space 6144K, 0% used [0x00000000ff400000,0x00000000ff400000,0x00000000ffa00000)</span></span><br><span class=\"line\"><span class=\"comment\"> ParOldGen       total 102400K, used 0K [0x00000000f6a00000, 0x00000000fce00000, 0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\">  object space 102400K, 0% used [0x00000000f6a00000,0x00000000f6a00000,0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\"> Metaspace       used 3376K, capacity 4496K, committed 4864K, reserved 1056768K</span></span><br><span class=\"line\"><span class=\"comment\">  class space    used 369K, capacity 388K, committed 512K, reserved 1048576K</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出eden区内存(89%)几乎已经被分配完全（即使程序什么也不做，新生代也会使用至少几M内存）。</p>\n<p>现在继续为allocation2分配内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加运行JVM参数： -XX:+PrintGCDetails -Xmx150m -Xms150m</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GCTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] allocation1, allocation2, allocation3, allocation4, allocation5, allocation6;</span><br><span class=\"line\">        allocation1 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">30000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"comment\">//        allocation2 = new byte[8000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation3 = new byte[8000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation4 = new byte[1000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation5 = new byte[1000 * 1024];</span></span><br><span class=\"line\"><span class=\"comment\">//        allocation6 = new byte[1000 * 1024];</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">[GC (Allocation Failure) [PSYoungGen: 33891K-&gt;1112K(45056K)] 33891K-&gt;31120K(147456K), 0.0114994 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] </span></span><br><span class=\"line\"><span class=\"comment\">Heap</span></span><br><span class=\"line\"><span class=\"comment\"> PSYoungGen      total 45056K, used 10252K [0x00000000fce00000, 0x0000000100000000, 0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\">  eden space 38912K, 23% used [0x00000000fce00000,0x00000000fd6ed3c8,0x00000000ff400000)</span></span><br><span class=\"line\"><span class=\"comment\">  from space 6144K, 18% used [0x00000000ff400000,0x00000000ff516010,0x00000000ffa00000)</span></span><br><span class=\"line\"><span class=\"comment\">  to   space 6144K, 0% used [0x00000000ffa00000,0x00000000ffa00000,0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\"> ParOldGen       total 102400K, used 30008K [0x00000000f6a00000, 0x00000000fce00000, 0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\">  object space 102400K, 29% used [0x00000000f6a00000,0x00000000f874e010,0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\"> Metaspace       used 3376K, capacity 4496K, committed 4864K, reserved 1056768K</span></span><br><span class=\"line\"><span class=\"comment\">  class space    used 369K, capacity 388K, committed 512K, reserved 1048576K</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么会出现这种情况：因为给allocation2分配内存的时候eden区内存几乎已经被分配完了，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC，GC期间虚拟机又发现allocation1无法存入Survior空间，所以只好把新生代的对象<strong>提前转移到老年代</strong>中去，老年代上的空间足够存放allocation1，所以不会出现Full GC。执行Minor GC后，后面分配的对象如果能够存在eden区的话，还是会在eden区分配内存。可以执行如下代码验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加运行JVM参数： -XX:+PrintGCDetails -Xmx150m -Xms150m</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GCTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] allocation1, allocation2, allocation3, allocation4, allocation5, allocation6;</span><br><span class=\"line\">        allocation1 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">30000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">        allocation2 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">8000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">        allocation3 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">8000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">        allocation4 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">        allocation5 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">        allocation6 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1000</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出结果</span></span><br><span class=\"line\"><span class=\"comment\">[GC (Allocation Failure) [PSYoungGen: 33891K-&gt;1240K(45056K)] 33891K-&gt;31248K(147456K), 0.0125402 secs] [Times: user=0.08 sys=0.02, real=0.01 secs] </span></span><br><span class=\"line\"><span class=\"comment\">Heap</span></span><br><span class=\"line\"><span class=\"comment\"> PSYoungGen      total 45056K, used 21381K [0x00000000fce00000, 0x0000000100000000, 0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\">  eden space 38912K, 51% used [0x00000000fce00000,0x00000000fe1ab3f0,0x00000000ff400000)</span></span><br><span class=\"line\"><span class=\"comment\">  from space 6144K, 20% used [0x00000000ff400000,0x00000000ff536010,0x00000000ffa00000)</span></span><br><span class=\"line\"><span class=\"comment\">  to   space 6144K, 0% used [0x00000000ffa00000,0x00000000ffa00000,0x0000000100000000)</span></span><br><span class=\"line\"><span class=\"comment\"> ParOldGen       total 102400K, used 30008K [0x00000000f6a00000, 0x00000000fce00000, 0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\">  object space 102400K, 29% used [0x00000000f6a00000,0x00000000f874e010,0x00000000fce00000)</span></span><br><span class=\"line\"><span class=\"comment\"> Metaspace       used 3376K, capacity 4496K, committed 4864K, reserved 1056768K</span></span><br><span class=\"line\"><span class=\"comment\">  class space    used 369K, capacity 388K, committed 512K, reserved 1048576K</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h2><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。JVM参数 <code>-XX:PretenureSizeThreshold </code>可以设置大对象的大小，如果对象超过设置大小会直接进入老年代，不会进入年轻代，<code>这个参数只在 Serial 和ParNew两个收集器下有效</code>。</p>\n<p>比如设置JVM参数：-XX:PretenureSizeThreshold&#x3D;1000000 (单位是字节)  -XX:+UseSerialGC  ，再执行下上面的第一个程序会发现大对象直接进了老年代</p>\n<p><strong>为什么要这样呢？</strong></p>\n<p>为了避免为大对象分配内存时的复制操作而降低效率。</p>\n<h2 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a><strong>长期存活的对象将进入老年代</strong></h2><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p>\n<p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为1。对象在 Survivor 中每熬过一次 MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，CMS收集器默认6岁，不同的垃圾收集器会略微有点不同），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <strong>-XX:MaxTenuringThreshold</strong> 来设置。</p>\n<h2 id=\"对象动态年龄判断\"><a href=\"#对象动态年龄判断\" class=\"headerlink\" title=\"对象动态年龄判断\"></a>对象动态年龄判断</h2><p>当前放对象的Survivor区域里(其中一块区域，放对象的那块s区)，一批对象的总大小大于这块Survivor区域内存大小的50%(-XX:TargetSurvivorRatio可以指定)，那么此时<strong>大于等于</strong>这批对象年龄最大值的对象，就可以直接进入老年代了，例如Survivor区域里现在有一批对象，年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n(含)以上的对象都放入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。<strong>对象动态年龄判断机制一般是在minor gc之后触发的。</strong></p>\n<h2 id=\"老年代空间分配担保机制\"><a href=\"#老年代空间分配担保机制\" class=\"headerlink\" title=\"老年代空间分配担保机制\"></a>老年代空间分配担保机制</h2><p>年轻代每次<strong>minor gc</strong>之前JVM都会计算下老年代<strong>剩余可用空间</strong></p>\n<p>如果这个可用空间小于年轻代里现有的所有对象大小之和(<strong>包括垃圾对象</strong>)</p>\n<p>就会看一个“-XX:-HandlePromotionFailure”(jdk1.8默认就设置了)的参数是否设置了</p>\n<p>如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的<strong>平均大小</strong>。</p>\n<p>如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾，如果回收完还是没有足够空间存放新的对象就会发生”OOM”</p>\n<p>当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，full gc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生“OOM”</p>\n<img src=\"/2022/09/22/JVM/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/image-20220920224423849.png\" class title=\"image-20220920224423849\">\n\n<h1 id=\"对象内存回收\"><a href=\"#对象内存回收\" class=\"headerlink\" title=\"对象内存回收\"></a>对象内存回收</h1><p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。</p>\n<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。</p>\n<p><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。</strong> 所谓对象之间的相互引用问题，如下面代码所示：除了对象objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为0，于是引用计数算法无法通知 GC 回收器回收他们。</p>\n<h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2><p>将<strong>“GC Roots”</strong> 对象作为起点，从这些节点开始向下搜索引用的对象，找到的对象都标记为<strong>非垃圾对象</strong>，其余未标记的对象都是垃圾对象</p>\n<p><strong>GC Roots</strong>根节点：线程栈的本地变量、静态变量、本地方法栈的变量等等</p>\n<h2 id=\"finalize-方法最终判定对象是否存活\"><a href=\"#finalize-方法最终判定对象是否存活\" class=\"headerlink\" title=\"finalize()方法最终判定对象是否存活\"></a>finalize()方法最终判定对象是否存活</h2><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历再次标记过程。</p>\n<p><strong>标记的前提是对象在进行可达性分析后发现没有与GC Roots相连接的引用链。</strong></p>\n<p><strong>1. 第一次标记并进行一次筛选。</strong></p>\n<p>筛选的条件是此对象是否有必要执行finalize()方法。</p>\n<p>当对象没有覆盖finalize方法，对象将直接被回收。</p>\n<p><strong>2. 第二次标记</strong></p>\n<p>如果这个对象覆盖了finalize方法，finalize方法是对象脱逃死亡命运的最后一次机会，如果对象要在finalize()中成功拯救自己，只要重新与引用链上的任何的一个对象建立关联即可，譬如把自己赋值给某个类变量或对象的成员变量，那在第二次标记时它将移除出“即将回收”的集合。如果对象这时候还没逃脱，那基本上它就真的被回收了。</p>\n<p>注意：一个对象的finalize()方法只会被执行一次，也就是说通过调用finalize方法自我救命的机会就一次。</p>\n<p><strong>如何判断一个类是无用的类</strong></p>\n<p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类呢？</p>\n<p>类需要同时满足下面3个条件才能算是 <strong>“无用的类”</strong> ：</p>\n<ul>\n<li>该类所有的对象实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li>\n<li>加载该类的 ClassLoader 已经被回收。</li>\n<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li>\n</ul>\n","categories":["JVM"],"tags":["JVM"]},{"title":"JavaClassLoader","url":"/2022/09/20/JVM/JavaClassLoader/","content":"<h1 id=\"类加载运行全过程\"><a href=\"#类加载运行全过程\" class=\"headerlink\" title=\"类加载运行全过程\"></a>类加载运行全过程</h1><p>当使用java命令运行某个类的main函数时，首先需要通过<strong>类加载器</strong>把类加载到<strong>JVM</strong>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fanq.entity.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Math</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">initData</span> <span class=\"operator\">=</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compute</span><span class=\"params\">()</span> &#123;  <span class=\"comment\">//一个方法对应一块栈帧内存区域</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (a + b) * <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Math</span> <span class=\"variable\">math</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Math</span>();</span><br><span class=\"line\">        math.compute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"通过java执行大体流程如下图\"><a href=\"#通过java执行大体流程如下图\" class=\"headerlink\" title=\"通过java执行大体流程如下图\"></a>通过java执行大体流程如下图</h2><img src=\"/2022/09/20/JVM/JavaClassLoader/image-20210411133245285.png\" class title=\"image-20210411133245285\">\n\n<h2 id=\"loadClass的类加载过程\"><a href=\"#loadClass的类加载过程\" class=\"headerlink\" title=\"loadClass的类加载过程\"></a>loadClass的类加载过程</h2><p> <strong>加载-&gt;&gt;验证-&gt;&gt;准备-&gt;&gt;解析-&gt;&gt;初始化-&gt;&gt;使用-&gt;&gt;卸载</strong></p>\n<ul>\n<li>加载：在硬盘上通过IO读入字节码文件，使用类时才会加载类。例如在调用类的main函数，new对象等等。在加载阶段会在内存中生成一个Class对象，作为方法区这个类的各种数据的访问入口(对于程序员来操作类，通过反射)</li>\n<li>验证：检验字节码文件的正确性(java的字节码文件开头有cafe babe)</li>\n<li>准备：给类的静态变量分配内存，并且赋予默认值</li>\n<li>解析：将符号引用替换为直接引用，该阶段会把一些静态方法(也就是符号引用，例如main方法替换为指向数据所存内存的指针或者句柄等[直接引用]，这就是所谓的静态链接过程[类加载期间完成]。动态链接实在程序运行期间完成的，是将符号引用替换为直接引用)</li>\n<li>初始化：对类的静态变量初始化为指定的值，执行静态代码块</li>\n</ul>\n<img src=\"/2022/09/20/JVM/JavaClassLoader/clipboard-1618120939613.png\" class title=\"img\">\n\n\n\n<p>类被加载到方法区后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应class实例的引用</strong>等信息。</p>\n<p><strong>类加载器的引用</strong>：这个类的类加载器实例的引用</p>\n<p><strong>对应class实例的引用</strong>：类加载器在加载类信息放到方法区后，会创建一个对应类的Class类型的对象实例放到堆中，为了开发人员可以访问方法区中类的信息</p>\n<p><font size=\"3\" color=\"red\">注</font></p>\n<blockquote>\n<p>主类在运行的过程中如果使用到其他类，会逐步的加载这些类。jar和war里面的类不是一次性全部加载的，都是使用的时候才会加载对应的类</p>\n</blockquote>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><h2 id=\"java中的类加载器\"><a href=\"#java中的类加载器\" class=\"headerlink\" title=\"java中的类加载器\"></a>java中的类加载器</h2><p>上面的类加载过程都是通过类加载器来完成的。java中有如下几种类加载器</p>\n<ul>\n<li>引导类加载器：负责加载支撑JVM运行的位于jre的lib目录下的核心类库。例如rt.jar和charsets.jar等</li>\n<li>扩展类加载器：负责加载支撑JVM运行的位于jre的lib目录下的ext扩展目录中的jar。</li>\n<li>应用类加载器：负责加载classpath路径下的类，主要就是加载自己写的那些类</li>\n<li>自定义类加载器：负责加载用户自定义路径下的类</li>\n</ul>\n<p>测试代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Launcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestJDKClassLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">        System.out.println(com.sun.crypto.provider.DESKeyFactory.class.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(TestJDKClassLoader.class.getClassLoader().getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">appClassLoader</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">extClassloader</span> <span class=\"operator\">=</span> appClassLoader.getParent();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">bootstrapLoader</span> <span class=\"operator\">=</span> extClassloader.getParent();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the bootstrapLoader : &quot;</span> + bootstrapLoader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the extClassloader : &quot;</span> + extClassloader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the appClassLoader : &quot;</span> + appClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bootstrapLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        URL[] urls = Launcher.getBootstrapClassPath().getURLs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; urls.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(urls[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;extClassloader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.ext.dirs&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;appClassLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">sun.misc.Launcher$ExtClassLoader</span><br><span class=\"line\">sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">the bootstrapLoader : <span class=\"literal\">null</span></span><br><span class=\"line\">the extClassloader : sun.misc.Launcher$ExtClassLoader@29453f44</span><br><span class=\"line\">the appClassLoader : sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrapLoader加载以下文件：</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/resources.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/rt.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/sunrsasign.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jsse.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jce.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/charsets.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jfr.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/classes</span><br><span class=\"line\"></span><br><span class=\"line\">extClassloader加载以下文件：</span><br><span class=\"line\">C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext;C:\\WINDOWS\\Sun\\Java\\lib\\ext</span><br><span class=\"line\"></span><br><span class=\"line\">appClassLoader加载以下文件：</span><br><span class=\"line\">C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\deploy.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\access-bridge-<span class=\"number\">64.</span>jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\cldrdata.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\dnsns.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\jaccess.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\jfxrt.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\localedata.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\nashorn.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunec.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunjce_provider.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunmscapi.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunpkcs11.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\zipfs.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\javaws.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jfxswt.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\management-agent.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\plugin.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\rt.jar;G:\\demo\\demo\\target\\classes;G:\\develop\\Maven\\repository\\org\\openjdk\\jol\\jol-core\\<span class=\"number\">0.9</span>\\jol-core-<span class=\"number\">0.9</span>.jar;G:\\develop\\IntelliJ IDEA <span class=\"number\">2020.3</span><span class=\"number\">.3</span>\\lib\\idea_rt.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类加载器初始化过程\"><a href=\"#类加载器初始化过程\" class=\"headerlink\" title=\"类加载器初始化过程\"></a>类加载器初始化过程</h2><p>参见类加载全过程流程图可知，会创建JVM启动器实例sun.misc.Launcher。</p>\n<p>在Launcher类中构造方法内部，创建了两个类加载器，分别是sun.misc.Launcher.ExtClassLoader(扩展类加载器)和sun.misc.Launcher.AppClassLoader(应用类加载器)。</p>\n<p>JVM默认使用Launcher的getClassLoader()方法返回的类加载器AppClassLoader的实例加载我们的应用程序。</p>\n<p>jdk源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Launcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       Launcher.ExtClassLoader var1;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//构造扩展类加载器。在构造得过程中将其父类加载器属性设置为null</span></span><br><span class=\"line\">           var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException var10) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create extension class loader&quot;</span>, var10);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//构造应用类加载器。在构造的过程中将其父类加载器属性设置为ExtClassLoader</span></span><br><span class=\"line\">           <span class=\"comment\">//Launcher的loader属性值是AppClassLoader，我们都是使用这个类加载器来加载我们自己下的类</span></span><br><span class=\"line\">           <span class=\"built_in\">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException var9) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create application class loader&quot;</span>, var9);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Thread.currentThread().setContextClassLoader(<span class=\"built_in\">this</span>.loader);</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.security.manager&quot;</span>);</span><br><span class=\"line\">       。。。。。。。其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h1><p>JVM类加载器是有父子层级结构关系的，如下图</p>\n<img src=\"/2022/09/20/JVM/JavaClassLoader/clipboard-1618123296065.png\" class title=\"img\">\n\n<p>类的加载其实就是一个双亲委派机制，加载某个类的时候会先请求父类加载器去寻找加载目标，找不到在继续委托上层父类加载器加载，如果父类加载器在自己加载的路径下找到目标类，就加载目标类，反之如果所有的父类加载器都在自己加载的路径下找不到目标类，那么就会向下退回加载请求，那么扩展类加载器就会自己加载，如果扩展类加载器找不到就会继续回退到应用类加载器加载。。。</p>\n<blockquote>\n<p>双亲委派机制就是有类加载就先找父类，父类不行，就再由自己加载</p>\n</blockquote>\n<h2 id=\"源码体现\"><a href=\"#源码体现\" class=\"headerlink\" title=\"源码体现\"></a>源码体现</h2><p>应用程序类加载器AppClassLoader加载器的双亲委派机制源码，最终实在父类ClassLoader中的loadClass方法，里面实现了双亲委派机制，大体逻辑如下</p>\n<ul>\n<li>首先检查一下当前类是否被加载过，加载过了就直接返回。</li>\n<li>如果类没有被加载过，那么先判断有没有父类加载器，有就委托给父类加载器，没有父类就指定为引导类加载器(bootstrap)来加载。</li>\n<li>如果父类或者bootstrap类加载器都没有加载到目标类，那么就调用当前类加载器中的findClass方法来完成加载(ClassLoader中的findClass为空实现，目地就是为了子类来实现具体的加载方式)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            <span class=\"comment\">// 先检查有没有被加载过</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 再检查有没有父类加载器</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 有父类就委托父类加载器加载</span></span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 没有父类加载器就使用bootstrap引导类加载器加载</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果父类和bootstrap类加载器都没有加载到</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    <span class=\"comment\">// 调用当前类加载器的findClass方法。ClassLoader中的findClass是空实现，所以会调用当前子类中的findClass实现</span></span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要设计双亲委派机制？\"><a href=\"#为什么要设计双亲委派机制？\" class=\"headerlink\" title=\"为什么要设计双亲委派机制？\"></a>为什么要设计双亲委派机制？</h2><ul>\n<li>沙箱安全机制：自己写的java.lang.String类不会被加载，这样可以防止java中的核心类库不会被随意的篡改</li>\n<li>避免类的重复加载：当父类已经加载了该类时，子类加载器就没有必要在加载一次了。保证了类只会被加载一次。</li>\n</ul>\n<p>代码验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************My String Class**************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果</span><br><span class=\"line\">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br></pre></td></tr></table></figure>\n\n<p><strong>全盘负责委托机制</strong></p>\n<p>全盘负责是指当一个类加载器加载一个类的时候，除非显示的使用另一个类加载器，不然改类所依赖的及其引用的类也有这个类加载来加载。</p>\n<h1 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a>自定义类加载器</h1><p>上面提到<strong>ClassLoader</strong>中的<strong>loadClass</strong>方法实现了双亲委派，还有一个<strong>findClass</strong>空实现。这是自定义类加载器的两个核心方法。所以我们要继承ClassLoader，然后重写findClass方法</p>\n<h2 id=\"实现双亲委派机制\"><a href=\"#实现双亲委派机制\" class=\"headerlink\" title=\"实现双亲委派机制\"></a>实现双亲委派机制</h2><p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoaderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String classPath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">MyClassLoader</span><span class=\"params\">(String classPath)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.classPath = classPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] loadByte(String name) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            name = name.replaceAll(<span class=\"string\">&quot;\\\\.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(classPath + <span class=\"string\">&quot;/&quot;</span> + name</span><br><span class=\"line\">                    + <span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> fis.available();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[len];</span><br><span class=\"line\">            fis.read(data);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] data = loadByte(name);</span><br><span class=\"line\">                <span class=\"comment\">//defineClass将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(name, data, <span class=\"number\">0</span>, data.length);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化自定义类加载器，过程中会把自定义类加载器的父加载器设置为应用程序类加载器AppClassLoader</span></span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>(<span class=\"string\">&quot;G:/test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//G盘创建 test/com/fanq/jvm 几级目录，将一个类的class文件放在目录下</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.fanq.jvm.User1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">        <span class=\"comment\">//通过反射来调用print方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(<span class=\"string\">&quot;print&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        method.invoke(obj, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(clazz.getClassLoader().getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\">================自定义类加载器=================</span><br><span class=\"line\">com.fanq.MyClassLoaderTest$MyClassLoader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打破双亲委派机制\"><a href=\"#打破双亲委派机制\" class=\"headerlink\" title=\"打破双亲委派机制\"></a>打破双亲委派机制</h2><p>打破双亲委派机制就是要重新ClassLoader中的loadClass方法</p>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoaderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String classPath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">MyClassLoader</span><span class=\"params\">(String classPath)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.classPath = classPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] loadByte(String name) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            name = name.replaceAll(<span class=\"string\">&quot;\\\\.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(classPath + <span class=\"string\">&quot;/&quot;</span> + name</span><br><span class=\"line\">                    + <span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> fis.available();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[len];</span><br><span class=\"line\">            fis.read(data);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 重写类加载方法，实现自己的加载逻辑，不委派给双亲加载</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> name 包名</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> resolve</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@throws</span> ClassNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">                <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">                Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    <span class=\"comment\">//打破双亲委派机制,自定义的包名走自定义的类加载器</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">&quot;com.fanq.jvm&quot;</span>))&#123;</span><br><span class=\"line\">                        c = <span class=\"built_in\">this</span>.getParent().loadClass(name);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findClass(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                    resolveClass(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] data = loadByte(name);</span><br><span class=\"line\">                <span class=\"comment\">//defineClass将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(name, data, <span class=\"number\">0</span>, data.length);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化自定义类加载器，过程中会把自定义类加载器的父加载器设置为应用程序类加载器AppClassLoader</span></span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>(<span class=\"string\">&quot;G:/test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//G盘创建 test/com/fanq/jvm 几级目录，将一个类的class文件放在目录下</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.fanq.jvm.User1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">        <span class=\"comment\">//通过反射来调用print方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(<span class=\"string\">&quot;print&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        method.invoke(obj, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(clazz.getClassLoader().getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果</span><br><span class=\"line\">================自定义类加载器=================</span><br><span class=\"line\">com.fanq.MyClassLoaderTest$MyClassLoader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可以使用自定义加载器加载java-lang-String么\"><a href=\"#可以使用自定义加载器加载java-lang-String么\" class=\"headerlink\" title=\"可以使用自定义加载器加载java.lang.String么\"></a>可以使用自定义加载器加载java.lang.String么</h2><p>不可以，因为类加载器最终都会调用defineClass方法，defineClass方法中有preDefineClass方法校验。ClassLoader中的preDefineClass方法源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ProtectionDomain <span class=\"title function_\">preDefineClass</span><span class=\"params\">(String name,</span></span><br><span class=\"line\"><span class=\"params\">                                        ProtectionDomain pd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkName(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoClassDefFoundError</span>(<span class=\"string\">&quot;IllegalName: &quot;</span> + name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class=\"line\">    <span class=\"comment\">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class=\"line\">    <span class=\"comment\">// of the form &quot;java.*&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//以java.开头的包名都不可以被加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((name != <span class=\"literal\">null</span>) &amp;&amp; name.startsWith(<span class=\"string\">&quot;java.&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecurityException</span></span><br><span class=\"line\">            (<span class=\"string\">&quot;Prohibited package name: &quot;</span> +</span><br><span class=\"line\">             name.substring(<span class=\"number\">0</span>, name.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pd == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        pd = defaultDomain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"literal\">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["JVM"],"tags":["JVM"]},{"title":"WSL2下ubuntu更改安装地址","url":"/2024/05/11/Linux/windows%E5%AD%90%E7%B3%BB%E7%BB%9F/","content":"<h1 id=\"修改ubuntu子系统安装目录\"><a href=\"#修改ubuntu子系统安装目录\" class=\"headerlink\" title=\"修改ubuntu子系统安装目录\"></a>修改ubuntu子系统安装目录</h1><p>因为默认是安装ubuntu在C盘，那我一般不喜欢在C盘装软件，所以把ubuntu该到了H盘。</p>\n<h2 id=\"查看wsl运行状态，将其保持在关闭状态\"><a href=\"#查看wsl运行状态，将其保持在关闭状态\" class=\"headerlink\" title=\"查看wsl运行状态，将其保持在关闭状态\"></a>查看wsl运行状态，将其保持在关闭状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl -l -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭ubuntu子系统\"><a href=\"#关闭ubuntu子系统\" class=\"headerlink\" title=\"关闭ubuntu子系统\"></a>关闭ubuntu子系统</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl --shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log</span></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl -l -v</span><br><span class=\"line\">  NAME            STATE           VERSION</span><br><span class=\"line\">* Ubuntu-22.04    Running         2</span><br><span class=\"line\">  Ubuntu-24.04    Running         2</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl --shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl -l -v</span><br><span class=\"line\">  NAME            STATE           VERSION</span><br><span class=\"line\">* Ubuntu-22.04    Stopped         2</span><br><span class=\"line\">  Ubuntu-24.04    Stopped         2</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"导出当前Linux的镜像\"><a href=\"#导出当前Linux的镜像\" class=\"headerlink\" title=\"导出当前Linux的镜像\"></a>导出当前Linux的镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl --<span class=\"built_in\">export</span> Ubuntu-24.04 H:\\ubuntu24.04.tar</span><br><span class=\"line\"><span class=\"comment\">#log</span></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl --<span class=\"built_in\">export</span> Ubuntu-24.04 H:\\ubuntu24.04.tar</span><br><span class=\"line\">正在导出，这可能需要几分钟时间。</span><br><span class=\"line\">操作成功完成。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注销之前的系统并检查\"><a href=\"#注销之前的系统并检查\" class=\"headerlink\" title=\"注销之前的系统并检查\"></a>注销之前的系统并检查</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl --unregister Ubuntu-24.04</span><br><span class=\"line\"><span class=\"comment\">#log</span></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl --unregister Ubuntu-24.04</span><br><span class=\"line\">正在注销。</span><br><span class=\"line\">操作成功完成。</span><br></pre></td></tr></table></figure>\n\n<p>查看系统是否移除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\oge&gt;wsl -l -v</span><br><span class=\"line\">  NAME            STATE           VERSION</span><br><span class=\"line\">* Ubuntu-22.04    Stopped         2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入系统并指定安装目录\"><a href=\"#导入系统并指定安装目录\" class=\"headerlink\" title=\"导入系统并指定安装目录\"></a>导入系统并指定安装目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl --import Ubuntu-24.04 H:\\Ubuntu2404 H:\\ubuntu24.04.tar</span><br><span class=\"line\"><span class=\"comment\">#log Ubuntu-24.04导入系统的名字，H:\\Ubuntu2404 安装目录</span></span><br><span class=\"line\">C:\\Users\\oge&gt;wsl --import Ubuntu-24.04 H:\\Ubuntu2404 H:\\ubuntu24.04.tar</span><br><span class=\"line\">正在导入，这可能需要几分钟时间。</span><br><span class=\"line\">操作成功完成。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置先前设置的默认登录用户\"><a href=\"#配置先前设置的默认登录用户\" class=\"headerlink\" title=\"配置先前设置的默认登录用户\"></a>配置先前设置的默认登录用户</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ubuntu2404.exe config --default-user doubao</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["Linux"]},{"title":"Stream","url":"/2024/07/08/Java/Stream/","content":"<h1 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h1><p>Lambda表达式是Java 8引入的一个重要特性,它提供了一种更简洁的方式来创建匿名函数。</p>\n<h2 id=\"基本语法：\"><a href=\"#基本语法：\" class=\"headerlink\" title=\"基本语法：\"></a>基本语法：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; &#123; body &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数列表可以为空,也可以包含一个或多个参数</li>\n<li>箭头 -&gt; 将参数列表与Lambda主体分开</li>\n<li>主体可以是单个表达式或语句块</li>\n</ul>\n<h2 id=\"简化写法\"><a href=\"#简化写法\" class=\"headerlink\" title=\"简化写法:\"></a>简化写法:</h2><p>当只有一个参数时,可以省略括号:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">s -&gt; s.length()</span><br></pre></td></tr></table></figure>\n\n<p>当主体只有一条语句时,可以省略大括号和return关键字:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">(a, b) -&gt; a + b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">    Collections.sort(integers, Comparator.reverseOrder());</span><br><span class=\"line\">    integers.forEach(System.out::print);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>System.out::println</code>中的<code>::</code>是Java 8引入的方法引用(method reference)操作符。它提供了一种更简洁的方式来引用已有的方法。具体来说:</p>\n<ol>\n<li><code>::</code>操作符用于引用方法或构造函数,而不实际调用它们。</li>\n<li><code>System.out::println</code>是对<code>System.out</code>对象的<code>println</code>方法的引用。它等价于lambda表达式<code>x -&gt; System.out.println(x)</code>。</li>\n<li>方法引用可以用在需要函数式接口的地方,如<code>forEach</code>、<code>map</code>等操作中。</li>\n<li>方法引用有几种形式:静态方法引用: <code>ClassName::staticMethodName</code>实例方法引用: <code>instance::methodName</code>对象方法引用: <code>ClassName::methodName</code>构造函数引用: <code>ClassName::new</code></li>\n<li>在<code>numbers.forEach(System.out::println)</code>中,<code>forEach</code>方法期望接收一个<code>Consumer</code>函数式接口。<code>System.out::println</code>正好符合这个接口的要求。</li>\n<li>使用方法引用可以使代码更简洁、可读性更强,特别是在使用lambda表达式的场景中。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>函数式接口是Java 8引入的一个重要概念,它具有以下主要特点:</p>\n<ol>\n<li>定义:函数式接口是只包含一个抽象方法的接口。</li>\n<li>注解:可以使用<code>@FunctionalInterface</code>注解来标记和检查函数式接口。</li>\n<li>用途:函数式接口主要用于支持Lambda表达式。</li>\n<li>使用方式:可以通过Lambda表达式创建函数式接口的实例可以作为方法的参数传递可以与默认方法和静态方法结合使用</li>\n<li>优点:简化代码,提高可读性支持函数式编程增强代码的灵活性和复用性</li>\n<li>自定义函数式接口:可以根据需要自定义函数式接口,只需确保接口中只有一个抽象方法。</li>\n</ol>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ul>\n<li>有入参，无出参【消费者】：  <code>function.accept</code><ul>\n<li><code>Consumer&lt;T&gt;</code>，这是最基本的消费型接口，接受一个泛型参数T，无返回值。</li>\n<li><code>BiConsumer&lt;T, U&gt;</code>，接受两个参数的消费型接口。</li>\n<li><code>IntConsumer</code>，专门用于接受int类型参数的Consumer。</li>\n<li><code>LongConsumer</code> 和 <code>DoubleConsumer</code>类似于<code>IntConsumer</code>，分别用于接受long和double类型参数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Consumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> (a) -&gt; System.out.println(a);</span><br><span class=\"line\">    consumer.accept(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">BiConsumer</span> <span class=\"variable\">biConsumer</span> <span class=\"operator\">=</span> (x, y) -&gt; System.out.println(x + <span class=\"string\">&quot; + &quot;</span> + y);</span><br><span class=\"line\">    biConsumer.accept(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">IntConsumer</span> <span class=\"variable\">intConsumer</span> <span class=\"operator\">=</span> (x) -&gt; System.out.println(x + <span class=\"string\">&quot; + &quot;</span> + x);</span><br><span class=\"line\">    intConsumer.accept(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">LongConsumer</span> <span class=\"variable\">longConsumer</span> <span class=\"operator\">=</span> (x) -&gt; System.out.println(x + <span class=\"string\">&quot; + &quot;</span> + x);</span><br><span class=\"line\">    longConsumer.accept(<span class=\"number\">1L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">DoubleConsumer</span> <span class=\"variable\">doubleConsumer</span> <span class=\"operator\">=</span> (x) -&gt; System.out.println(x + <span class=\"string\">&quot; + &quot;</span> + x);</span><br><span class=\"line\">    doubleConsumer.accept(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有入参，有出参【<strong>多功能函数</strong>】： <code>function.apply</code><ul>\n<li><code>Function&lt;T, R&gt;</code>，这是最基本的函数型接口，接受一个类型为 T 的参数，返回类型为 R 的结果。</li>\n<li><code>BiFunction&lt;T, U, R&gt;</code>，接受两个参数（类型分别为 T 和 U）并返回一个结果（类型为 R）。</li>\n<li>恒等函数，Function 接口还提供了一个静态方法 identity()，返回一个总是返回其输入参数的函数。</li>\n<li>函数组合，Function 接口提供了 compose 和 andThen 方法，允许函数组合。</li>\n<li>原始类型特化的 Function 接口，Java 提供了一些针对原始类型的特化接口，以避免装箱和拆箱操作：<ul>\n<li><code>IntFunction&lt;R&gt;</code>: 接受 int 参数，返回 R 类型结果</li>\n<li><code>LongFunction&lt;R&gt;</code>: 接受 long 参数，返回 R 类型结果</li>\n<li><code>DoubleFunction&lt;R&gt;</code>: 接受 double 参数，返回 R 类型结果</li>\n<li><code>IntToLongFunction</code>, <code>IntToDoubleFunction</code>等：在原始类型之间转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    Function&lt;String,Integer&gt; function = (String x) -&gt; Integer.parseInt(x);</span><br><span class=\"line\">    System.out.println(function.apply(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    BiFunction&lt;String,String,String&gt; biFunction =  (String x, String y) -&gt; Integer.parseInt(x) + <span class=\"string\">&quot; + &quot;</span> + Integer.parseInt(y);</span><br><span class=\"line\">    System.out.println(biFunction.apply(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    IntFunction&lt;String&gt; intToString = i -&gt; String.valueOf(i);</span><br><span class=\"line\">    System.out.println(intToString.apply(<span class=\"number\">42</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    Function&lt;Integer, Integer&gt; times2 = i -&gt; i * <span class=\"number\">2</span>;</span><br><span class=\"line\">    Function&lt;Integer, Integer&gt; squared = i -&gt; i * i;</span><br><span class=\"line\">    <span class=\"comment\">// 先平方再乘2</span></span><br><span class=\"line\">    Function&lt;Integer, Integer&gt; squaredThenTimes2 = times2.compose(squared);</span><br><span class=\"line\">    System.out.println(squaredThenTimes2.apply(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先乘2再平方</span></span><br><span class=\"line\">    Function&lt;Integer, Integer&gt; times2ThenSquared = times2.andThen(squared);</span><br><span class=\"line\">    System.out.println(times2ThenSquared.apply(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    Function&lt;String, String&gt; identity = Function.identity();</span><br><span class=\"line\">    System.out.println(identity.apply(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无入参，无出参【<strong>普通函数</strong>】：<ul>\n<li><code>Runnable</code>接口。这是一个非常基础且常用的函数式接口，主要用于表示一个不接受任何参数也不返回任何结果的操作。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;Task running&quot;</span>)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用ScheduledExecutorService定时执行任务</span></span><br><span class=\"line\">    <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">    executor.scheduleAtFixedRate(() -&gt; System.out.println(<span class=\"string\">&quot;Periodic task&quot;</span>), <span class=\"number\">0</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无入参 ，有出参【<strong>提供者</strong>】：  <code>supplier.get</code><ul>\n<li><code>Supplier</code>，接口用于提供一个结果，而不需要任何输入参数。它通常用于延迟计算、工厂方法等场景。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    Supplier&lt;String&gt; supplier = ()-&gt; UUID.randomUUID().toString();</span><br><span class=\"line\">    System.out.println(supplier.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    Stream&lt;String&gt; stream = Stream.generate(() -&gt; <span class=\"string\">&quot;Repeated Value&quot;</span>).limit(<span class=\"number\">5</span>);</span><br><span class=\"line\">    stream.forEach(System.out::println); <span class=\"comment\">// 输出五次 &quot;Repeated Value&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有入参，有出参<strong>【断言函数】</strong><ul>\n<li><code>Predicate</code>接口位于 java.util.function 包中，它接受一个参数并返回一个布尔值。<ul>\n<li>test(T t): 核心方法，评估给定的参数。</li>\n<li>and(Predicate other): 返回一个组合的 Predicate，表示逻辑与。</li>\n<li>or(Predicate other): 返回一个组合的 Predicate，表示逻辑或。</li>\n<li>negate(): 返回一个表示逻辑非的 Predicate。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    Predicate&lt;Integer&gt; greaterThanTen = n -&gt; n &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">    System.out.println(greaterThanTen.test(<span class=\"number\">15</span>)); <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">    System.out.println(greaterThanTen.test(<span class=\"number\">5</span>));  <span class=\"comment\">// 输出: false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 组合 Predicate</span></span><br><span class=\"line\">    Predicate&lt;Integer&gt; lowerThanTwenty = n -&gt; n &lt; <span class=\"number\">20</span>;</span><br><span class=\"line\">    Predicate&lt;Integer&gt; between10And20 = greaterThanTen.and(lowerThanTwenty);</span><br><span class=\"line\">    System.out.println(between10And20.test(<span class=\"number\">15</span>)); <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>组合函数式接口使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、定义数据提供者函数</span></span><br><span class=\"line\">    Supplier&lt;String&gt; supplier = () -&gt; <span class=\"string\">&quot;25&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//2、断言：验证是否一个数字</span></span><br><span class=\"line\">    Predicate&lt;String&gt; isNumber = str -&gt; str.matches(<span class=\"string\">&quot;-?\\\\d+(\\\\.\\\\d+)?&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//3、转换器：把字符串变成数字  类::实例方法（静态方法）</span></span><br><span class=\"line\">    Function&lt;String, Integer&gt; change = Integer::parseInt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4、消费者：打印数字</span></span><br><span class=\"line\">    Consumer&lt;Integer&gt; consumer = integer -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (integer % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;偶数：&quot;</span> + integer);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;奇数：&quot;</span> + integer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    mymethod(supplier, isNumber, change, consumer);</span><br><span class=\"line\"></span><br><span class=\"line\">    mymethod(() -&gt; <span class=\"string\">&quot;doubao&quot;</span>,</span><br><span class=\"line\">            str -&gt; str.matches(<span class=\"string\">&quot;-?\\\\d+(\\\\.\\\\d+)?&quot;</span>),</span><br><span class=\"line\">            Integer::parseInt,</span><br><span class=\"line\">            System.out::println);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mymethod</span><span class=\"params\">(Supplier&lt;String&gt; supplier,</span></span><br><span class=\"line\"><span class=\"params\">                             Predicate&lt;String&gt; isNumber,</span></span><br><span class=\"line\"><span class=\"params\">                             Function&lt;String, Integer&gt; change,</span></span><br><span class=\"line\"><span class=\"params\">                             Consumer&lt;Integer&gt; consumer)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNumber.test(supplier.get())) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明是一个数字</span></span><br><span class=\"line\">        consumer.accept(change.apply(supplier.get()));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明不是一个数字</span></span><br><span class=\"line\">        System.out.println(supplier.get()+<span class=\"string\">&quot;是非法的数字&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"StreamAPI\"><a href=\"#StreamAPI\" class=\"headerlink\" title=\"StreamAPI\"></a>StreamAPI</h1><h2 id=\"流管道\"><a href=\"#流管道\" class=\"headerlink\" title=\"流管道\"></a>流管道</h2><ul>\n<li><p>Stream的流管道由以下三个主要部分组成:</p>\n<ul>\n<li><p>数据源(Source):可以是集合(如List、Set等)数组生成器函数I&#x2F;O通道等</p>\n</li>\n<li><p>零个或多个中间操作(Intermediate Operations):如filter()、map()、flatMap()、distinct()、sorted()等这些操作是惰性的,不会立即执行返回一个新的Stream</p>\n</li>\n<li><p>一个终端操作(Terminal Operation):如forEach()、collect()、reduce()、count()、sum()等触发整个流管道的执行产生结果或副作用</p>\n</li>\n</ul>\n</li>\n<li><p>流管道的执行过程:</p>\n<ul>\n<li><p>当调用终端操作时,整个流管道才开始执行</p>\n</li>\n<li><p>中间操作会被组合起来,形成一个处理管道</p>\n</li>\n<li><p>数据源中的元素会依次通过这个管道进行处理</p>\n</li>\n<li><p>最后由终端操作产生最终结果</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>Stream API中的intermediate(中间)操作和terminal(终端)操作有以下主要区别:</p>\n<ol>\n<li>执行时机:Intermediate操作是惰性的(lazy),不会立即执行。它们只会创建一个新的Stream,而不会处理数据。Terminal操作是即时的(eager),会触发整个Stream管道的执行,并产生最终结果。</li>\n<li>返回值:Intermediate操作返回一个新的Stream。Terminal操作通常返回一个非Stream的结果,如一个值、集合或者void。</li>\n<li>链式调用:Intermediate操作可以被链式调用,形成一个操作管道。Terminal操作只能是管道中的最后一个操作。</li>\n<li>Stream状态:执行Intermediate操作后,Stream仍然可以使用。执行Terminal操作后,Stream被消费,不能再次使用。</li>\n<li>常见操作类型:<ol>\n<li>Intermediate操作: filter(), map(), flatMap(), distinct(), sorted(), peek(), limit(), skip()等。</li>\n<li>Terminal操作: forEach(), toArray(), reduce(), collect(), min(), max(), count(), anyMatch(), allMatch(), noneMatch(), findFirst(), findAny()等。</li>\n</ol>\n</li>\n<li>处理方式:Intermediate操作通常只是设置了数据处理的规则。Terminal操作会遍历Stream并按照之前设定的规则处理数据。</li>\n<li>优化机会:多个Intermediate操作可以被优化,合并成一次遍历。Terminal操作触发这种优化,使得整个管道能够高效执行。</li>\n<li>短路行为:某些Terminal操作(如findFirst, anyMatch)具有短路行为,可能在不处理所有元素的情况下就返回结果。</li>\n</ol>\n","categories":["Java"],"tags":["Java"]},{"title":"编译JDK11","url":"/2022/09/20/Java/%E7%BC%96%E8%AF%91JDK11/","content":"<h1 id=\"下载OpenJDK11s源文件\"><a href=\"#下载OpenJDK11s源文件\" class=\"headerlink\" title=\"下载OpenJDK11s源文件\"></a>下载OpenJDK11s源文件</h1><p>下载地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改Ubuntu源为阿里源\"><a href=\"#修改Ubuntu源为阿里源\" class=\"headerlink\" title=\"修改Ubuntu源为阿里源\"></a>修改Ubuntu源为阿里源</h1><p>先备份原文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>编辑原文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>将文件内容替换</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装编译所需文件\"><a href=\"#安装编译所需文件\" class=\"headerlink\" title=\"安装编译所需文件\"></a>安装编译所需文件</h1><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sudo apt-get install build-essential -y</td>\n<td>gcc</td>\n</tr>\n<tr>\n<td>sudo apt-get install libfreetype6-dev -y</td>\n<td>FreeType</td>\n</tr>\n<tr>\n<td>sudo apt-get install libcups2-dev -y</td>\n<td>CUPS</td>\n</tr>\n<tr>\n<td>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev -y</td>\n<td>X11</td>\n</tr>\n<tr>\n<td>sudo apt-get install libasound2-dev -y</td>\n<td>ALSA</td>\n</tr>\n<tr>\n<td>sudo apt-get install libffi-dev -y</td>\n<td>libffi</td>\n</tr>\n<tr>\n<td>sudo apt-get install autoconf -y</td>\n<td>Autoconf</td>\n</tr>\n<tr>\n<td>sudo apt-get install libfontconfig1-dev -y</td>\n<td>fontconfig</td>\n</tr>\n<tr>\n<td>sudo apt install  openjdk-11-jdk -y</td>\n<td>JDK11</td>\n</tr>\n</tbody></table>\n<h1 id=\"安装gcc-7\"><a href=\"#安装gcc-7\" class=\"headerlink\" title=\"安装gcc 7\"></a>安装gcc 7</h1><p>Ubuntu 20.04 gcc默认是9.4.0, 如果不安装gcc 7，在编译JDK时会报错</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc-7 -y</span><br><span class=\"line\">sudo apt-get install g++-7 -y</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100</span><br><span class=\"line\">sudo update-alternatives --config gcc</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 100</span><br><span class=\"line\">sudo update-alternatives --config g++</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h1><p>下载完成后的JDK原文件，进行解压，然后进入到JDK目录中，开始编译</p>\n<p>编译FastDebug版、仅含Server模式的HotSpot虚拟机，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash configure --enable-debug --with-jvm-variants=server    --with-extra-cflags=-Wno-deprecated-declarations</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，会输出调试级别，Java虚拟机的模式、特性， 使用的编译器版本等配置摘要信息，如下所示： </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">====================================================</span><br><span class=\"line\">The existing configuration has been successfully updated <span class=\"keyword\">in</span></span><br><span class=\"line\">/home/fanqian/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug</span><br><span class=\"line\">using configure arguments <span class=\"string\">&#x27;--enable-debug --with-jvm-variants=server --with-extra-cflags=-Wno-deprecated-declarations&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    fastdebug</span><br><span class=\"line\">* HS debug level: fastdebug</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* JVM features:   server: <span class=\"string\">&#x27;aot cds cmsgc compiler1 compiler2 epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services vm-structs&#x27;</span> </span><br><span class=\"line\">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class=\"line\">* Version string: 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad (11-internal)</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       openjdk version <span class=\"string\">&quot;11.0.15&quot;</span> 2022-04-19 OpenJDK Runtime Environment (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1) OpenJDK 64-Bit Server VM (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1, mixed mode, sharing)  (at /usr/lib/jvm/java-11-openjdk-amd64)</span><br><span class=\"line\">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class=\"line\">* C Compiler:     Version 7.5.0 (at /usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:   Version 7.5.0 (at /usr/bin/g++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   6</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   7950 MB</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: The result of this configuration has overridden an older</span><br><span class=\"line\">configuration. You *should* run <span class=\"string\">&#x27;make clean&#x27;</span> to make sure you get a</span><br><span class=\"line\">proper build. Failure to <span class=\"keyword\">do</span> so might result <span class=\"keyword\">in</span> strange build problems.</span><br><span class=\"line\"></span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad$ </span><br></pre></td></tr></table></figure>\n\n<p>继续执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make images</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，输出如下信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">Note: /home/fanqian/jdk11-1ddf9a99e4ad/src/demo/share/jfc/Stylepad/Stylepad.java uses unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use or override a deprecated API.</span><br><span class=\"line\">Note: Recompile with -Xlint:deprecation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use or override a deprecated API.</span><br><span class=\"line\">Note: Recompile with -Xlint:deprecation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: /home/fanqian/jdk11-1ddf9a99e4ad/src/demo/share/jfc/TableExample/TableExample4.java uses unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Creating support/demos/image/jfc/CodePointIM/CodePointIM.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Font2DTest/Font2DTest.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SwingSet2/SwingSet2.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/J2Ddemo/J2Ddemo.jar</span><br><span class=\"line\">Creating images/jmods/jdk.jlink.jmod</span><br><span class=\"line\">Creating support/demos/image/jfc/Metalworks/Metalworks.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Notepad/Notepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Stylepad/Stylepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SampleTree/SampleTree.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TableExample/TableExample.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar</span><br><span class=\"line\">Creating images/jmods/java.base.jmod</span><br><span class=\"line\">Creating jdk image</span><br><span class=\"line\">Stopping sjavac server</span><br><span class=\"line\">Finished building target <span class=\"string\">&#x27;images&#x27;</span> <span class=\"keyword\">in</span> configuration <span class=\"string\">&#x27;linux-x86_64-normal-server-fastdebug&#x27;</span></span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad$ </span><br></pre></td></tr></table></figure>\n\n<p>进入编译后的jdk目录中执行java -version，输出如下信息，编译完成</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug/jdk/bin$ ./java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">&quot;11-internal&quot;</span> 2018-09-25</span><br><span class=\"line\">OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad, mixed mode)</span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug/jdk/bin$ </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["Java"]},{"title":"Ubuntu24","url":"/2024/07/05/Linux/Ubuntu24/","content":"<h1 id=\"Ubuntu24\"><a href=\"#Ubuntu24\" class=\"headerlink\" title=\"Ubuntu24\"></a>Ubuntu24</h1><h2 id=\"配置静态-ip\"><a href=\"#配置静态-ip\" class=\"headerlink\" title=\"配置静态 ip\"></a>配置静态 ip</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/netplan/50-cloud-init.yaml </span><br><span class=\"line\"><span class=\"comment\"># This file is generated from information provided by the datasource.  Changes</span></span><br><span class=\"line\"><span class=\"comment\"># to it will not persist across an instance reboot.  To disable cloud-init&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\"># network configuration capabilities, write a file</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class=\"line\"><span class=\"comment\"># network: &#123;config: disabled&#125;</span></span><br><span class=\"line\">network:</span><br><span class=\"line\">    renderer: networkd</span><br><span class=\"line\">    ethernets:</span><br><span class=\"line\">        ens33: <span class=\"comment\"># 替换为你的网络接口名称</span></span><br><span class=\"line\">            dhcp4: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭 DHCP</span></span><br><span class=\"line\">            dhcp6: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭 DHCP</span></span><br><span class=\"line\">            addresses: [192.168.121.201/24] <span class=\"comment\"># 静态 IP 地址和子网掩码</span></span><br><span class=\"line\">            routes:</span><br><span class=\"line\">              - to: default</span><br><span class=\"line\">                via: 192.168.121.2 <span class=\"comment\"># 网关地址</span></span><br><span class=\"line\">            nameservers:</span><br><span class=\"line\">                addresses: <span class=\"comment\"># dns地址</span></span><br><span class=\"line\">                  - 1.2.4.8</span><br><span class=\"line\">                  - 114.114.114.114</span><br><span class=\"line\">                  - 8.8.8.8</span><br><span class=\"line\">                </span><br><span class=\"line\">    version: 2</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"配置阿里源加速\"><a href=\"#配置阿里源加速\" class=\"headerlink\" title=\"配置阿里源加速\"></a>配置阿里源加速</h2><p> <code>24.04 源文件地址 已经更换为 /etc/apt/sources.list.d/ubuntu.sources</code><br>备份当前的源列表：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> /etc/apt/sources.list.d/ubuntu.sources  /etc/apt/sources.list.d/ubuntu.sources.bak</span><br></pre></td></tr></table></figure>\n\n<p>设置阿里源地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/apt/sources.list.d/ubuntu.sources  &lt;&lt;<span class=\"string\">EOF  </span></span><br><span class=\"line\"><span class=\"string\"># 阿里云</span></span><br><span class=\"line\"><span class=\"string\">Types: deb</span></span><br><span class=\"line\"><span class=\"string\">URIs: http://mirrors.aliyun.com/ubuntu/</span></span><br><span class=\"line\"><span class=\"string\">Suites: noble noble-updates noble-security</span></span><br><span class=\"line\"><span class=\"string\">Components: main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"string\">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>更新源列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置docker的阿里源\"><a href=\"#配置docker的阿里源\" class=\"headerlink\" title=\"配置docker的阿里源\"></a>配置docker的阿里源</h2><p>新的目录来存储密钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/apt/keyrings</span><br></pre></td></tr></table></figure>\n\n<p>下载并添加新的 GPG 密钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>\n\n<p>更新 Docker 的软件源配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>更新软件包列表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<p>在安装docker和相关插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["Linux"]},{"title":"WSL2安装ubuntu","url":"/2023/07/04/Linux/wsl2/","content":"<h1 id=\"Win安装wsl2\"><a href=\"#Win安装wsl2\" class=\"headerlink\" title=\"Win安装wsl2\"></a>Win安装wsl2</h1><p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/install\">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></p>\n<h1 id=\"Win安装ubuntu\"><a href=\"#Win安装ubuntu\" class=\"headerlink\" title=\"Win安装ubuntu\"></a>Win安装ubuntu</h1><p>可以直接在Microsoft Store中直接安装</p>\n<h1 id=\"Win升级wsl\"><a href=\"#Win升级wsl\" class=\"headerlink\" title=\"Win升级wsl\"></a>Win升级wsl</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">确保 WSL 版本为 0.67.6 或更高版本。 （若要检查，请运行 wsl --version。若要更新，请运行 wsl --update </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ubuntu开启systemd支持\"><a href=\"#ubuntu开启systemd支持\" class=\"headerlink\" title=\"ubuntu开启systemd支持\"></a>ubuntu开启systemd支持</h1><p>在ubuntu系统中新建<code>/etc/wsl.conf</code>文件，内容如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[boot]</span><br><span class=\"line\">systemd=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更改ubuntu网络配置\"><a href=\"#更改ubuntu网络配置\" class=\"headerlink\" title=\"更改ubuntu网络配置\"></a>更改ubuntu网络配置</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config iptables</span><br><span class=\"line\">There are 2 choices <span class=\"keyword\">for</span> the alternative iptables (providing /usr/sbin/iptables).</span><br><span class=\"line\"> </span><br><span class=\"line\">  Selection    Path                       Priority   Status</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">* 0            /usr/sbin/iptables-nft      20        auto mode</span><br><span class=\"line\">  1            /usr/sbin/iptables-legacy   10        manual mode</span><br><span class=\"line\">  2            /usr/sbin/iptables-nft      20        manual mode</span><br><span class=\"line\"> </span><br><span class=\"line\">Press &lt;enter&gt; to keep the current choice[*], or <span class=\"built_in\">type</span> selection number: 1</span><br><span class=\"line\">update-alternatives: using /usr/sbin/iptables-legacy to provide /usr/sbin/iptables (iptables) <span class=\"keyword\">in</span> manual mode</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["Linux"]},{"title":"docker和k8s挂载目录","url":"/2024/07/27/Linux/%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E7%9B%AE%E5%BD%95/","content":"<h1 id=\"docker挂载目录\"><a href=\"#docker挂载目录\" class=\"headerlink\" title=\"docker挂载目录\"></a>docker挂载目录</h1><p>一般docker启动容器分为以下几种</p>\n<ul>\n<li>docker run -v</li>\n<li>docker compose up</li>\n<li>docker stack deploy</li>\n</ul>\n<p>对于不同的启动方式，挂载本机目录和远程目录是不同的。下图简要画出挂载情况。</p>\n<img src=\"/2024/07/27/Linux/%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E7%9B%AE%E5%BD%95/image-20240727225712935.png\" class title=\"image-20240727225712935\">\n\n<span id=\"more\"></span>\n\n<h1 id=\"k8s挂载目录\"><a href=\"#k8s挂载目录\" class=\"headerlink\" title=\"k8s挂载目录\"></a>k8s挂载目录</h1><p>k8s挂载目录可以使用hostpath，但是这样会让部分容器绑定对应的节点，是无状态的容器变成了有状态的。这样不是最佳实践，所以不做讨论。</p>\n<p>在无状态的的容器中想要持久化文件，需要使用pv和pvc来做容器的持久化。</p>\n<img src=\"/2024/07/27/Linux/%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E7%9B%AE%E5%BD%95/image-20240727230222203.png\" class title=\"image-20240727230222203\">\n","categories":["Linux"],"tags":["Linux"]},{"title":"Mq","url":"/2024/06/24/MQ/MQ/","content":"<h1 id=\"Mq\"><a href=\"#Mq\" class=\"headerlink\" title=\"Mq\"></a>Mq</h1>","categories":["Mq"],"tags":["Mq"]},{"title":"Netty","url":"/2024/06/21/Netty/Netty/","content":"<h1 id=\"Netty\"><a href=\"#Netty\" class=\"headerlink\" title=\"Netty\"></a>Netty</h1>","categories":["Netty"],"tags":["Netty"]},{"title":"Mysql","url":"/2024/08/03/Mysql/Mysql/","content":"<h1 id=\"安装mysql9\"><a href=\"#安装mysql9\" class=\"headerlink\" title=\"安装mysql9\"></a>安装mysql9</h1><p>使用<code>docker compose</code>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: dockerhub.qingcloud.com/doubao/mysql:9.0.1</span><br><span class=\"line\">    container_name: mysql9</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: root</span><br><span class=\"line\">      MYSQL_USER: app</span><br><span class=\"line\">      MYSQL_PASSWORD: app</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ../mysql/data:/var/lib/mysql</span><br><span class=\"line\">      - ../mysql/my.cnf:/etc/mysql/my.cnf</span><br><span class=\"line\">      - ../mysql/logs:/var/log/mysql</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><code>my.cnf</code>配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"># 基本设置</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/var/run/mysqld/mysqld.sock</span><br><span class=\"line\">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class=\"line\">secure-file-priv=/var/lib/mysql-files</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 性能优化</span><br><span class=\"line\">key_buffer_size=16M</span><br><span class=\"line\">max_allowed_packet=64M</span><br><span class=\"line\">table_open_cache=400</span><br><span class=\"line\">sort_buffer_size=4M</span><br><span class=\"line\">read_buffer_size=4M</span><br><span class=\"line\">read_rnd_buffer_size=4M</span><br><span class=\"line\">myisam_sort_buffer_size=64M</span><br><span class=\"line\">thread_cache_size=8</span><br><span class=\"line\"></span><br><span class=\"line\"># InnoDB 引擎设置</span><br><span class=\"line\">innodb_buffer_pool_size=1G</span><br><span class=\"line\">innodb_log_file_size=256M</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=1</span><br><span class=\"line\">innodb_file_per_table=1</span><br><span class=\"line\">innodb_open_files=400</span><br><span class=\"line\">innodb_io_capacity=400</span><br><span class=\"line\">innodb_flush_method=O_DIRECT</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志设置</span><br><span class=\"line\">log_error=/var/log/mysql/error.log</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=/var/log/mysql/mysql-slow.log</span><br><span class=\"line\">long_query_time=2</span><br></pre></td></tr></table></figure>\n\n<p>目录结构</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">── mysql/</span><br><span class=\"line\">    ├── data/</span><br><span class=\"line\">    ├── logs/</span><br><span class=\"line\">    └── my.cnf</span><br></pre></td></tr></table></figure>\n\n","categories":["Mysql"],"tags":["Mysql"]},{"title":"Nginx","url":"/2022/09/28/Nginx/Nginx/","content":"<h1 id=\"Nginx特点\"><a href=\"#Nginx特点\" class=\"headerlink\" title=\"Nginx特点\"></a>Nginx特点</h1><p>Nginx 是一款轻量级的 Web 服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器，其特点是占有内存少，并发能力强。</p>\n<p>Nginx 做为 HTTP 服务器，有以下几项基本特性：</p>\n<ul>\n<li>处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．</li>\n<li>无缓存的反向代理加速，简单的负载均衡和容错．</li>\n<li>FastCGI，简单的负载均衡和容错．</li>\n<li>模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。</li>\n<li>支持 SSL 和 TLSSNI．</li>\n</ul>\n<p>Nginx 性能高，而 Nginx 的高性能与其架构是分不开的。那么 Nginx 究竟是怎么样的呢？这一节我们先来初识一下 Nginx 框架吧。</p>\n<p>Nginx 在启动后，在 unix 系统中会以 daemon （守护进程）的方式在后台运行，后台进程包含一个 master 进程和多个 worker 进程。</p>\n<h1 id=\"docker启动nginx\"><a href=\"#docker启动nginx\" class=\"headerlink\" title=\"docker启动nginx\"></a>docker启动nginx</h1><p>启动命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run  -d --name nginx  -p 80:80 -v /data/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf nginx</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"Nginx的rewrite规则\"><a href=\"#Nginx的rewrite规则\" class=\"headerlink\" title=\"Nginx的rewrite规则\"></a>Nginx的rewrite规则</h1><h2 id=\"Rewrite规则\"><a href=\"#Rewrite规则\" class=\"headerlink\" title=\"Rewrite规则\"></a>Rewrite规则</h2><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在<code>server&#123;&#125;</code>,<code> location&#123;&#125;</code>,<code>if&#123;&#125;</code>中，并且只能对域名后边的除去传递的参数外的字符串起作用.</p>\n<p>例如</p>\n<p><code>http://fanq.ren/doubao/a/index.html?id=1&amp;u=str</code>只对<code>/doubao/a/index.html</code>重写。</p>\n<p>语法：</p>\n<blockquote>\n<p> rewrite regex replacement [flag]; </p>\n</blockquote>\n<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p>\n<p>表面看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>\n<ul>\n<li>1,执行server块的rewrite指令</li>\n<li>2,执行location匹配</li>\n<li>3,执行选定的location中的rewrite指令</li>\n</ul>\n<h2 id=\"flag标志位\"><a href=\"#flag标志位\" class=\"headerlink\" title=\"flag标志位\"></a>flag标志位</h2><ul>\n<li>last : 相当于Apache的[L]标记，表示完成rewrite</li>\n<li>break : 停止执行当前虚拟主机的后续rewrite指令集</li>\n<li>redirect : 返回302临时重定向，地址栏会显示跳转后的地址</li>\n<li>permanent : 返回301永久重定向，地址栏会显示跳转后的地址</li>\n</ul>\n<h3 id=\"break和last区别\"><a href=\"#break和last区别\" class=\"headerlink\" title=\"break和last区别\"></a>break和last区别</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/break</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /healthz/ <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/last</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /healthz/ <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"section\">location</span> /healthz &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;healthz&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>break是停止处理当前的ngx_http_rewrite_module指令集，就是说不会在向下匹配新的location</p>\n<p>last停止处理当前的ngx_http_rewrite_module指令集并开始搜索与更改的URI匹配的新位置</p>\n<p>假设我们在页面上访问的url是<code>http://fanq.ren/break</code>，根据上面的nginx规则，会匹配到第一个</p>\n<p>根据location里面rewrite正则，url由原来的&#x2F;break变为&#x2F;healthz&#x2F;但是在root&#x2F;opt&#x2F;code&#x2F;目录下，没有找到&#x2F;healthz目录下面的内容，所以nginx会返回404错误码。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@centos conf]<span class=\"comment\"># curl localhost:80/break</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;hr&gt;&lt;center&gt;nginx/1.23.1&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">[root@centos conf]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>假设我们在页面上访问的url是<code>http://fanq.ren/last</code>，根据上面的nginx规则，会匹配到第二个</p>\n<p>根据location里面rewrite正则，url由原来的&#x2F;last变为&#x2F;healthz，但是会重新匹配loction中，简单理解就是将请求的url进行替换，替换后url[<a href=\"http://fanq.ren/healthz%60]%E4%BC%9A%E9%87%8D%E6%96%B0%E5%8F%91%E8%B5%B7%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E3%80%82%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%E7%AC%AC%E4%B8%89%E4%B8%AAloaction%EF%BC%8C%E6%A0%B9%E6%8D%AElocation%E9%87%8C%E7%9A%84rewrite%E6%AD%A3%E5%88%99%EF%BC%8C%E4%BC%9A%E8%BF%94%E5%9B%9E200%E7%A0%81%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BC%9A%E8%BF%94%E5%9B%9Ejson%E5%86%85%E5%AE%B9%E3%80%82\">http://fanq.ren/healthz`]会重新发起一次请求。这个时候会匹配到第三个loaction，根据location里的rewrite正则，会返回200码，并且会返回json内容。</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@centos conf]<span class=\"comment\"># curl localhost:80/last</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;healthz&quot;</span>:<span class=\"string\">&quot;ok&quot;</span>, <span class=\"string\">&quot;node_id&quot;</span>:<span class=\"string\">&quot;c57ce3d27e03&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结说明下：</p>\n<ul>\n<li>last一般写在server和if中，而break一般使用在location中;</li>\n<li>last不终止<em>重写后</em>的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配;</li>\n<li>break和last都能组织继续执行后面的rewrite指令;</li>\n</ul>\n<h3 id=\"redirect和permanent区别\"><a href=\"#redirect和permanent区别\" class=\"headerlink\" title=\"redirect和permanent区别\"></a>redirect和permanent区别</h3><p><code>redirect会返回带有302代码的临时重定向</code></p>\n<p><code>permanent会返回带有301代码的永久重定向</code></p>\n<p>配置文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/break</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /healthz/ <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/last</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /healthz/ <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"section\">location</span> /healthz &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;healthz&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/redirect</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/redirect</span> https://fanq.ren/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/permanent</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/permanent</span> https://fanq.ren/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>假设我们在页面上访问url是<a href=\"http://fanq.ren/redirect%EF%BC%8C%E6%A0%B9%E6%8D%AEnginx%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%E7%AC%AC%E5%9B%9B%E4%B8%AA%E4%B8%AAlocation%EF%BC%8C%E4%BC%9A%E9%87%8D%E5%86%99url%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%60302%60%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81%EF%BC%8C%E9%87%8D%E5%86%99%E5%90%8E%E7%9A%84url%E6%98%AFhttps://fanq.ren/%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%EF%BC%8C\">http://fanq.ren/redirect，根据nginx匹配规则会匹配到第四个个location，会重写url，返回一个带有`302`状态代码，重写后的url是https://fanq.ren/，浏览器会重定向到这个网址，</a> 当我们再次访问<a href=\"http://fanq.ren/redirect%EF%BC%8Cnginx%E8%BF%98%E6%98%AF%E4%BC%9A%E5%85%88%E5%8C%B9%E9%85%8D%E5%86%8D%E6%9B%BF%E6%8D%A2%E7%84%B6%E5%90%8E%E9%87%8D%E5%AE%9A%E5%90%91%E3%80%82\">http://fanq.ren/redirect，nginx还是会先匹配再替换然后重定向。</a></p>\n<p>通过浏览器发送请求redirect，浏览器请求信息如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">General</span><br><span class=\"line\">Request URL: http://fanq.ren/redirect</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 302 Moved Temporarily</span><br><span class=\"line\">Remote Address: 192.168.8.11:80</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br><span class=\"line\">---</span><br><span class=\"line\">Response Headers</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Length: 145</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Date: Tue, 27 Sep 2022 08:04:27 GMT</span><br><span class=\"line\">Location: https://fanq.ren/</span><br><span class=\"line\">Server: nginx/1.23.1</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果在页面上输入<a href=\"http://fanq.ren/permanent%EF%BC%8C%E6%A0%B9%E6%8D%AEnginx%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%E7%AC%AC%E4%BA%94%E4%B8%AAlocation%EF%BC%8C%E4%BC%9A%E9%87%8D%E5%86%99url%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%60301%60%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%8C%E9%87%8D%E5%86%99%E5%90%8E%E7%9A%84url%E6%98%AFhttps://fanq.ren/%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E9%87%8D%E6%96%B0%E5%AE%9A%E5%90%91%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%EF%BC%8C\">http://fanq.ren/permanent，根据nginx匹配规则会匹配到第五个location，会重写url，返回一个带有`301`状态码，重写后的url是https://fanq.ren/，浏览器会重新定向到这个网址，</a> 当我们再次访问<a href=\"http://fanq.ren/permanent%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E5%9C%A8%E7%BB%8F%E8%BF%87nginx%EF%BC%8C%E8%80%8C%E6%98%AF%E7%9B%B4%E6%8E%A5%E6%9C%89%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%E3%80%82\">http://fanq.ren/permanent，这个时候浏览器根本不会在经过nginx，而是直接有浏览器重定向到这个网址。</a></p>\n<p>通过浏览器发送请求permanent，浏览器请求信息如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">General</span><br><span class=\"line\">Request URL: http://fanq.ren/permanent</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 301 Moved Permanently</span><br><span class=\"line\">Remote Address: 192.168.8.11:80</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br><span class=\"line\">---</span><br><span class=\"line\">Response Headers</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Length: 169</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Date: Tue, 27 Sep 2022 08:07:45 GMT</span><br><span class=\"line\">Location: https://fanq.ren/</span><br><span class=\"line\">Server: nginx/1.23.1</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h1><table>\n<thead>\n<tr>\n<th align=\"left\">变量名</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$args</td>\n<td align=\"left\">这个变量等于请求行中的参数，同$query_string</td>\n</tr>\n<tr>\n<td align=\"left\">$content_length</td>\n<td align=\"left\">请求头中的Content-length字段</td>\n</tr>\n<tr>\n<td align=\"left\">$content_type</td>\n<td align=\"left\">请求头中的Content-Type字段</td>\n</tr>\n<tr>\n<td align=\"left\">$document_root</td>\n<td align=\"left\">当前请求在root指令中指定的值</td>\n</tr>\n<tr>\n<td align=\"left\">$host</td>\n<td align=\"left\">请求主机头字段，否则为服务器名称</td>\n</tr>\n<tr>\n<td align=\"left\">$http_user_agent</td>\n<td align=\"left\">客户端agent信息</td>\n</tr>\n<tr>\n<td align=\"left\">$http_cookie</td>\n<td align=\"left\">客户端cookie信息</td>\n</tr>\n<tr>\n<td align=\"left\">$limit_rate</td>\n<td align=\"left\">这个变量可以限制连接速率</td>\n</tr>\n<tr>\n<td align=\"left\">$request_method</td>\n<td align=\"left\">客户端请求的动作，通常为GET或POST</td>\n</tr>\n<tr>\n<td align=\"left\">$remote_addr</td>\n<td align=\"left\">客户端的IP地址</td>\n</tr>\n<tr>\n<td align=\"left\">$remote_port</td>\n<td align=\"left\">客户端的端口</td>\n</tr>\n<tr>\n<td align=\"left\">$remote_user</td>\n<td align=\"left\">已经经过Auth Basic Module验证的用户名</td>\n</tr>\n<tr>\n<td align=\"left\">$request_filename</td>\n<td align=\"left\">当前请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td align=\"left\">$scheme</td>\n<td align=\"left\">HTTP方法（如http，https）</td>\n</tr>\n<tr>\n<td align=\"left\">$server_protocol</td>\n<td align=\"left\">请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1</td>\n</tr>\n<tr>\n<td align=\"left\">$server_addr</td>\n<td align=\"left\">服务器地址，在完成一次系统调用后可以确定这个值</td>\n</tr>\n<tr>\n<td align=\"left\">$server_name</td>\n<td align=\"left\">服务器名称</td>\n</tr>\n<tr>\n<td align=\"left\">$server_port</td>\n<td align=\"left\">请求到达服务器的端口号</td>\n</tr>\n<tr>\n<td align=\"left\">$request_uri</td>\n<td align=\"left\">包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”</td>\n</tr>\n<tr>\n<td align=\"left\">$uri</td>\n<td align=\"left\">不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”</td>\n</tr>\n<tr>\n<td align=\"left\">$document_uri</td>\n<td align=\"left\">与$uri相同</td>\n</tr>\n</tbody></table>\n<h1 id=\"if指令与全局变量使用\"><a href=\"#if指令与全局变量使用\" class=\"headerlink\" title=\"if指令与全局变量使用\"></a>if指令与全局变量使用</h1><p>if判断指令的语法</p>\n<blockquote>\n<p> if (condition) { … } </p>\n</blockquote>\n<p>对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p>\n<ul>\n<li><p>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</p>\n</li>\n<li><p>直接比较变量和内容时，使用&#x3D;或!&#x3D;</p>\n</li>\n<li><p>正则表达式匹配，*不区分大小写的匹配，!~区分大小写的不匹配 </p>\n</li>\n<li><p>-f和!-f用来判断是否存在文件 </p>\n</li>\n<li><p>-d和!-d用来判断是否存在目录</p>\n</li>\n<li><p>-e和!-e用来判断是否存在文件或目录</p>\n</li>\n<li><p>-x和!-x用来判断文件是否可执行</p>\n</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$http_user_agent</span> <span class=\"regexp\">~ MSIE)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /msie/<span class=\"variable\">$1</span> <span class=\"literal\">break</span>;</span><br><span class=\"line\">&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msie/目录下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$http_cookie</span> <span class=\"regexp\">~* &quot;id=([^</span>;]+)(?:;|$)&quot;) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$id</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\"> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = POST) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">405</span>;</span><br><span class=\"line\">&#125; //如果提交方法为POST，则返回状态405（<span class=\"attribute\">Method</span> not allowed）。return不能返回<span class=\"number\">301</span>,<span class=\"number\">302</span></span><br><span class=\"line\"></span><br><span class=\"line\">if (<span class=\"variable\">$slow</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_rate</span> <span class=\"number\">10k</span>;</span><br><span class=\"line\">&#125; //限速，$slow可以通过 <span class=\"attribute\">set</span> 指令设置</span><br><span class=\"line\"></span><br><span class=\"line\">if (!-f <span class=\"variable\">$request_filename</span>)&#123;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span>  http://127.0.0.1; </span><br><span class=\"line\">&#125; //如果请求的文件名不存在，则反向代理到<span class=\"attribute\">localhost</span> 。这里的<span class=\"literal\">break</span>也是停止rewrite检查</span><br><span class=\"line\"></span><br><span class=\"line\">if (<span class=\"variable\">$args</span> <span class=\"regexp\">~ post=140)</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> http://example.com/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125; //如果<span class=\"attribute\">query</span> string中包含<span class=\"string\">&quot;post=140&quot;</span>，永久重定向到example.com</span><br><span class=\"line\"></span><br><span class=\"line\">location <span class=\"regexp\">~* \\.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> <span class=\"literal\">blocked</span> www.jefflei.com www.leizhenfang.com;</span><br><span class=\"line\">    <span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125; //防盗链</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>valid_referers 指令详解</code></p>\n<p>该指令后面可以接 none blocked serevr_names string或者是正则表达式：</p>\n<ul>\n<li>none 代表没有referer</li>\n<li>blocked 代表有referer但是被防火墙或者是代理给去除了</li>\n<li>string或者正在表达式 用来匹配referer</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> <span class=\"literal\">blocked</span> server_names;</span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\"> \t\t<span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/</span> http://********.com/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong> 1.首先当我输入我要打开的网址的时候，因为是直接输入的没有referer所以匹配了valid_referers后面的none或者是blocked 所以invalid_referer值为0 所以不进行跳转. 当我是从这个网站里面的链接跳到该网站首页的时候 因为referer的值是肯定包含srever_names，所以匹配了server_names所以不进行跳转。</p>\n<p>2.当我从搜素引擎进去的时候因为referer字段类似于<a href=\"https://links.jianshu.com/go?to=http://www.google.com.hk/search\">www.google.com.hk/search</a>开始进行匹配 发现没有一个匹配，则此时会设置invalid_referer值为1 if语句成功执行，进行了跳转. 达到功能。</p>\n<p>为了方便验证，更改配置如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/break</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /healthz/ <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/last</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /healthz/ <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"section\">location</span> /healthz &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;healthz&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/redirect</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/redirect</span> https://fanq.ren/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/permanent</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/permanent</span> https://fanq.ren/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/test</span> &#123;</span><br><span class=\"line\">    \t\t<span class=\"attribute\">valid_referers</span> server_names;</span><br><span class=\"line\">\t\t\t  <span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">\t\t\t\t    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/</span> http://fanq.ren/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">\t\t\t  &#125;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;aaa&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器发送请求test，浏览器请求信息如下，说明if中的表达式为ture</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">General</span><br><span class=\"line\">Request URL: http://fanq.ren/test</span><br><span class=\"line\">Request Method: GET</span><br><span class=\"line\">Status Code: 302 Moved Temporarily</span><br><span class=\"line\">Remote Address: 192.168.8.11:80</span><br><span class=\"line\">Referrer Policy: strict-origin-when-cross-origin</span><br><span class=\"line\">---</span><br><span class=\"line\">Response Headers</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Length: 145</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Date: Tue, 27 Sep 2022 09:13:12 GMT</span><br><span class=\"line\">Location: http://fanq.ren/</span><br><span class=\"line\">Server: nginx/1.23.1</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"调试rewrite是否正确\"><a href=\"#调试rewrite是否正确\" class=\"headerlink\" title=\"调试rewrite是否正确\"></a>调试rewrite是否正确</h1><h2 id=\"开启rewrite-log\"><a href=\"#开启rewrite-log\" class=\"headerlink\" title=\"开启rewrite_log\"></a>开启rewrite_log</h2><p>nginx中要检测rewrite是否正确，就需要开启rewrite_log才能排错，rewrite_log会打印错误。检测完后，建议将rewrite_log关闭。</p>\n<blockquote>\n<p> rewrite_log Syntax: rewrite_log on | off; Default: rewrite_log off; Context: http, server, location, if</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/break</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /healthz/ <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/last</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /healthz/ <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"section\">location</span> /healthz &#123;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;healthz&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/redirect</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/redirect</span> https://fanq.ren/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/permanent</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/permanent</span> https://fanq.ren/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ ^/test</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attribute\">rewrite_log</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"attribute\">error_log</span> /var/log/nginx/rewrite.log <span class=\"literal\">notice</span>;</span><br><span class=\"line\">        <span class=\"attribute\">valid_referers</span> server_names;</span><br><span class=\"line\">        <span class=\"attribute\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">        \t\t<span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/</span> http://fanq.ren/ <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">        <span class=\"attribute\">default_type</span> application/json;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;aaa&quot;:&quot;ok&quot;, &quot;node_id&quot;:&quot;<span class=\"variable\">$hostname</span>&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过浏览器再次发送请求test，然后查看容器中的<code>/var/log/nginx/rewrite.log</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat /var/log/nginx/rewrite.log</span></span><br><span class=\"line\">2022/09/27 09:28:03 [notice] 30<span class=\"comment\">#30: *1 &quot;^/&quot; matches &quot;/test&quot;, client: 192.168.8.102, server: , request: &quot;GET /test HTTP/1.1&quot;, host: &quot;192.168.8.11&quot;</span></span><br><span class=\"line\">2022/09/27 09:28:03 [notice] 30<span class=\"comment\">#30: *1 rewritten redirect: &quot;http://fanq.ren/&quot;, client: 192.168.8.102, server: , request: &quot;GET /test HTTP/1.1&quot;, host: &quot;192.168.8.11&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"nginx-conf详解\"><a href=\"#nginx-conf详解\" class=\"headerlink\" title=\"nginx.conf详解\"></a>nginx.conf详解</h1><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">######Nginx配置文件nginx.conf中文详解#####</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义Nginx运行的用户和用户组</span></span><br><span class=\"line\"><span class=\"attribute\">user</span> www www;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span> /usr/local/nginx/logs/<span class=\"literal\">error</span>.log <span class=\"literal\">info</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程pid文件</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span> /usr/local/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定进程可以打开的最大描述符：数目</span></span><br><span class=\"line\"><span class=\"comment\">#工作模式与连接数上限</span></span><br><span class=\"line\"><span class=\"comment\">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class=\"line\"><span class=\"comment\">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class=\"line\"><span class=\"comment\">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class=\"line\"><span class=\"attribute\">worker_rlimit_nofile</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class=\"line\">    <span class=\"comment\">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class=\"line\">    <span class=\"comment\">#补充说明：</span></span><br><span class=\"line\">    <span class=\"comment\">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class=\"line\">    <span class=\"comment\">#A）标准事件模型</span></span><br><span class=\"line\">    <span class=\"comment\">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class=\"line\">    <span class=\"comment\">#B）高效事件模型</span></span><br><span class=\"line\">    <span class=\"comment\">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class=\"line\">    <span class=\"comment\">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class=\"line\">    <span class=\"comment\">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class=\"line\">    <span class=\"comment\">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class=\"line\">    <span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class=\"line\">    <span class=\"comment\">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span> <span class=\"number\">65535</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive超时时间。</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class=\"line\">    <span class=\"comment\">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class=\"line\">    <span class=\"comment\">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class=\"line\">    <span class=\"comment\">#4096</span></span><br><span class=\"line\">    <span class=\"comment\">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class=\"line\">    <span class=\"attribute\">client_header_buffer_size</span> <span class=\"number\">4k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class=\"line\">    <span class=\"attribute\">open_file_cache</span> max=<span class=\"number\">65535</span> inactive=<span class=\"number\">60s</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class=\"line\">    <span class=\"comment\">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class=\"line\">    <span class=\"attribute\">open_file_cache_valid</span> <span class=\"number\">80s</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class=\"line\">    <span class=\"comment\">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class=\"line\">    <span class=\"attribute\">open_file_cache_min_uses</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span></span><br><span class=\"line\">    <span class=\"attribute\">open_file_cache_errors</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class=\"line\"><span class=\"section\">http</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">#文件扩展名与文件类型映射表</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#默认文件类型</span></span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#默认编码</span></span><br><span class=\"line\">    <span class=\"comment\">#charset utf-8;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#服务器名字的hash表大小</span></span><br><span class=\"line\">    <span class=\"comment\">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class=\"line\">    <span class=\"attribute\">server_names_hash_bucket_size</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class=\"line\">    <span class=\"attribute\">client_header_buffer_size</span> <span class=\"number\">32k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class=\"line\">    <span class=\"attribute\">large_client_header_buffers</span> <span class=\"number\">4</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#设定通过nginx上传文件的大小</span></span><br><span class=\"line\">    <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">8m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class=\"line\">    <span class=\"comment\">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class=\"line\">    <span class=\"attribute\">autoindex</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#长连接超时时间，单位是秒</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">120</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_send_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_buffer_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_buffers</span> <span class=\"number\">4</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_busy_buffers_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_temp_file_write_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip模块设置</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; <span class=\"comment\">#开启gzip压缩输出</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;    <span class=\"comment\">#最小压缩文件大小</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16k</span>;    <span class=\"comment\">#压缩缓冲区</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">0</span>;    <span class=\"comment\">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>;    <span class=\"comment\">#压缩等级</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class=\"comment\">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class=\"line\">    <span class=\"attribute\">gzip_vary</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#开启限制IP连接数的时候需要使用</span></span><br><span class=\"line\">    <span class=\"comment\">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#负载均衡配置</span></span><br><span class=\"line\">    <span class=\"section\">upstream</span> jh.w3cschool.cn &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.121:80</span> weight=<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.122:80</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">192.168.80.123:80</span> weight=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#nginx的upstream目前支持4种方式的分配</span></span><br><span class=\"line\">        <span class=\"comment\">#1、轮询（默认）</span></span><br><span class=\"line\">        <span class=\"comment\">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class=\"line\">        <span class=\"comment\">#2、weight</span></span><br><span class=\"line\">        <span class=\"comment\">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class=\"line\">        <span class=\"comment\">#例如：</span></span><br><span class=\"line\">        <span class=\"comment\">#upstream bakend &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 192.168.0.14 weight=10;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 192.168.0.15 weight=10;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#2、ip_hash</span></span><br><span class=\"line\">        <span class=\"comment\">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class=\"line\">        <span class=\"comment\">#例如：</span></span><br><span class=\"line\">        <span class=\"comment\">#upstream bakend &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    ip_hash;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 192.168.0.14:88;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 192.168.0.15:80;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#3、fair（第三方）</span></span><br><span class=\"line\">        <span class=\"comment\">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class=\"line\">        <span class=\"comment\">#upstream backend &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server server1;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server server2;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fair;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#4、url_hash（第三方）</span></span><br><span class=\"line\">        <span class=\"comment\">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class=\"line\">        <span class=\"comment\">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class=\"line\">        <span class=\"comment\">#upstream backend &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server squid1:3128;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server squid2:3128;</span></span><br><span class=\"line\">        <span class=\"comment\">#    hash $request_uri;</span></span><br><span class=\"line\">        <span class=\"comment\">#    hash_method crc32;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#tips:</span></span><br><span class=\"line\">        <span class=\"comment\">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    ip_hash;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 127.0.0.1:9090 down;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 127.0.0.1:6060;</span></span><br><span class=\"line\">        <span class=\"comment\">#    server 127.0.0.1:7070 backup;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#每个设备的状态设置为:</span></span><br><span class=\"line\">        <span class=\"comment\">#1.down表示单前的server暂时不参与负载</span></span><br><span class=\"line\">        <span class=\"comment\">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class=\"line\">        <span class=\"comment\">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class=\"line\">        <span class=\"comment\">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class=\"line\">        <span class=\"comment\">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class=\"line\">        <span class=\"comment\">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class=\"line\">        <span class=\"comment\">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class=\"line\">        <span class=\"comment\">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">#虚拟主机的配置</span></span><br><span class=\"line\">    <span class=\"section\">server</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">#监听端口</span></span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#域名可以有多个，用空格隔开</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.w3cschool.cn w3cschool.cn;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /data/www/w3cschool;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#对******进行负载均衡</span></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .*.(php|php5)?$</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">            <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">            <span class=\"attribute\">include</span> fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#图片缓存时间设置</span></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">10d</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#JS和CSS缓存时间设置</span></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .*.(js|css)?$</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#日志格式设定</span></span><br><span class=\"line\">        <span class=\"comment\">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class=\"line\">        <span class=\"comment\">#$remote_user：用来记录客户端用户名称；</span></span><br><span class=\"line\">        <span class=\"comment\">#$time_local： 用来记录访问时间与时区；</span></span><br><span class=\"line\">        <span class=\"comment\">#$request： 用来记录请求的url与http协议；</span></span><br><span class=\"line\">        <span class=\"comment\">#$status： 用来记录请求状态；成功是200，</span></span><br><span class=\"line\">        <span class=\"comment\">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class=\"line\">        <span class=\"comment\">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class=\"line\">        <span class=\"comment\">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class=\"line\">        <span class=\"comment\">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class=\"line\">        <span class=\"attribute\">log_format</span> access <span class=\"string\">&#x27;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] &quot;<span class=\"variable\">$request</span>&quot; &#x27;</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> &quot;<span class=\"variable\">$http_referer</span>&quot; &#x27;</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&quot;<span class=\"variable\">$http_user_agent</span>&quot; <span class=\"variable\">$http_x_forwarded_for</span>&#x27;</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#定义本虚拟主机的访问日志</span></span><br><span class=\"line\">        <span class=\"attribute\">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class=\"line\">        <span class=\"attribute\">access_log</span>  /usr/local/nginx/logs/host.access.<span class=\"number\">404</span>.log  log404;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#对 &quot;/&quot; 启用反向代理</span></span><br><span class=\"line\">        <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:88;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">             </span><br><span class=\"line\">            <span class=\"comment\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">             </span><br><span class=\"line\">            <span class=\"comment\">#以下是一些反向代理的配置，可选。</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#允许客户端请求的最大单文件字节数</span></span><br><span class=\"line\">            <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">10m</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class=\"line\">            <span class=\"comment\">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class=\"line\">            <span class=\"comment\">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class=\"line\">            <span class=\"attribute\">client_body_buffer_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_intercept_errors</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class=\"line\">            <span class=\"comment\">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_connect_timeout</span> <span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class=\"line\">            <span class=\"comment\">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_send_timeout</span> <span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class=\"line\">            <span class=\"comment\">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_read_timeout</span> <span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class=\"line\">            <span class=\"comment\">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">4k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class=\"line\">            <span class=\"comment\">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">4</span> <span class=\"number\">32k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_busy_buffers_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class=\"line\">            <span class=\"comment\">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_temp_file_write_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#设定查看Nginx状态的地址</span></span><br><span class=\"line\">        <span class=\"section\">location</span> /NginxStatus &#123;</span><br><span class=\"line\">            <span class=\"attribute\">stub_status</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">            <span class=\"attribute\">access_log</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">            <span class=\"attribute\">auth_basic</span> <span class=\"string\">&quot;NginxStatus&quot;</span>;</span><br><span class=\"line\">            <span class=\"attribute\">auth_basic_user_file</span> confpasswd;</span><br><span class=\"line\">            <span class=\"comment\">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#本地动静分离反向代理配置</span></span><br><span class=\"line\">        <span class=\"comment\">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span></span><br><span class=\"line\">        pdf|xls|mp3|wma)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">15d</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"section\">location</span> <span class=\"regexp\">~ .*.(js|css)?$</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">######Nginx配置文件nginx.conf中文详解#####</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Nginx"],"tags":["Nginx"]},{"title":"初级爬虫练手01","url":"/2022/01/04/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B01/","content":"<h1 id=\"豆瓣电影-Top-250\"><a href=\"#豆瓣电影-Top-250\" class=\"headerlink\" title=\"豆瓣电影 Top 250\"></a>豆瓣电影 Top 250</h1><p>使用正则表达式来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备heater</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">lits = [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;year&quot;</span>, <span class=\"string\">&quot;country&quot;</span>, <span class=\"string\">&quot;category&quot;</span>, <span class=\"string\">&quot;score&quot;</span>, <span class=\"string\">&quot;number&quot;</span>, <span class=\"string\">&quot;quote&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 准备文件</span></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;豆瓣电影 Top 250.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">csvwriter = csv.writer(f)</span><br><span class=\"line\"><span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">csvwriter.writerow([<span class=\"string\">&quot;电影名称&quot;</span>, <span class=\"string\">&quot;年份&quot;</span>, <span class=\"string\">&quot;国家&quot;</span>, <span class=\"string\">&quot;分类&quot;</span>, <span class=\"string\">&quot;评分&quot;</span>, <span class=\"string\">&quot;评分人数&quot;</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> uri <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">250</span>, <span class=\"number\">25</span>):</span><br><span class=\"line\">    url = <span class=\"string\">f&quot;https://movie.douban.com/top250?start=<span class=\"subst\">&#123;uri&#125;</span>&quot;</span></span><br><span class=\"line\">    resp = requests.get(url, headers=headers)</span><br><span class=\"line\">    resp.encoding = <span class=\"string\">&quot;utf-8&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备正则匹配</span></span><br><span class=\"line\">    obj = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;&lt;/span&gt;.*?&lt;p class=&quot;&quot;&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp;/&amp;nbsp;(?P&lt;country&gt;.*?)&amp;nbsp;/&amp;nbsp;(?P&lt;category&gt;.*?)&lt;/p&gt;&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;.*?&lt;div class=&quot;star&quot;&gt;.*?&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;&lt;span&gt;(?P&lt;number&gt;.*?)人评价&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">    result = obj.finditer(resp.text)</span><br><span class=\"line\">    <span class=\"comment\"># 循环格式化数据，并且写入文件中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        dic = it.groupdict()</span><br><span class=\"line\">        dic[<span class=\"string\">&#x27;year&#x27;</span>] = dic[<span class=\"string\">&#x27;year&#x27;</span>].strip()</span><br><span class=\"line\">        dic[<span class=\"string\">&#x27;category&#x27;</span>] = dic[<span class=\"string\">&#x27;category&#x27;</span>].strip()</span><br><span class=\"line\">        csvwriter.writerow(dic.values())</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;写入完成。。。&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"PostgreSQL","url":"/2024/06/24/PostgreSQL/PostgreSQL/","content":"<h1 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h1>","categories":["PostgreSQL"],"tags":["PostgreSQL"]},{"title":"初级爬虫练手02","url":"/2022/01/04/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B02/","content":"<h1 id=\"彼岸网4K动漫图片\"><a href=\"#彼岸网4K动漫图片\" class=\"headerlink\" title=\"彼岸网4K动漫图片\"></a>彼岸网4K动漫图片</h1><p>使用BeautifulSoup来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">child_domin = <span class=\"string\">&quot;https://pic.netbian.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page_index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">162</span>):</span><br><span class=\"line\">    domain = <span class=\"string\">f&quot;https://pic.netbian.com/4kdongman/index_<span class=\"subst\">&#123;page_index&#125;</span>.html&quot;</span></span><br><span class=\"line\">    resp = requests.get(domain)</span><br><span class=\"line\">    resp.encoding = <span class=\"string\">&quot;gbk&quot;</span>  <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    page = resp.text</span><br><span class=\"line\">    <span class=\"comment\"># 解析page的内容</span></span><br><span class=\"line\">    context = BeautifulSoup(page, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取页面中的缩略图的路径</span></span><br><span class=\"line\">    aList = context.find(<span class=\"string\">&quot;ul&quot;</span>, class_=<span class=\"string\">&quot;clearfix&quot;</span>).find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取跳转页面的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> aList:</span><br><span class=\"line\">        child_url = child_domin + a.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取跳转后的页面源码</span></span><br><span class=\"line\">        child_resp = requests.get(child_url)</span><br><span class=\"line\">        child_resp.encoding = <span class=\"string\">&quot;gbk&quot;</span>  <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">        child_page = child_resp.text</span><br><span class=\"line\">        <span class=\"comment\"># 解析二级页面获取到真正的图片的url</span></span><br><span class=\"line\">        child_context = BeautifulSoup(child_page, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取uri</span></span><br><span class=\"line\">        img_uri = child_context.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;photo-pic&quot;</span>).find(<span class=\"string\">&quot;img&quot;</span>).get(<span class=\"string\">&quot;src&quot;</span>)</span><br><span class=\"line\">        img_url = child_domin + img_uri</span><br><span class=\"line\">        img_resp = requests.get(img_url)</span><br><span class=\"line\">        img_name = img_url.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 下载图片 并将图片写入文件夹内</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;img/&quot;</span> + img_name, mode=<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(img_resp.content)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;over!!!&quot;</span>, img_name)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;all over!!!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"Nginx的安装","url":"/2022/09/20/Nginx/Nginx%E5%AE%89%E8%A3%85/","content":"<h1 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class=\"line\"><span class=\"comment\"># 安装wget工具</span></span><br><span class=\"line\">yum -y install wget </span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.21.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压到当前文件夹</span></span><br><span class=\"line\">tar -xvf nginx-1.21.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入到nginx目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx-1.21.4</span><br><span class=\"line\"><span class=\"comment\"># 添加模块(可以通过http请求来查看nginx状态)</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改默认配置文件\"><a href=\"#修改默认配置文件\" class=\"headerlink\" title=\"修改默认配置文件\"></a>修改默认配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       81; # 修改默认端口</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t# 新增查看nginx状态接口</span><br><span class=\"line\">\t\tlocation /ngx_status &#123;</span><br><span class=\"line\">\t\t    stub_status on;</span><br><span class=\"line\">\t\t    access_log off;</span><br><span class=\"line\">\t\t   #allow 127.0.0.1;</span><br><span class=\"line\">\t\t   #deny all;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>检查配置文件</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx  -t</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h1><p>执行命令启动nginx</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"comment\"># 如果修改配置文件后可以重新加载</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"检查nginx的状态\"><a href=\"#检查nginx的状态\" class=\"headerlink\" title=\"检查nginx的状态\"></a>检查nginx的状态</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行命令查看</span></span><br><span class=\"line\">curl http://127.0.0.1:81/ngx_status</span><br><span class=\"line\"><span class=\"comment\">###执行结果 </span></span><br><span class=\"line\">Active connections: 1 </span><br><span class=\"line\">server accepts handled requests</span><br><span class=\"line\"> 3 3 5 </span><br><span class=\"line\">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置nginx环境变量\"><a href=\"#配置nginx环境变量\" class=\"headerlink\" title=\"配置nginx环境变量\"></a>配置nginx环境变量</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑环境变量配置文件</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在末尾追加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 测试命令</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"><span class=\"comment\">###执行结果</span></span><br><span class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置环境变量后的命令\"><a href=\"#配置环境变量后的命令\" class=\"headerlink\" title=\"配置环境变量后的命令\"></a>配置环境变量后的命令</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">nginx</span><br><span class=\"line\"><span class=\"comment\"># 退出命令</span></span><br><span class=\"line\">nginx -s quit/stop</span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Nginx"],"tags":["Nginx"]},{"title":"初级爬虫练手04","url":"/2022/01/04/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B04/","content":"<h1 id=\"网易云音乐热评\"><a href=\"#网易云音乐热评\" class=\"headerlink\" title=\"网易云音乐热评\"></a>网易云音乐热评</h1><p>主要是网易使用js来加密请求数据，他们会定期修改方法函数和隐藏请求体，需要花费时间进行追踪和解密加密方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">js中赋值的方法</span></span><br><span class=\"line\"><span class=\"string\"> e9f.data = j9a.cq9h(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                params: bVj0x.encText,</span></span><br><span class=\"line\"><span class=\"string\">                encSecKey: bVj0x.encSecKey</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">js中加密请求数据的方法  </span></span><br><span class=\"line\"><span class=\"string\">    获取一个随机的字符串          </span></span><br><span class=\"line\"><span class=\"string\">    function a(a) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">        for (d = 0; a &gt; d; d += 1)</span></span><br><span class=\"line\"><span class=\"string\">            e = Math.random() * b.length,</span></span><br><span class=\"line\"><span class=\"string\">            e = Math.floor(e),</span></span><br><span class=\"line\"><span class=\"string\">            c += b.charAt(e);</span></span><br><span class=\"line\"><span class=\"string\">        return c</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    使用AES就行对称加密</span></span><br><span class=\"line\"><span class=\"string\">    function b(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var c = CryptoJS.enc.Utf8.parse(b) b=0CoJUm6Qyw8W8jud</span></span><br><span class=\"line\"><span class=\"string\">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class=\"line\"><span class=\"string\">          , e = CryptoJS.enc.Utf8.parse(a) a=传入的数据 </span></span><br><span class=\"line\"><span class=\"string\">          , f = CryptoJS.AES.encrypt(e, c, &#123;</span></span><br><span class=\"line\"><span class=\"string\">            iv: d,</span></span><br><span class=\"line\"><span class=\"string\">            mode: CryptoJS.mode.CBC</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">        return f.toString()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    使用RSA非对称加密</span></span><br><span class=\"line\"><span class=\"string\">    function c(a, b, c) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var d, e;</span></span><br><span class=\"line\"><span class=\"string\">        return setMaxDigits(131),</span></span><br><span class=\"line\"><span class=\"string\">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class=\"line\"><span class=\"string\">        e = encryptedString(d, a)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    真正的加密方法</span></span><br><span class=\"line\"><span class=\"string\">    function d(d, e, f, g) &#123; ) </span></span><br><span class=\"line\"><span class=\"string\">        var h = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          , i = a(16); 是一个16位的字符串 &quot;8nPYfHhrGEIu5JjP&quot;</span></span><br><span class=\"line\"><span class=\"string\">        return h.encText = b(d, g),</span></span><br><span class=\"line\"><span class=\"string\">        h.encText = b(h.encText, i),</span></span><br><span class=\"line\"><span class=\"string\">        h.encSecKey = c(i, e, f),</span></span><br><span class=\"line\"><span class=\"string\">        h</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;rid&quot;</span>: <span class=\"string\">&quot;R_SO_4_569213220&quot;</span>, <span class=\"comment\"># 歌曲对应的id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;threadId&quot;</span>: <span class=\"string\">&quot;R_SO_4_569213220&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pageNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"string\">&quot;20&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cursor&quot;</span>: <span class=\"string\">&quot;-1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;offset&quot;</span>: <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;orderType&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;csrf_token&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 用来加密data用的参数</span></span><br><span class=\"line\">f = <span class=\"string\">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&quot;</span></span><br><span class=\"line\">g = <span class=\"string\">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class=\"line\">i = <span class=\"string\">&quot;8nPYfHhrGEIu5JjP&quot;</span></span><br><span class=\"line\">e = <span class=\"string\">&quot;010001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于i可以debug获取到，所以d方法中的c方法最终的结果就是一个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_encSecKey</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;73e99ee217cdb4d07b6947635c74047bff778823dd433ab870e0f11c2e7056add7bf7a4daf7c598f96192e5559c17ceee8d267fe7e9121511d224e8b74138b49e94e9983768e75641adccbda73b5b9d9b5809a82277dc017ed4f557561bdaab8b80cfed70a84538c2dbf02a637c462b842c0f7fa2443589a85395d99aaff22c3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加密过程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc_params</span>(<span class=\"params\">data, key</span>):</span><br><span class=\"line\">    iv = <span class=\"string\">&quot;0102030405060708&quot;</span></span><br><span class=\"line\">    data = to_16(data)</span><br><span class=\"line\">    aes = AES.new(key=key.encode(<span class=\"string\">&quot;utf-8&quot;</span>), IV=iv.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class=\"comment\"># 创建加密器</span></span><br><span class=\"line\">    bs = aes.encrypt(data.encode(<span class=\"string\">&quot;utf-8&quot;</span>))  <span class=\"comment\"># 加密, 加密的内容的长度必须是16的倍数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(b64encode(bs), <span class=\"string\">&quot;utf-8&quot;</span>)  <span class=\"comment\"># 转化成字符串返回,</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">param = <span class=\"string\">&quot;QKjNbInsQdG7ignRVvh+DrvYYtPrFNeMMMdriP7RWLRSG3Pgbj1/Rk39K+BpukpSwbFY9JIkmWGBAxCW2WLlkDtI0aP0S9JodTb4YX8wLOsTB/+I6XVIHtAKd204b4wGYFtspC6oYK147otyETw9qe+HsMpYA3ZkawcTxqrx1+ns4Kh5mgra2IFlaKDw9jGRG4m5tPKGItxNOjBf0awMfkUYHJqCqzd/Ed2KsH6X8sbgthlDzMvn8Qz+6REbmpxy1GOVuPWmZKVPAFFjNFuqpHEPfZxUduV8xp35go+d44A=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化成16的倍数, 位下方的加密算法服务</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">to_16</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    pad = <span class=\"number\">16</span> - <span class=\"built_in\">len</span>(data) % <span class=\"number\">16</span></span><br><span class=\"line\">    data += <span class=\"built_in\">chr</span>(pad) * pad</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把参数进行加密</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_params</span>(<span class=\"params\">data</span>):  <span class=\"comment\"># 默认这里接收到的是字符串</span></span><br><span class=\"line\">    first = enc_params(data, g)</span><br><span class=\"line\">    second = enc_params(first, i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> second  <span class=\"comment\"># 返回的就是params</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 时间戳转成时间</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">timeStamp</span>(<span class=\"params\">timeNum</span>):</span><br><span class=\"line\">    timeStamp = <span class=\"built_in\">float</span>(timeNum/<span class=\"number\">1000</span>)</span><br><span class=\"line\">    timeArray = time.localtime(timeStamp)</span><br><span class=\"line\">    otherStyleTime = time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> otherStyleTime</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    resp = requests.post(url, data=&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class=\"line\">        <span class=\"string\">&quot;encSecKey&quot;</span>: get_encSecKey()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp.json()[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;hotComments&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 准备文件</span></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;网易云音乐热评.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    csvwriter = csv.writer(f)</span><br><span class=\"line\">    <span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">    csvwriter.writerow([<span class=\"string\">&quot;昵称&quot;</span>, <span class=\"string\">&quot;热评&quot;</span>, <span class=\"string\">&quot;点赞数&quot;</span>, <span class=\"string\">&quot;评论时间&quot;</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">    hotComments = get_data()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> hotComment <span class=\"keyword\">in</span> hotComments:</span><br><span class=\"line\">        csvwriter.writerow([hotComment[<span class=\"string\">&quot;user&quot;</span>][<span class=\"string\">&quot;nickname&quot;</span>],hotComment[<span class=\"string\">&quot;content&quot;</span>],hotComment[<span class=\"string\">&quot;likedCount&quot;</span>],timeStamp(hotComment[<span class=\"string\">&quot;time&quot;</span>])])</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"rancher管理k8s","url":"/2024/07/08/Rancher/rancher%E7%AE%A1%E7%90%86k8s/","content":"<h1 id=\"初始化rke2集群\"><a href=\"#初始化rke2集群\" class=\"headerlink\" title=\"初始化rke2集群\"></a>初始化rke2集群</h1><h2 id=\"新建4台Ubuntu24\"><a href=\"#新建4台Ubuntu24\" class=\"headerlink\" title=\"新建4台Ubuntu24\"></a>新建4台Ubuntu24</h2><p>设置每台vm的hostname</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname master-node</span><br><span class=\"line\">hostnamectl set-hostname worker-node-01</span><br><span class=\"line\">hostnamectl set-hostname worker-node-02</span><br><span class=\"line\">hostnamectl set-hostname devops</span><br></pre></td></tr></table></figure>\n\n<p>由于vm是复制出来的，需要重新生成机器码并重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/machine-id</span><br><span class=\"line\">systemd-machine-id-setup</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"安装master的rke2\"><a href=\"#安装master的rke2\" class=\"headerlink\" title=\"安装master的rke2\"></a>安装master的rke2</h2><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://get.rke2.io |  INSTALL_RKE2_VERSION=v1.30.1+rke2r1 sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n<p>安装程序后：</p>\n<ul>\n<li><code>rke2-server</code> 服务将被安装。<code>rke2-server</code> 服务将被配置为在节点重启后或进程崩溃或被杀时自动重启。</li>\n<li>其他的实用程序将被安装在<code>/var/lib/rancher/rke2/bin/</code>。它们包括 <code>kubectl</code>, <code>crictl</code>, 和 <code>ctr</code>. 注意，这些东西默认不在你的路径上。</li>\n<li>还有两个清理脚本会安装到 <code>/usr/local/bin/rke2</code> 的路径上。它们是 <code>rke2-killall.sh</code>和<code>rke2-uninstall.sh</code>。</li>\n<li>一个 <a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\">kubeconfig</a> 文件将被写入<code>/etc/rancher/rke2/rke2.yaml</code>。</li>\n<li>一个可用于注册其他 server 或 agent 节点的令牌将在 <code>/var/lib/rancher/rke2/server/node-token</code> 文件中创建。</li>\n</ul>\n<h2 id=\"安装node01的rke2\"><a href=\"#安装node01的rke2\" class=\"headerlink\" title=\"安装node01的rke2\"></a>安装node01的rke2</h2><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=<span class=\"string\">&quot;agent&quot;</span> INSTALL_RKE2_VERSION=v1.30.1+rke2r1 sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">server: https://192.168.121.202:9345</span><br><span class=\"line\">token: K104ef6c38212b6b606595dec8f75fe0d51d530bed461375fb2f1fcbbf9a1d1ecb9::server:07a20527579a6d49cca4f50f9d6b0372</span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装node02的rke2\"><a href=\"#安装node02的rke2\" class=\"headerlink\" title=\"安装node02的rke2\"></a>安装node02的rke2</h2><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=<span class=\"string\">&quot;agent&quot;</span> INSTALL_RKE2_VERSION=v1.30.1+rke2r1 sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">server: https://192.168.121.202:9345</span><br><span class=\"line\">token: K104ef6c38212b6b606595dec8f75fe0d51d530bed461375fb2f1fcbbf9a1d1ecb9::server:07a20527579a6d49cca4f50f9d6b0372</span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n\n\n<p>等待安装完成在任意master上执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@master-node:~<span class=\"comment\"># /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes -o wide</span></span><br><span class=\"line\">NAME             STATUS   ROLES                       AGE   VERSION          INTERNAL-IP       EXTERNAL-IP   OS-IMAGE           KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class=\"line\">master-node      Ready    control-plane,etcd,master   20h   v1.30.1+rke2r1   192.168.121.202   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">worker-node-01   Ready    &lt;none&gt;                      20h   v1.30.1+rke2r1   192.168.121.203   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">worker-node-02   Ready    &lt;none&gt;                      20h   v1.30.1+rke2r1   192.168.121.204   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">root@master-node:~<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接集群\"><a href=\"#连接集群\" class=\"headerlink\" title=\"连接集群\"></a>连接集群</h2><p>安装kubectl</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -LO <span class=\"string\">&quot;https://dl.k8s.io/release/<span class=\"subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> kubectl /usr/bin/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/kubectl</span><br></pre></td></tr></table></figure>\n\n<p>初始化kubeconfig</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.kube</span><br><span class=\"line\"><span class=\"comment\">#将master中的/etc/rancher/rke2/rke2.yaml中的内容复制到 ~/.kube/config中,并且更改api server的url为master的ip</span></span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get node -owide</span></span><br><span class=\"line\">NAME             STATUS   ROLES                       AGE   VERSION          INTERNAL-IP       EXTERNAL-IP   OS-IMAGE           KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class=\"line\">master-node      Ready    control-plane,etcd,master   20h   v1.30.1+rke2r1   192.168.121.202   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">worker-node-01   Ready    &lt;none&gt;                      20h   v1.30.1+rke2r1   192.168.121.203   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">worker-node-02   Ready    &lt;none&gt;                      20h   v1.30.1+rke2r1   192.168.121.204   &lt;none&gt;        Ubuntu 24.04 LTS   6.8.0-36-generic   containerd://1.7.11-k3s2</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署rancher\"><a href=\"#部署rancher\" class=\"headerlink\" title=\"部署rancher\"></a>部署rancher</h1><h2 id=\"部署rancher-1\"><a href=\"#部署rancher-1\" class=\"headerlink\" title=\"部署rancher\"></a>部署rancher</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rancher镜像已经同步到自己的私有镜像仓库</span></span><br><span class=\"line\">docker run -d --restart=unless-stopped \\</span><br><span class=\"line\">  --name rancher \\</span><br><span class=\"line\">  -p 80:80 -p 443:443 \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  dockerhub.qingcloud.com/doubao/rancher:latest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入现有k8s集群\"><a href=\"#导入现有k8s集群\" class=\"headerlink\" title=\"导入现有k8s集群\"></a>导入现有k8s集群</h2><p>启动完成后，ui登录后，导入现有集群，选项标准k8s即可，导入成功后的Clusters会显示新的集群</p>\n<img src=\"/2024/07/08/Rancher/rancher%E7%AE%A1%E7%90%86k8s/image-20240708103042614.png\" class title=\"rancher\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Rancher"],"tags":["Rancher"]},{"title":"初级爬虫练手03","url":"/2022/01/04/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B03/","content":"<h1 id=\"电影天堂\"><a href=\"#电影天堂\" class=\"headerlink\" title=\"电影天堂\"></a>电影天堂</h1><p>使用正则表达式来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备url</span></span><br><span class=\"line\">domian = <span class=\"string\">&quot;https://www.dytt89.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备heater</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resp = requests.get(domian, headers=headers)</span><br><span class=\"line\"><span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">resp.encoding = <span class=\"string\">&quot;gb2312&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取首页中2021必看热片的跳转连接</span></span><br><span class=\"line\">obj = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;2021必看热片.*?&lt;ul&gt;.*?&lt;li&gt;&lt;a href=&#x27;(?P&lt;uris&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class=\"line\">result = obj.finditer(resp.text)</span><br><span class=\"line\"><span class=\"comment\"># 获取a标签中的href连接</span></span><br><span class=\"line\">href = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;&lt;li&gt;&lt;a href=&#x27;(?P&lt;uri&gt;.*?)&#x27;&quot;</span>, re.S)</span><br><span class=\"line\"><span class=\"comment\"># 循环构造完整连接</span></span><br><span class=\"line\">data = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;◎片　　名(?P&lt;movie&gt;.*?)&lt;br /&gt;.*?&lt;td &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">r&#x27;style=&quot;WORD-WRAP: break-word&quot; bgcolor=&quot;#fdfddf&quot;&gt;&lt;a href=&quot;(?P&lt;download&gt;.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;电影天堂必看热片.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">csvwriter = csv.writer(f)</span><br><span class=\"line\"><span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">csvwriter.writerow([<span class=\"string\">&quot;电影名称&quot;</span>, <span class=\"string\">&quot;下载连接&quot;</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    uris = href.finditer(it.group(<span class=\"string\">&quot;uris&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> uri <span class=\"keyword\">in</span> uris:</span><br><span class=\"line\">        url = domian + uri.group(<span class=\"string\">&quot;uri&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 在从urls中循环获取二级页面内的下载路径</span></span><br><span class=\"line\">        child_resp = requests.get(url, headers=headers)</span><br><span class=\"line\">        child_resp.encoding = <span class=\"string\">&quot;gb2312&quot;</span></span><br><span class=\"line\">        result_data = data.search(child_resp.text)</span><br><span class=\"line\">        dic = result_data.groupdict()</span><br><span class=\"line\">        csvwriter.writerow(dic.values())</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;下载完成。。。&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"Linux安装Redis","url":"/2021/11/23/Redis/Redis/","content":"<h1 id=\"Linux安装单机Redis\"><a href=\"#Linux安装单机Redis\" class=\"headerlink\" title=\"Linux安装单机Redis\"></a>Linux安装单机Redis</h1><h2 id=\"安装gcc\"><a href=\"#安装gcc\" class=\"headerlink\" title=\"安装gcc\"></a>安装gcc</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install gcc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入usr-x2F-local文件夹下\"><a href=\"#进入usr-x2F-local文件夹下\" class=\"headerlink\" title=\"进入usr&#x2F;local文件夹下\"></a>进入usr&#x2F;local文件夹下</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解压到当前文件夹\"><a href=\"#解压到当前文件夹\" class=\"headerlink\" title=\"解压到当前文件夹\"></a>解压到当前文件夹</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入解压后的redis文件夹中然后编译\"><a href=\"#进入解压后的redis文件夹中然后编译\" class=\"headerlink\" title=\"进入解压后的redis文件夹中然后编译\"></a>进入解压后的redis文件夹中然后编译</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改redis的配置文件redis-conf\"><a href=\"#修改redis的配置文件redis-conf\" class=\"headerlink\" title=\"修改redis的配置文件redis.conf\"></a>修改redis的配置文件redis.conf</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span>  <span class=\"comment\">#后台启动</span></span><br><span class=\"line\">protected-mode no  <span class=\"comment\">#关闭保护模式，开启的话，只有本机才可以访问redis</span></span><br><span class=\"line\"><span class=\"comment\"># 需要注释掉bind</span></span><br><span class=\"line\"><span class=\"comment\">#bind 127.0.0.1（bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动redis-server\"><a href=\"#启动redis-server\" class=\"headerlink\" title=\"启动redis-server\"></a>启动redis-server</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">src/redis-server redis.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证启动是否成功 </span></span><br><span class=\"line\">ps -ef | grep redis </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动redis-cli\"><a href=\"#启动redis-cli\" class=\"headerlink\" title=\"启动redis-cli\"></a>启动redis-cli</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入redis客户端 </span></span><br><span class=\"line\">src/redis-cli</span><br><span class=\"line\"><span class=\"comment\"># 执行ping</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\" size=\"5\">以上单机redis安装完成。。。。。</font></p>\n<h1 id=\"Linux安装Redis主从架构\"><a href=\"#Linux安装Redis主从架构\" class=\"headerlink\" title=\"Linux安装Redis主从架构\"></a>Linux安装Redis主从架构</h1><h2 id=\"redis主从架构搭建，配置从节点步骤：\"><a href=\"#redis主从架构搭建，配置从节点步骤：\" class=\"headerlink\" title=\"redis主从架构搭建，配置从节点步骤：\"></a><strong>redis主从架构搭建，配置从节点步骤：</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在redis目录下创建一个config文件夹然后复制redis.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 修改相关配置</span></span><br><span class=\"line\">port 6380 </span><br><span class=\"line\">pidfile /var/run/redis_6380.pid    <span class=\"comment\"># 把pid进程号写入pidfile配置的文件 </span></span><br><span class=\"line\"><span class=\"comment\"># 需要注释掉bind                             </span></span><br><span class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 配置主从复制</span></span><br><span class=\"line\">replicaof 192.168.245.130 6379   <span class=\"comment\"># 从本机6379的redis实例复制数据，Redis 5.0之前使用slaveof</span></span><br><span class=\"line\">replica-read-only <span class=\"built_in\">yes</span>  <span class=\"comment\"># 配置从节点只读</span></span><br><span class=\"line\"><span class=\"comment\"># 启动从节点</span></span><br><span class=\"line\"><span class=\"comment\"># 连接从节点</span></span><br><span class=\"line\">src/redis-cli -p 6380</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在6379实例上写数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> <span class=\"built_in\">test</span> success</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在6380上读数据</span></span><br><span class=\"line\">127.0.0.1:6380&gt; get <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">127.0.0.1:6380&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在6381上读数据</span></span><br><span class=\"line\">127.0.0.1:6381&gt; get <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Redis"],"tags":["Redis"]},{"title":"rke2搭建k8s","url":"/2022/09/03/Rancher/rke2%E6%90%AD%E5%BB%BAk8s/","content":"<h1 id=\"新建7台VM\"><a href=\"#新建7台VM\" class=\"headerlink\" title=\"新建7台VM\"></a>新建7台VM</h1><p>设置每台vm的hostname</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname rke-master-default-loadblance</span><br><span class=\"line\">hostnamectl set-hostname rke-master-default-nodepool-1</span><br><span class=\"line\">hostnamectl set-hostname rke-master-default-nodepool-2</span><br><span class=\"line\">hostnamectl set-hostname rke-master-default-nodepool-3</span><br><span class=\"line\">hostnamectl set-hostname rke-node-default-nodepool-1</span><br><span class=\"line\">hostnamectl set-hostname rke-node-default-nodepool-2</span><br><span class=\"line\">hostnamectl set-hostname rke-node-default-nodepool-3</span><br></pre></td></tr></table></figure>\n\n<p>修改每台vm的hosts文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.20  rke-master-default-loadblance</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.21  rke-master-default-nodepool-1</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.22  rke-master-default-nodepool-2</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.23  rke-master-default-nodepool-3</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.24  rke-node-default-nodepool-1</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.25  rke-node-default-nodepool-2</span></span><br><span class=\"line\"><span class=\"string\">192.168.0.26  rke-node-default-nodepool-3 </span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>由于vm是复制出来的，需要重新生成机器码并重启</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -rf /dev/null /etc/machine-id</span><br><span class=\"line\">systemd-machine-id-setup</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>关闭火墙，下载所需依赖</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld; </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld; </span><br><span class=\"line\">systemctl stop postfix; </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> postfix;</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> rpcbind</span><br><span class=\"line\"></span><br><span class=\"line\">swapoff -a; </span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab; </span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/SELINUX/s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install epel-release; yum -y install chrony curl wget vim sysstat net-tools openssl openssh lsof socat nfs-utils conntrack ipvsadm ipset iptables sysstat libseccomp; </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> rpcbind </span><br></pre></td></tr></table></figure>\n\n<p>调整limit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/security/limits.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">* soft nproc  65535</span></span><br><span class=\"line\"><span class=\"string\">* hard nproc  65535</span></span><br><span class=\"line\"><span class=\"string\">* soft nofile 65535</span></span><br><span class=\"line\"><span class=\"string\">* hard nofile 65535</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>升级内核</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -LO https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-lt-5.4.134-1.el7.elrepo.x86_64.rpm?spm=a2c6h.25603864.0.0.1fef2ee0Nf6fXn</span><br><span class=\"line\">curl -LO https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-lt-devel-5.4.134-1.el7.elrepo.x86_64.rpm?spm=a2c6h.25603864.0.0.1fef2ee0Nf6fXn</span><br><span class=\"line\">grub2-set-default  0</span><br><span class=\"line\">grub2-mkconfig -o /etc/grub2.cfg</span><br><span class=\"line\">grubby --default-kernel </span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>导入ipvs模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/modules-load.d/ipvs.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">ip_vs</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_lc</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_wlc</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_rr</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_wrr</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_lblc</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_lblcr</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_dh</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_sh</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_nq</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_sed</span></span><br><span class=\"line\"><span class=\"string\">ip_vs_ftp</span></span><br><span class=\"line\"><span class=\"string\">nf_conntrack</span></span><br><span class=\"line\"><span class=\"string\">br_netfilter</span></span><br><span class=\"line\"><span class=\"string\">ip_tables</span></span><br><span class=\"line\"><span class=\"string\">ip_set</span></span><br><span class=\"line\"><span class=\"string\">xt_set</span></span><br><span class=\"line\"><span class=\"string\">ipt_set</span></span><br><span class=\"line\"><span class=\"string\">ipt_rpfilter</span></span><br><span class=\"line\"><span class=\"string\">ipt_REJECT</span></span><br><span class=\"line\"><span class=\"string\">overlay</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now systemd-modules-load.service</span><br></pre></td></tr></table></figure>\n\n<p>修改内核并重启所有节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;  /etc/sysctl.d/kubernetes.conf &lt;&lt;EOF</span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 600</span><br><span class=\"line\">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class=\"line\">net.ipv4.tcp_keepalive_probes = 10</span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class=\"line\">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class=\"line\">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class=\"line\">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class=\"line\">net.ipv4.conf.all.rp_filter = 0</span><br><span class=\"line\">net.ipv4.conf.default.rp_filter = 0</span><br><span class=\"line\">net.ipv4.conf.default.arp_announce = 2</span><br><span class=\"line\">net.ipv4.conf.lo.arp_announce = 2</span><br><span class=\"line\">net.ipv4.conf.all.arp_announce = 2</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 2</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-arptables = 1</span><br><span class=\"line\">net.netfilter.nf_conntrack_max = 2310720</span><br><span class=\"line\">fs.inotify.max_user_watches=89100</span><br><span class=\"line\">fs.file-max = 52706963</span><br><span class=\"line\">fs.nr_open = 52706963</span><br><span class=\"line\">vm.swappiness = 0</span><br><span class=\"line\">vm.overcommit_memory=1</span><br><span class=\"line\">kernel.panic=10</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Haproxy节点配置\"><a href=\"#Haproxy节点配置\" class=\"headerlink\" title=\"Haproxy节点配置\"></a>Haproxy节点配置</h1><p>安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install haproxy -y</span><br></pre></td></tr></table></figure>\n\n\n\n<p>写入以下配置到<code>/etc/haproxy/haproxy.cfg</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    <span class=\"built_in\">log</span>         127.0.0.1 local2</span><br><span class=\"line\">    <span class=\"built_in\">chroot</span>      /var/lib/haproxy</span><br><span class=\"line\">    pidfile     /var/run/haproxy.pid</span><br><span class=\"line\">    maxconn     6000</span><br><span class=\"line\">    user        haproxy</span><br><span class=\"line\">    group       haproxy</span><br><span class=\"line\">    daemon</span><br><span class=\"line\">    stats socket /var/lib/haproxy/stats</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">    mode                    tcp</span><br><span class=\"line\">    <span class=\"built_in\">log</span>                     global</span><br><span class=\"line\">    option                  tcplog</span><br><span class=\"line\">    option                  dontlognull</span><br><span class=\"line\">    option                  redispatch</span><br><span class=\"line\">    retries                 3</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> http-request    10s</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> queue           1m</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> connect         10s</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> client          1m</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> server          1m</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> http-keep-alive 10s</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> check           10s</span><br><span class=\"line\">    maxconn                 3000</span><br><span class=\"line\"></span><br><span class=\"line\">listen stats</span><br><span class=\"line\">    <span class=\"built_in\">bind</span> 0.0.0.0:9000</span><br><span class=\"line\">    mode  http</span><br><span class=\"line\">    stats uri /status</span><br><span class=\"line\">    stats refresh 30s</span><br><span class=\"line\">    stats realm <span class=\"string\">&quot;Haproxy Manager&quot;</span></span><br><span class=\"line\">    stats auth admin:admin</span><br><span class=\"line\">    stats hide-version</span><br><span class=\"line\">    stats admin <span class=\"keyword\">if</span> TRUE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">frontend  rke2-server</span><br><span class=\"line\">   <span class=\"built_in\">bind</span> *:9345</span><br><span class=\"line\">   mode tcp</span><br><span class=\"line\">   default_backend      rke2-server</span><br><span class=\"line\"></span><br><span class=\"line\">backend   rke2-server</span><br><span class=\"line\">    balance     roundrobin</span><br><span class=\"line\">    mode        tcp</span><br><span class=\"line\">    server      rke-master-default-nodepool-1 192.168.0.21:9345 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class=\"line\">    server      rke-master-default-nodepool-2 192.168.0.22:9345 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class=\"line\">    server      rke-master-default-nodepool-3 192.168.0.23:9345 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">frontend  rke2-apiserver</span><br><span class=\"line\">   <span class=\"built_in\">bind</span> *:6443</span><br><span class=\"line\">   mode tcp</span><br><span class=\"line\">   default_backend      rke2-apiserver</span><br><span class=\"line\"></span><br><span class=\"line\">backend   rke2-apiserver</span><br><span class=\"line\">    balance     roundrobin</span><br><span class=\"line\">    mode        tcp</span><br><span class=\"line\">    server      rke-master-default-nodepool-1 192.168.0.21:6443 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class=\"line\">    server      rke-master-default-nodepool-2 192.168.0.22:6443 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class=\"line\">    server      rke-master-default-nodepool-3 192.168.0.23:6443 check weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装master1的rke2\"><a href=\"#安装master1的rke2\" class=\"headerlink\" title=\"安装master1的rke2\"></a>安装master1的rke2</h1><p>新建etcd用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r etcd</span><br><span class=\"line\">useradd -r -g etcd -s /bin/false -d /var/lib/etcd etcd</span><br></pre></td></tr></table></figure>\n\n<p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n<p>安装程序后：</p>\n<ul>\n<li><code>rke2-server</code> 服务将被安装。<code>rke2-server</code> 服务将被配置为在节点重启后或进程崩溃或被杀时自动重启。</li>\n<li>其他的实用程序将被安装在<code>/var/lib/rancher/rke2/bin/</code>。它们包括 <code>kubectl</code>, <code>crictl</code>, 和 <code>ctr</code>. 注意，这些东西默认不在你的路径上。</li>\n<li>还有两个清理脚本会安装到 <code>/usr/local/bin/rke2</code> 的路径上。它们是 <code>rke2-killall.sh</code>和<code>rke2-uninstall.sh</code>。</li>\n<li>一个 <a href=\"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/\">kubeconfig</a> 文件将被写入<code>/etc/rancher/rke2/rke2.yaml</code>。</li>\n<li>一个可用于注册其他 server 或 agent 节点的令牌将在 <code>/var/lib/rancher/rke2/server/node-token</code> 文件中创建。</li>\n</ul>\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">write-kubeconfig-mode: <span class=\"string\">&quot;0644&quot;</span></span><br><span class=\"line\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span><br><span class=\"line\">server: https://192.168.0.20:9345</span><br><span class=\"line\">tls-san:</span><br><span class=\"line\">  - <span class=\"string\">&quot;192.168.0.20&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;192.168.0.21&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;192.168.0.22&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;192.168.0.23&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;rke-master-default-loadblance&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;rke-master-default-nodepool-1&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;rke-master-default-nodepool-2&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;rke-master-default-nodepool-3&quot;</span></span><br><span class=\"line\">  - <span class=\"string\">&quot;&lt;other lb domain or host name&gt;&quot;</span></span><br><span class=\"line\">cni: <span class=\"string\">&quot;calico&quot;</span></span><br><span class=\"line\">disable-cloud-controller: <span class=\"literal\">true</span></span><br><span class=\"line\">audit-policy-file: <span class=\"string\">&quot;/etc/rke2/config/audit-policy.yaml&quot;</span></span><br><span class=\"line\">etcd-snapshot-schedule-cron: <span class=\"string\">&quot;0 */4 * * *&quot;</span></span><br><span class=\"line\">etcd-snapshot-retention: <span class=\"string\">&quot;84&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装master2的rke2\"><a href=\"#安装master2的rke2\" class=\"headerlink\" title=\"安装master2的rke2\"></a>安装master2的rke2</h1><p>新建etcd用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r etcd</span><br><span class=\"line\">useradd -r -g etcd -s /bin/false -d /var/lib/etcd etcd</span><br></pre></td></tr></table></figure>\n\n<p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/rancher/rke2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;  /etc/rancher/rke2/config.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">write-kubeconfig-mode: &quot;0644&quot;</span></span><br><span class=\"line\"><span class=\"string\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span></span><br><span class=\"line\"><span class=\"string\">server: https://192.168.0.20:9345</span></span><br><span class=\"line\"><span class=\"string\">tls-san:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.20&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.21&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.22&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.23&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-loadblance&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-1&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-2&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-3&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;&lt;other lb domain or host name&gt;&quot;</span></span><br><span class=\"line\"><span class=\"string\">cni: &quot;calico&quot;</span></span><br><span class=\"line\"><span class=\"string\">disable-cloud-controller: true</span></span><br><span class=\"line\"><span class=\"string\">audit-policy-file: &quot;/etc/rke2/config/audit-policy.yaml&quot;</span></span><br><span class=\"line\"><span class=\"string\">etcd-snapshot-schedule-cron: &quot;0 */4 * * *&quot;</span></span><br><span class=\"line\"><span class=\"string\">etcd-snapshot-retention: &quot;84&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装master3的rke2\"><a href=\"#安装master3的rke2\" class=\"headerlink\" title=\"安装master3的rke2\"></a>安装master3的rke2</h1><p>新建etcd用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r etcd</span><br><span class=\"line\">useradd -r -g etcd -s /bin/false -d /var/lib/etcd etcd</span><br></pre></td></tr></table></figure>\n\n<p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/rancher/rke2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;  /etc/rancher/rke2/config.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">write-kubeconfig-mode: &quot;0644&quot;</span></span><br><span class=\"line\"><span class=\"string\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span></span><br><span class=\"line\"><span class=\"string\">server: https://192.168.0.20:9345</span></span><br><span class=\"line\"><span class=\"string\">tls-san:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.20&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.21&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.22&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;192.168.0.23&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-loadblance&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-1&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-2&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;rke-master-default-nodepool-3&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;&lt;other lb domain or host name&gt;&quot;</span></span><br><span class=\"line\"><span class=\"string\">cni: &quot;calico&quot;</span></span><br><span class=\"line\"><span class=\"string\">disable-cloud-controller: true</span></span><br><span class=\"line\"><span class=\"string\">audit-policy-file: &quot;/etc/rke2/config/audit-policy.yaml&quot;</span></span><br><span class=\"line\"><span class=\"string\">etcd-snapshot-schedule-cron: &quot;0 */4 * * *&quot;</span></span><br><span class=\"line\"><span class=\"string\">etcd-snapshot-retention: &quot;84&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-server.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-server -f</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装node01的rke2\"><a href=\"#安装node01的rke2\" class=\"headerlink\" title=\"安装node01的rke2\"></a>安装node01的rke2</h1><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn INSTALL_RKE2_TYPE=<span class=\"string\">&quot;agent&quot;</span>  sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/rancher/rke2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;  /etc/rancher/rke2/config.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">server: https://192.168.0.20:9345 </span></span><br><span class=\"line\"><span class=\"string\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span></span><br><span class=\"line\"><span class=\"string\">cluster-cidr: 10.244.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">service-cidr: 10.96.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">kube-proxy-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;proxy-mode=ipvs&quot;</span></span><br><span class=\"line\"><span class=\"string\">kubelet-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;max-pods=110&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-agent -f</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装node02的rke2\"><a href=\"#安装node02的rke2\" class=\"headerlink\" title=\"安装node02的rke2\"></a>安装node02的rke2</h1><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn INSTALL_RKE2_TYPE=<span class=\"string\">&quot;agent&quot;</span>  sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/rancher/rke2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;  /etc/rancher/rke2/config.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">server: https://192.168.0.20:9345 </span></span><br><span class=\"line\"><span class=\"string\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span></span><br><span class=\"line\"><span class=\"string\">cluster-cidr: 10.244.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">service-cidr: 10.96.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">kube-proxy-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;proxy-mode=ipvs&quot;</span></span><br><span class=\"line\"><span class=\"string\">kubelet-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;max-pods=110&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-agent -f</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装node03的rke2\"><a href=\"#安装node03的rke2\" class=\"headerlink\" title=\"安装node03的rke2\"></a>安装node03的rke2</h1><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/rke2/install.sh | INSTALL_RKE2_MIRROR=cn INSTALL_RKE2_TYPE=<span class=\"string\">&quot;agent&quot;</span>  sh -</span><br></pre></td></tr></table></figure>\n\n<p>设置rke2自启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>修改rke2的&#x2F;etc&#x2F;rancher&#x2F;rke2&#x2F;config.yaml</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/rancher/rke2</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;  /etc/rancher/rke2/config.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">server: https://192.168.0.20:9345 </span></span><br><span class=\"line\"><span class=\"string\">token: K10ffa355d16df1cf4a157e0c0aa14cbb2dfe42b3a0ff4762edd34e2c683d359115::server:f370632f92a12f192b13862a3a3e2ea7</span></span><br><span class=\"line\"><span class=\"string\">cluster-cidr: 10.244.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">service-cidr: 10.96.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">kube-proxy-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;proxy-mode=ipvs&quot;</span></span><br><span class=\"line\"><span class=\"string\">kubelet-arg:</span></span><br><span class=\"line\"><span class=\"string\">- &quot;max-pods=110&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>启动rke2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start rke2-agent.service</span><br></pre></td></tr></table></figure>\n\n<p>查看启动日志</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">journalctl -u rke2-agent -f</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看搭建完成的集群\"><a href=\"#查看搭建完成的集群\" class=\"headerlink\" title=\"查看搭建完成的集群\"></a>查看搭建完成的集群</h1><p>等待安装完成在任意master上执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@rke-master-default-nodepool-1 ~]<span class=\"comment\"># /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes -o wide</span></span><br><span class=\"line\">NAME                            STATUS   ROLES                       AGE    VERSION          INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class=\"line\">rke-master-default-nodepool-1   Ready    control-plane,etcd,master   168m   v1.24.4+rke2r1   192.168.0.21   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-master-default-nodepool-2   Ready    control-plane,etcd,master   148m   v1.24.4+rke2r1   192.168.0.22   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-master-default-nodepool-3   Ready    control-plane,etcd,master   145m   v1.24.4+rke2r1   192.168.0.23   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-1     Ready    &lt;none&gt;                      110m   v1.24.4+rke2r1   192.168.0.24   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-2     Ready    &lt;none&gt;                      77m    v1.24.4+rke2r1   192.168.0.25   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-3     Ready    &lt;none&gt;                      90m    v1.24.4+rke2r1   192.168.0.26   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">[root@rke-master-default-nodepool-1 ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"使用外部VM连接集群\"><a href=\"#使用外部VM连接集群\" class=\"headerlink\" title=\"使用外部VM连接集群\"></a>使用外部VM连接集群</h1><p>安装kubectl</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -LO <span class=\"string\">&quot;https://dl.k8s.io/release/<span class=\"subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> kubectl /usr/bin/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/kubectl</span><br></pre></td></tr></table></figure>\n\n<p>初始化kubeconfig</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.kube</span><br><span class=\"line\"><span class=\"comment\">#将master中的/etc/rancher/rke2/rke2.yaml中的内容复制到 ~/.kube/config中</span></span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@build yaml]<span class=\"comment\"># kubectl get node -owide</span></span><br><span class=\"line\">NAME                            STATUS   ROLES                       AGE    VERSION          INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class=\"line\">rke-master-default-nodepool-1   Ready    control-plane,etcd,master   172m   v1.24.4+rke2r1   192.168.0.21   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-master-default-nodepool-2   Ready    control-plane,etcd,master   152m   v1.24.4+rke2r1   192.168.0.22   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-master-default-nodepool-3   Ready    control-plane,etcd,master   149m   v1.24.4+rke2r1   192.168.0.23   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-1     Ready    &lt;none&gt;                      114m   v1.24.4+rke2r1   192.168.0.24   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-2     Ready    &lt;none&gt;                      80m    v1.24.4+rke2r1   192.168.0.25   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">rke-node-default-nodepool-3     Ready    &lt;none&gt;                      94m    v1.24.4+rke2r1   192.168.0.26   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   containerd://1.6.6-k3s1</span><br><span class=\"line\">[root@build yaml]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Rancher"],"tags":["Rancher"]},{"title":"rime","url":"/2024/07/14/Rime/rime%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/","content":"<h1 id=\"安装rime\"><a href=\"#安装rime\" class=\"headerlink\" title=\"安装rime\"></a>安装rime</h1><p>根据官方网站安装即可</p>\n<p><a href=\"https://github.com/rime/weasel\">rime</a></p>\n<h1 id=\"安装薄荷输入法\"><a href=\"#安装薄荷输入法\" class=\"headerlink\" title=\"安装薄荷输入法\"></a>安装薄荷输入法</h1><p>根据官方网站安装即可</p>\n<p><a href=\"https://github.com/Mintimate/oh-my-rime\">oh-my-rime</a></p>\n<h1 id=\"自定义输入法皮肤配色\"><a href=\"#自定义输入法皮肤配色\" class=\"headerlink\" title=\"自定义输入法皮肤配色\"></a>自定义输入法皮肤配色</h1><p>根据官方文档操作即可，下面文档中有详细介绍皮肤各个地方的参数，如何更改。</p>\n<p><a href=\"https://github.com/rime/weasel/wiki\">rime-wiki</a></p>\n<p>也可以使用在线编辑的网友来自定义更改，下面有三个</p>\n<ul>\n<li><p><a href=\"https://pdog18.github.io/rime-soak/#/theme\">https://pdog18.github.io/rime-soak/#/theme</a></p>\n</li>\n<li><p><a href=\"https://owlzou.github.io/weasel-theme-editor/\">https://owlzou.github.io/weasel-theme-editor/</a></p>\n</li>\n<li><p><a href=\"https://fxliang.github.io/RimeSeeMe/\">https://fxliang.github.io/RimeSeeMe/</a></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"自用输入法皮肤配色\"><a href=\"#自用输入法皮肤配色\" class=\"headerlink\" title=\"自用输入法皮肤配色\"></a>自用输入法皮肤配色</h1><p>由于自己平时使用搜狗输入法居多，所以习惯了搜狗输入法的默认皮肤，基于<code>小鹤飞扬／flypy</code>配色主题更改了自己喜好的配色</p>\n<p>下面的yaml文件需要放在<code>用户文件夹</code>下的<code>weasel.custom.yaml</code>中</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#patch:</span></span><br><span class=\"line\"><span class=\"comment\">#  style/horizontal: true</span></span><br><span class=\"line\"><span class=\"comment\">#  style/color_scheme: soak</span></span><br><span class=\"line\"><span class=\"comment\">#  style/layout/margin_x: 9</span></span><br><span class=\"line\"><span class=\"comment\">#  style/layout/margin_y: 6</span></span><br><span class=\"line\"><span class=\"comment\">#  preset_color_schemes:</span></span><br><span class=\"line\"><span class=\"comment\">#    soak:</span></span><br><span class=\"line\"><span class=\"comment\">#      text_color: 0</span></span><br><span class=\"line\"><span class=\"comment\">#      back_color: 16382457</span></span><br><span class=\"line\"><span class=\"comment\">#      border_color: 13027014</span></span><br><span class=\"line\"><span class=\"comment\">#      label_color: 16744448</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_text_color: 16744448</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_back_color: 16777215</span></span><br><span class=\"line\"><span class=\"comment\">#      candidate_text_color: 16744448</span></span><br><span class=\"line\"><span class=\"comment\">#      comment_text_color: 16744448</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_candidate_text_color: 176</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_comment_text_color: 176</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_candidate_back_color: 16777215</span></span><br><span class=\"line\"><span class=\"comment\">#      hilited_label_color: 5592522</span></span><br><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  <span class=\"attr\">menu/page_size:</span> <span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attr\">style/horizontal:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">style/color_scheme:</span> <span class=\"string\">soak</span></span><br><span class=\"line\">  <span class=\"attr\">style/layout/margin_x:</span> <span class=\"number\">9</span></span><br><span class=\"line\">  <span class=\"attr\">style/layout/margin_y:</span> <span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"attr\">preset_color_schemes:</span></span><br><span class=\"line\">    <span class=\"attr\">soak:</span></span><br><span class=\"line\">      <span class=\"attr\">text_color:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">back_color:</span> <span class=\"number\">16250871</span></span><br><span class=\"line\">      <span class=\"attr\">border_color:</span> <span class=\"number\">13027014</span></span><br><span class=\"line\">      <span class=\"attr\">label_color:</span> <span class=\"number\">16744448</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_text_color:</span> <span class=\"number\">16744448</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_back_color:</span> <span class=\"number\">16777215</span></span><br><span class=\"line\">      <span class=\"attr\">candidate_text_color:</span> <span class=\"number\">16744448</span></span><br><span class=\"line\">      <span class=\"attr\">comment_text_color:</span> <span class=\"number\">16744448</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_candidate_text_color:</span> <span class=\"number\">1381881</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_comment_text_color:</span> <span class=\"number\">1381881</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_candidate_back_color:</span> <span class=\"number\">16777215</span></span><br><span class=\"line\">      <span class=\"attr\">hilited_label_color:</span> <span class=\"number\">5592522</span>     </span><br></pre></td></tr></table></figure>\n\n<p>如果想更改候选词圆角的话，需要更改<code>用户文件夹</code>下<code>weasel.yaml</code>中<code>layout</code>下面的配置。由于我只使用这一个皮肤，所以把rime自带的皮肤配色都删除了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Weasel settings</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 感谢 @[Mirtle](https://github.com/mirtlecn) 整理</span></span><br><span class=\"line\"><span class=\"comment\"># Rime 定制指南 &lt;https://github.com/rime/home/wiki/CustomizationGuide#定製指南&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Weasel 定制文档 &lt;https://github.com/rime/weasel/wiki/Weasel-定製化&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Weasel 字体设定 &lt;https://github.com/rime/weasel/wiki/字體設定&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部分选项需要将 Weasel 更新至最新开发版才能生效</span></span><br><span class=\"line\"><span class=\"attr\">config_version:</span> <span class=\"string\">&quot;2024-03-02&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [app_options]</span></span><br><span class=\"line\"><span class=\"comment\"># 针对特定应用的设置</span></span><br><span class=\"line\"><span class=\"attr\">app_options:</span></span><br><span class=\"line\">  <span class=\"attr\">firefox.exe:</span></span><br><span class=\"line\">    <span class=\"attr\">inline_preedit:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 行内显示预编辑区：规避 &lt;https://github.com/rime/weasel/issues/946&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">iexplore.exe:</span></span><br><span class=\"line\">    <span class=\"attr\">inline_preedit:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 兼容 IE</span></span><br><span class=\"line\">  <span class=\"attr\">browser.exe:</span></span><br><span class=\"line\">    <span class=\"attr\">inline_preedit:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 兼容 Yandex</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [global settings]</span></span><br><span class=\"line\"><span class=\"attr\">show_notifications:</span> <span class=\"literal\">true</span>                   <span class=\"comment\"># 是否显示状态变化的通知：true；false；option_list（方案内的开头 option）</span></span><br><span class=\"line\"><span class=\"attr\">show_notifications_time:</span> <span class=\"number\">1200</span>              <span class=\"comment\"># 通知显示的时间，单位 ms</span></span><br><span class=\"line\"><span class=\"attr\">global_ascii:</span> <span class=\"literal\">false</span>                        <span class=\"comment\"># 切换为 ascii 模式时，是否影响所有窗口：true；false</span></span><br><span class=\"line\"><span class=\"comment\"># [End of &lt;global settings&gt;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [style]</span></span><br><span class=\"line\"><span class=\"comment\"># 字体；候选项、候选窗口的行为、布局及样式</span></span><br><span class=\"line\"><span class=\"attr\">style:</span></span><br><span class=\"line\">  <span class=\"attr\">color_scheme:</span> <span class=\"string\">mint_light_blue</span>             <span class=\"comment\"># 默认配色方案</span></span><br><span class=\"line\">  <span class=\"attr\">color_scheme_dark:</span> <span class=\"string\">mint_dark_blue</span>         <span class=\"comment\"># 深色模式下，Weasel 的配色方案，Windows 10 1809+ 可用</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 全局字体</span></span><br><span class=\"line\">  <span class=\"comment\"># 格式：字体1:起始码位:结束码位:字重:字形,字体2……，字体会依次 fallback</span></span><br><span class=\"line\">  <span class=\"comment\"># 详细设定请参考 &lt;https://github.com/rime/weasel/wiki/字體設定&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">font_face:</span> <span class=\"string\">&quot;Segoe UI Emoji:30:39, Segoe UI Emoji:23:23, Segoe UI Emoji:2a:2a, Segoe UI Emoji:fe0f:fe0f, Segoe UI Emoji:20e3:20e3, Microsoft YaHei, SF Pro, Segoe UI Emoji, Noto Color Emoji&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">label_font_face:</span> <span class=\"string\">&quot;Microsoft YaHei&quot;</span>       <span class=\"comment\"># 标签字体</span></span><br><span class=\"line\">  <span class=\"attr\">comment_font_face:</span> <span class=\"string\">&quot;Microsoft YaHei&quot;</span>     <span class=\"comment\"># 注释字体</span></span><br><span class=\"line\">  <span class=\"attr\">font_point:</span> <span class=\"number\">12</span>                           <span class=\"comment\"># 全局字体字号</span></span><br><span class=\"line\">  <span class=\"attr\">label_font_point:</span> <span class=\"number\">12</span>                     <span class=\"comment\"># 标签字体字号，不设定 fallback 到 font_point</span></span><br><span class=\"line\">  <span class=\"attr\">comment_font_point:</span> <span class=\"number\">10</span>                   <span class=\"comment\"># 注释字体字号，不设定 fallback 到 font_point</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">inline_preedit:</span> <span class=\"literal\">false</span>                     <span class=\"comment\"># 行内显示预编辑区：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">preedit_type:</span> <span class=\"string\">composition</span>                <span class=\"comment\"># 预编辑区内容：composition（编码）； preview（选中的候选）；preview_all（全部候选）</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">fullscreen:</span> <span class=\"literal\">false</span>                        <span class=\"comment\"># 候选窗口全屏显示：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">vertical_text:</span> <span class=\"literal\">false</span>                     <span class=\"comment\"># 竖排文本：true；false</span></span><br><span class=\"line\">  <span class=\"comment\"># text_orientation: horizontal           # 文本排列方向，效果和 `vertical_text` 相同：horizontal；vertical</span></span><br><span class=\"line\">  <span class=\"attr\">candidate_list_layout:</span> <span class=\"string\">stacked</span>           <span class=\"comment\"># stacked | linear  候选项排列方向（似乎只有在custom内才可以生效）</span></span><br><span class=\"line\">  <span class=\"attr\">horizontal:</span> <span class=\"literal\">false</span>                        <span class=\"comment\"># 候选项水平排列（在custom内和andidate_list_layout的linear效果一样）</span></span><br><span class=\"line\">  <span class=\"attr\">vertical_text_left_to_right:</span> <span class=\"literal\">false</span>       <span class=\"comment\"># 竖排方向是否从左到右：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">vertical_text_with_wrap:</span> <span class=\"literal\">false</span>           <span class=\"comment\"># 文本竖排模式下，自动换行：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">vertical_auto_reverse:</span> <span class=\"literal\">false</span>             <span class=\"comment\"># 文本竖排模式下，候选窗口位于光标上方时倒序排列：true；false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">label_format:</span> <span class=\"string\">&quot;%s&quot;</span>                       <span class=\"comment\"># 标签字符：例如 %s. 效果为 1. 2. 3. ....</span></span><br><span class=\"line\">  <span class=\"attr\">mark_text:</span> <span class=\"string\">&quot;|&quot;</span>                           <span class=\"comment\"># 标记字符，显示在选中的候选标签前，需要在配色方案中指定颜色；如该项为空字符串 &quot;&quot; 而配色方案中 hilited_mark_color 非透明色，则显示 Windows 11 输入法风格标记</span></span><br><span class=\"line\">  <span class=\"attr\">ascii_tip_follow_cursor:</span> <span class=\"literal\">false</span>           <span class=\"comment\"># 切换 ASCII 模式时，提示跟随鼠标，而非输入光标</span></span><br><span class=\"line\">  <span class=\"attr\">enhanced_position:</span> <span class=\"literal\">true</span>                  <span class=\"comment\"># 无法定位候选框时，在窗口左上角显示候选框：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">display_tray_icon:</span> <span class=\"literal\">false</span>                 <span class=\"comment\"># 托盘显示独立于语言栏的额外图标：true；false</span></span><br><span class=\"line\">  <span class=\"attr\">antialias_mode:</span> <span class=\"string\">default</span>                  <span class=\"comment\"># 次像素反锯齿设定：default；force_dword；cleartype；grayscale；aliased</span></span><br><span class=\"line\">  <span class=\"attr\">candidate_abbreviate_length:</span> <span class=\"number\">30</span>          <span class=\"comment\"># 候选项略写，超过此数字则用省略号代替。设置为 0 则不启用此功能</span></span><br><span class=\"line\">  <span class=\"attr\">mouse_hover_ms:</span> <span class=\"number\">0</span>                        <span class=\"comment\"># ! 已弃用。鼠标悬停选词响应时间（ms），设置为 0 时禁用该功能</span></span><br><span class=\"line\">  <span class=\"attr\">hover_type:</span> <span class=\"string\">none</span>                         <span class=\"comment\"># 鼠标在候选窗口悬停时：none（无动作）；hilite（选中鼠标下的候选）；semi_hilite（高亮鼠标下的候选）</span></span><br><span class=\"line\">  <span class=\"attr\">paging_on_scroll:</span> <span class=\"literal\">true</span>                   <span class=\"comment\"># 在候选窗口上滑动滚轮的行为：true（翻页）；false （选中下一个候选）</span></span><br><span class=\"line\">  <span class=\"attr\">click_to_capture:</span> <span class=\"literal\">false</span>                  <span class=\"comment\"># 鼠标点击候选项，创建截图：true；false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">baseline:</span> <span class=\"number\">0</span>                            <span class=\"comment\"># 字号百分比，与 linespacing 一同设置可解决字体跳动问题，设置为 0 为禁用</span></span><br><span class=\"line\">    <span class=\"attr\">linespacing:</span> <span class=\"number\">0</span>                         <span class=\"comment\"># 字号百分比，参考 &lt;https://github.com/rime/weasel/pull/1177&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">align_type:</span> <span class=\"string\">center</span>                     <span class=\"comment\"># 标签、候选文字、注解文字之间的相对对齐方式：top ; center ; bottom</span></span><br><span class=\"line\">    <span class=\"attr\">max_height:</span> <span class=\"number\">600</span>                        <span class=\"comment\"># 候选框最大高度，horizontal 布局如宽超此尺寸则换行显示候选，设置为 0 不启用此功能</span></span><br><span class=\"line\">    <span class=\"attr\">max_width:</span> <span class=\"number\">0</span>                           <span class=\"comment\"># 候选框最大宽度，文本竖排模式下如高度超此尺寸则换列显示候选，设置为 0 不启用此功能</span></span><br><span class=\"line\">    <span class=\"attr\">min_height:</span> <span class=\"number\">0</span>                          <span class=\"comment\"># 候选框最小高度</span></span><br><span class=\"line\">    <span class=\"attr\">min_width:</span> <span class=\"number\">145</span>                          <span class=\"comment\"># 候选框最小宽度</span></span><br><span class=\"line\">    <span class=\"attr\">border_width:</span> <span class=\"number\">0</span>                        <span class=\"comment\"># 边框宽度；又名 border</span></span><br><span class=\"line\">    <span class=\"attr\">margin_x:</span> <span class=\"number\">8</span>                            <span class=\"comment\"># 主体元素和候选框的左右边距；为负值时，不显示候选框</span></span><br><span class=\"line\">    <span class=\"attr\">margin_y:</span> <span class=\"number\">8</span>                            <span class=\"comment\"># 主体元素的上下边距；为负值时，不显示候选框</span></span><br><span class=\"line\">    <span class=\"attr\">spacing:</span> <span class=\"number\">10</span>                            <span class=\"comment\"># inline_preedit 为否时，编码区域和候选区域的间距</span></span><br><span class=\"line\">    <span class=\"attr\">candidate_spacing:</span> <span class=\"number\">22</span>                  <span class=\"comment\"># 候选项之间的间距</span></span><br><span class=\"line\">    <span class=\"attr\">hilite_spacing:</span> <span class=\"number\">6</span>                      <span class=\"comment\"># 候选项和相应标签的间距</span></span><br><span class=\"line\">    <span class=\"attr\">hilite_padding:</span> <span class=\"number\">8</span>                      <span class=\"comment\"># 高亮区域和内部文字的间距，影响高亮区域大小</span></span><br><span class=\"line\">    <span class=\"comment\"># hilite_padding_x: 8                  # 高亮区域和内部文字的左右间距，如无特殊指定则依 hilite_padding 设置</span></span><br><span class=\"line\">    <span class=\"comment\"># hilite_padding_y: 8                  # 高亮区域和内部文字的上下间距，如无特殊指定则依 hilite_padding 设置</span></span><br><span class=\"line\">    <span class=\"attr\">shadow_radius:</span> <span class=\"number\">0</span>                       <span class=\"comment\"># 阴影区域半径，为 0 不显示阴影；需要同时在配色方案中指定非透明的阴影颜色</span></span><br><span class=\"line\">    <span class=\"attr\">shadow_offset_x:</span> <span class=\"number\">4</span>                     <span class=\"comment\"># 阴影左右偏移距离</span></span><br><span class=\"line\">    <span class=\"attr\">shadow_offset_y:</span> <span class=\"number\">4</span>                     <span class=\"comment\"># 阴影上下偏移距离</span></span><br><span class=\"line\">    <span class=\"attr\">corner_radius:</span> <span class=\"number\">4</span>                       <span class=\"comment\"># 候选窗口圆角半径</span></span><br><span class=\"line\">    <span class=\"attr\">round_corner:</span> <span class=\"number\">8</span>                        <span class=\"comment\"># 候选背景色块圆角半径，又名 hilited_corner_radius</span></span><br><span class=\"line\">    <span class=\"comment\"># type: vertical                       # 布局设置，效果和 style 下的设置相同：</span></span><br><span class=\"line\">                                           <span class=\"comment\"># horizontal（横向）；vertical（竖向） ; vertical_text（竖排文本） ; vertical+fullscreen（全屏） ; horizontal+fullscreen（横向全屏）</span></span><br><span class=\"line\"><span class=\"comment\"># [End of &lt;style&gt;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [preset_color_schemes]</span></span><br><span class=\"line\"><span class=\"comment\"># 配色设定</span></span><br><span class=\"line\"><span class=\"comment\"># 在小狼毫用户目录新建 preview 文件夹，将自定义皮肤的截图重命名为 color_scheme_&lt;name&gt;.png 放入此文件夹，可以在「输入法设定」中看到自定义皮肤效果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 小狼毫配色在线设计：</span></span><br><span class=\"line\"><span class=\"comment\"># [RIME 西米](https://fxliang.github.io/RimeSeeMe/)</span></span><br><span class=\"line\"><span class=\"comment\"># [润笔](https://pdog18.github.io/rime-soak/#/theme)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [小狼毫配色详解](https://github.com/rime/weasel/wiki/定制小狼毫配色)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["Rime"],"tags":["Rime"]},{"title":"Spring核心原理(一)","url":"/2022/10/18/Spring/Spring_1/","content":"<h1 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h1><p>Bean创建的生命周期，大致过程如下</p>\n<ol>\n<li>利用该类的构造方法来实例化得到一个对象（但是如何一个类中有多个构造方法，Spring则会进行选择，这个叫做<strong>推断构造方法</strong>）</li>\n<li>得到一个对象后，Spring会判断该对象中是否存在被@Autowired注解了的属性，把这些属性找出来并由Spring进行赋值（<strong>依赖注入</strong>）</li>\n<li>依赖注入后，Spring会判断该对象是否实现了BeanNameAware接口、BeanClassLoaderAware接口、BeanFactoryAware接口，如果实现了，就表示当前对象必须实现该接口中所定义的setBeanName()、setBeanClassLoader()、setBeanFactory()方法，那Spring就会调用这些方法并传入相应的参数（<strong>Aware回调</strong>）</li>\n<li>Aware回调后，Spring会判断该对象中是否存在某个方法被@PostConstruct注解了，如果存在，Spring会调用当前对象的此方法（<strong>初始化前</strong>）</li>\n<li>紧接着，Spring会判断该对象是否实现了InitializingBean接口，如果实现了，就表示当前对象必须实现该接口中的afterPropertiesSet()方法，那Spring就会调用当前对象中的afterPropertiesSet()方法（<strong>初始化</strong>）</li>\n<li>最后，Spring会判断当前对象需不需要进行AOP，如果不需要那么Bean就创建完了，如果需要进行AOP，则会进行动态代理并生成一个代理对象做为Bean（<strong>初始化后</strong>）</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>通过最后一步，我们可以发现，当Spring根据这个类<code>【UserService】</code>来创建一个Bean时：</p>\n<ol>\n<li>如果不用进行AOP，那么Bean就是UserService类的构造方法所得到的对象。</li>\n<li>如果需要进行AOP，那么Bean就是UserService的代理类所实例化得到的对象，而不是UserService本身所得到的对象。</li>\n</ol>\n<p>Bean对象创建出来后：</p>\n<ol>\n<li>如果当前Bean是单例Bean，那么会把该Bean对象存入一个Map&lt;String, Object&gt;，Map的key为beanName，value为Bean对象。这样下次getBean时就可以直接从Map中拿到对应的Bean对象了。（实际上，在Spring源码中，这个Map就是<strong>单例池</strong>）</li>\n<li>如果当前Bean是原型Bean，那么后续没有其他动作，不会存入一个Map，下次getBean时会再次执行上述创建过程，得到一个新的Bean对象。</li>\n</ol>\n<h1 id=\"推断构造方法\"><a href=\"#推断构造方法\" class=\"headerlink\" title=\"推断构造方法\"></a>推断构造方法</h1><p>Spring在基于某个类生成Bean的过程中，需要利用该类的构造方法来实例化得到一个对象，但是<strong>如果一个类存在多个构造方法，Spring会使用哪个呢？</strong></p>\n<p>Spring的判断逻辑如下：</p>\n<ol>\n<li><p>如果一个类只存在一个构造方法，不管该构造方法是无参构造方法，还是有参构造方法，Spring都会用这个构造方法</p>\n</li>\n<li><p>如果一个类存在多个构造方法</p>\n</li>\n<li><ol>\n<li>这些构造方法中，存在一个无参的构造方法，那么Spring就会用这个无参的构造方法</li>\n<li>这些构造方法中，不存在一个无参的构造方法，那么Spring就会<strong>报错</strong></li>\n</ol>\n</li>\n</ol>\n<p>Spring的设计思想是这样的：</p>\n<ol>\n<li>如果一个类只有一个构造方法，那么没得选择，只能用这个构造方法</li>\n<li>如果一个类存在多个构造方法，Spring不知道如何选择，就会看是否有无参的构造方法，因为无参构造方法本身表示了一种默认的意义、</li>\n<li>不过如果某个构造方法上加了@Autowired注解，那就表示程序员告诉Spring就用这个加了注解的方法，那Spring就会用这个加了@Autowired注解构造方法了</li>\n</ol>\n<p>需要重视的是，如果Spring选择了一个有参的构造方法，Spring在调用这个有参构造方法时，需要传入参数，那这个参数是怎么来的呢？</p>\n<p>Spring会根据入参的类型和入参的名字去Spring中找Bean对象（以单例Bean为例，Spring会从单例池那个Map中去找）：</p>\n<ol>\n<li>先根据入参类型找，如果只找到一个，那就直接用来作为入参</li>\n<li>如果根据类型找到多个，则再根据入参名字来确定唯一一个</li>\n<li>最终如果没有找到，则会报错，无法创建当前Bean对象</li>\n</ol>\n<p>确定用哪个构造方法，确定入参的Bean对象，这个过程就叫做<strong>推断构造方法</strong>。</p>\n<h1 id=\"AOP大致流程\"><a href=\"#AOP大致流程\" class=\"headerlink\" title=\"AOP大致流程\"></a>AOP大致流程</h1><p>AOP就是进行动态代理，在创建一个Bean的过程中，Spring在最后一步会去判断当前正在创建的这个Bean是不是需要进行AOP，如果需要则会进行动态代理。</p>\n<p>如何判断当前Bean对象需不需要进行AOP:</p>\n<ol>\n<li>找出所有的切面Bean</li>\n<li>遍历切面中的每个方法，看是否写了@Before、@After等注解</li>\n<li>如果写了，则判断所对应的Pointcut是否和当前Bean对象的类是否匹配</li>\n<li>如果匹配则表示当前Bean对象有匹配的的Pointcut，表示需要进行AOP</li>\n</ol>\n<p>利用cglib进行AOP的大致流程：</p>\n<ol>\n<li><p>生成代理类UserServiceProxy，代理类继承UserService</p>\n</li>\n<li><p>代理类中重写了父类的方法，比如UserService中的test()方法</p>\n</li>\n<li><p>代理类中还会有一个target属性，该属性的值为被代理对象（也就是通过UserService类推断构造方法实例化出来的对象，进行了依赖注入、初始化等步骤的对象）</p>\n</li>\n<li><p>代理类中的test()方法被执行时的逻辑如下：</p>\n</li>\n<li><ol>\n<li>执行切面逻辑（@Before）</li>\n<li>调用target.test()</li>\n</ol>\n</li>\n</ol>\n<p>当我们从Spring容器得到UserService的Bean对象时，拿到的就是UserServiceProxy所生成的对象，也就是代理对象。</p>\n<p>UserService代理对象.test()—&gt;执行切面逻辑—&gt;target.test()，注意target对象不是代理对象，而是被代理对象(也就是UserService的Bean对象)。</p>\n<h1 id=\"Spring事务\"><a href=\"#Spring事务\" class=\"headerlink\" title=\"Spring事务\"></a>Spring事务</h1><p>当我们在某个方法上加了@Transactional注解后，就表示该方法在调用时会开启Spring事务，而这个方法所在的类所对应的Bean对象会是该类的代理对象。</p>\n<p>Spring事务的代理对象执行某个方法时的步骤：</p>\n<ol>\n<li>判断当前执行的方法是否存在@Transactional注解</li>\n<li>如果存在，则利用事务管理器（TransactionMananger）新建一个数据库连接</li>\n<li>修改数据库连接的autocommit为false</li>\n<li>执行target.test()，执行程序员所写的业务逻辑代码，也就是执行sql</li>\n<li>执行完了之后如果没有出现异常，则提交，否则回滚</li>\n</ol>\n<p>Spring事务是否会失效的判断标准：<strong>某个加了@Transactional注解的方法被调用时，要判断到底是不是直接被代理对象调用的，如果是则事务会生效，如果不是则失效。</strong></p>\n","categories":["Spring"],"tags":["Spring"]},{"title":"Shell基础","url":"/2023/02/11/Shell/shell%E5%9F%BA%E7%A1%80/","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p><code>shell支持三种定义变量的方式</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">var=dooubb</span><br><span class=\"line\">var=<span class=\"string\">&#x27;dooubb&#x27;</span></span><br><span class=\"line\">var=<span class=\"string\">&quot;dooubb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果赋值变量的值没有空格或者tab缩进，不加引号也可以</p>\n<p>如果赋值变量的值有空格或者tab缩进，则需要加引号</p>\n<p>单引号和双引号也是有区别的</p>\n<ol>\n<li>由单引号<code>&#39; &#39;</code>包围的字符串：</li>\n</ol>\n<ul>\n<li>任何字符都会原样输出，在其中使用变量是无效的。</li>\n<li>字符串中不能出现单引号，即使对单引号进行转义也不行。</li>\n</ul>\n<ol>\n<li>由双引号<code>&quot; &quot;</code>包围的字符串：</li>\n</ol>\n<ul>\n<li>如果其中包含了某个变量，那么该变量会被解析（得到该变量的值），而不是原样输出。</li>\n<li>字符串中可以出现双引号，只要它被转义了就行。</li>\n</ul>\n<ol>\n<li>不被引号包围的字符串</li>\n</ol>\n<ul>\n<li>不被引号包围的字符串中出现变量时也会被解析，这一点和双引号<code>&quot; &quot;</code>包围的字符串一样。</li>\n<li>字符串中不能出现空格，否则空格后边的字符串会作为其他变量或者命令解析。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\">str1=<span class=\"built_in\">test</span><span class=\"variable\">$var</span></span><br><span class=\"line\">str2=<span class=\"string\">&quot;shell \\&quot;script\\&quot; <span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\">str3=<span class=\"string\">&#x27;print  $var&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">testdooubb</span><br><span class=\"line\">shell <span class=\"string\">&quot;script&quot;</span> dooubb</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"variable\">$var</span></span><br><span class=\"line\">使用变量</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">dooubb</span><br><span class=\"line\">dooubb</span><br></pre></td></tr></table></figure>\n\n<p>加花括号是为了帮助解释器识别变量的边界</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果--&gt;&#x27;</span><span class=\"variable\">$vartest</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果--&gt;&#x27;</span><span class=\"variable\">$&#123;var&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">解释器会将vartest当成一个变量，所以输出结果为空，并不是咱们期望的dooubbtest</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">结果--&gt;</span><br><span class=\"line\">结果--&gt;dooubb</span><br><span class=\"line\">变量重新赋值</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">tom</span><br><span class=\"line\">jack</span><br><span class=\"line\">只读变量,无法修改变量值</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">readonly</span> var_name</span><br><span class=\"line\">var_name=<span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">shell.sh: line 4: var_name: <span class=\"built_in\">readonly</span> variable</span><br><span class=\"line\">删除变量</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> var_name</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果-&gt;&#x27;</span><span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">结果-&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p><code>定义数数组</code></p>\n<p>使用()来表示数组，数组中的元素使用空格来分开</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\">array_2=(</span><br><span class=\"line\">    doubao </span><br><span class=\"line\">    dooub </span><br><span class=\"line\">    dooubb</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_1-&gt;&#x27;</span><span class=\"variable\">$&#123;array_1[@]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_2-&gt;&#x27;</span><span class=\"variable\">$&#123;array_2[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">array_1-&gt;doubao dooub dooubb</span><br><span class=\"line\">array_2-&gt;doubao dooub dooubb</span><br></pre></td></tr></table></figure>\n\n<p>数组名[@]可以获取数组中所有的元素</p>\n<p><code>使用数组下标访问数组元素</code></p>\n<p>下标从0开始</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_1-&gt;&#x27;</span><span class=\"variable\">$&#123;array_1[1]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">array_1-&gt;dooub</span><br><span class=\"line\">获取数组的长度</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\"><span class=\"comment\"># 取得数组元素的个数</span></span><br><span class=\"line\">length_1=<span class=\"variable\">$&#123;#array_1[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">length_2=<span class=\"variable\">$&#123;#array_1[*]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 取得数组单个元素的长度(默认取0下标的数组元素的长度) #array_1[2][n]  表示取数组第二个下标的数组元素的长度</span></span><br><span class=\"line\">lengthn=<span class=\"variable\">$&#123;#array_1[n]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length_1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length_2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$lengthn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h1><p><code>在执行shell脚本时，想脚本中传递参数</code></p>\n<p>shell脚本内获取参数的格式 $n , n表示数字，1表示执行shell脚本后面跟的第一个参数，2表示执行shell脚本后面跟的第二个参数，以此类推。。</p>\n<p>其中 <strong>$0</strong> 为执行的文件名（包含文件路径）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Shell 传递参数测试！&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行的文件名：<span class=\"variable\">$0</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第一个参数为：<span class=\"variable\">$1</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第二个参数为：<span class=\"variable\">$2</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第三个参数为：<span class=\"variable\">$3</span>&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行操作</span></span><br><span class=\"line\">sh shell.sh a b c </span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">Shell 传递参数测试！</span><br><span class=\"line\">执行的文件名：shell.sh</span><br><span class=\"line\">第一个参数为：a</span><br><span class=\"line\">第二个参数为：b</span><br><span class=\"line\">第三个参数为：c</span><br><span class=\"line\">几个特殊字符用来处理参数</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数处理</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$#</td>\n<td align=\"left\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$$</td>\n<td align=\"left\">脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$!</td>\n<td align=\"left\">后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$-</td>\n<td align=\"left\">显示Shell使用的当前选项，与set命令功能相同。</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Shell 传递参数测试！&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行的文件名：<span class=\"variable\">$1</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第一个参数为：<span class=\"variable\">$2</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第二个参数为：<span class=\"variable\">$3</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第三个参数为：<span class=\"variable\">$4</span>&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;参数个数为：<span class=\"variable\">$#</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;传递的参数作为一个字符串显示：$*&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行命令</span></span><br><span class=\"line\">sh shell.sh a b c d</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">Shell 传递参数测试！</span><br><span class=\"line\">执行的文件名：a</span><br><span class=\"line\">第一个参数为：b</span><br><span class=\"line\">第二个参数为：c</span><br><span class=\"line\">第三个参数为：d</span><br><span class=\"line\">参数个数为：4</span><br><span class=\"line\">传递的参数作为一个字符串显示：a b c d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a><code>算数运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法[需要在<em>前面加*<em>反斜杠</em></em>]</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">除法</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取余</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">赋值</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;&#x3D;</td>\n<td align=\"left\">相等。用于比较两个数字，相同则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">不相等。用于比较两个数字，不相同则返回 true。</td>\n</tr>\n</tbody></table>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span>            </span><br><span class=\"line\">var1=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> + <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var2=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> - <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var3=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> \\* <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var4=`<span class=\"built_in\">expr</span> <span class=\"variable\">$b</span> / <span class=\"variable\">$a</span>`</span><br><span class=\"line\">var5=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a == b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a != b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t\t  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a+b-&gt;&gt;&#x27;</span><span class=\"variable\">$var1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a-b-&gt;&gt;&#x27;</span><span class=\"variable\">$var2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a*b-&gt;&gt;&#x27;</span><span class=\"variable\">$var3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a/b-&gt;&gt;&#x27;</span><span class=\"variable\">$var4</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a=b-&gt;&gt;&#x27;</span><span class=\"variable\">$var5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh 10 20</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a != b</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a+b-&gt;&gt;30</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a-b-&gt;&gt;-10</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a*b-&gt;&gt;200</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a/b-&gt;&gt;2</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a=b-&gt;&gt;0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a><code>关系运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">检测两个数是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">检测两个数是否不相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n</tr>\n</tbody></table>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 不大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 不小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 大于或等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 小于或等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh 10 20</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">10 -eq 20: a 不等于 b</span><br><span class=\"line\">10 -ne 20: a 不等于 b</span><br><span class=\"line\">10 -gt 20: a 不大于 b</span><br><span class=\"line\">10 -lt 20: a 小于 b</span><br><span class=\"line\">10 -ge 20: a 小于 b</span><br><span class=\"line\">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a><code>布尔运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">!</td>\n<td align=\"left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">或运算，有一个表达式为 true 则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">与运算，两个表达式都为 true 才返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a><code>逻辑运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑的 AND</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑的 OR</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a><code>字符串运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">检测两个字符串是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">检测两个字符串是否不相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-z</td>\n<td align=\"left\">检测字符串长度是否为0，为0返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">检测字符串长度是否不为 0，不为 0 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">检测字符串是否不为空，不为空返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a><code>文件测试运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td align=\"left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td align=\"left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td align=\"left\">检测文件是否是目录，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td align=\"left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td align=\"left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td align=\"left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td align=\"left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td align=\"left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td align=\"left\">检测文件是否可读，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td align=\"left\">检测文件是否可写，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td align=\"left\">检测文件是否可执行，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td align=\"left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td align=\"left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用的流程控制\"><a href=\"#常用的流程控制\" class=\"headerlink\" title=\"常用的流程控制\"></a>常用的流程控制</h1><h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a><code>if else</code></h3><p>if else 的 <strong>[…]</strong> 判断语句中大于使用 <strong>-gt</strong>，小于使用 <strong>-lt</strong>。</p>\n<p>如果使用 <strong>((…))</strong> 作为判断语句，大于和小于可以直接使用 <strong>&gt;</strong> 和 **&lt;**。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> -gt <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span> ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &gt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &lt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-------&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> ));</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &gt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &lt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh  12 13</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">a &lt; b</span><br><span class=\"line\">-------</span><br><span class=\"line\">a &lt; b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if else-if else\"></a><code>if else-if else</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有符合的条件&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;---------&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &lt; <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有符合的条件&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令和执行结果</span></span><br><span class=\"line\">sh shell.sh 2 4</span><br><span class=\"line\">a 小于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 小于 b</span><br><span class=\"line\">sh shell.sh 2 2</span><br><span class=\"line\">a 等于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 等于 b</span><br><span class=\"line\">sh shell.sh 2 1</span><br><span class=\"line\">a 大于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 大于 b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a><code>for 循环</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The value is: <span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">The value is: 1</span><br><span class=\"line\">The value is: 2</span><br><span class=\"line\">The value is: 3</span><br><span class=\"line\">The value is: 4</span><br><span class=\"line\">The value is: 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a><code>while 语句</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">int=1</span><br><span class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></span><br><span class=\"line\">    <span class=\"comment\">#自加</span></span><br><span class=\"line\">    <span class=\"built_in\">let</span> <span class=\"string\">&quot;int++&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行命令</span></span><br><span class=\"line\">sh shell.sh</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a><code>死循环</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式一</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#方式二</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#方式三</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入-x2F-输出重定向\"><a href=\"#输入-x2F-输出重定向\" class=\"headerlink\" title=\"输入&#x2F;输出重定向\"></a>输入&#x2F;输出重定向</h1><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h2 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将ls展示的信息输入到a.txt文件中</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> &gt; a.txt</span><br><span class=\"line\"><span class=\"comment\">#查看a.txt内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt </span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">shell.sh</span><br></pre></td></tr></table></figure>\n\n<p>输出重定向会覆盖文件内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> b.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span> &gt; a.txt</span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果不想覆盖文件内容，可以使用追加到文件末尾</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;追加文件末尾&#x27;</span> &gt;&gt; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br><span class=\"line\">追加文件末尾</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重定向深入讲解\"><a href=\"#重定向深入讲解\" class=\"headerlink\" title=\"重定向深入讲解\"></a>重定向深入讲解</h2><p>一般情况下，每个 Unix&#x2F;Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>\n</ul>\n<p>几个基本符号及其含义</p>\n<ul>\n<li>&#x2F;dev&#x2F;null 表示空设备文件</li>\n<li>0 表示 stdin 标准输入</li>\n<li>1 表示 stdout 标准输出</li>\n<li>2 表示 stderr 标准错误</li>\n</ul>\n<blockquote>\n<p>使用 “2&gt; ” 符号，将标准错误输出重定向到文件中。形式为：命令 2&gt; 文件名</p>\n<p>使用 “2&gt;&gt; ” 符号，将标准错误输出追加到指定文件后面。形式为：命令 2&gt;&gt; 文件名</p>\n<p>使用 “2&gt;&amp;1 ” 符号或 “ &amp;&gt; ” 符号，将把标准错误输出 stderr 重定向到标准输出 stdout</p>\n<p>使用 “&gt;&#x2F;dev&#x2F;null” 符号，将命令执行结果重定向到空设备中，也就是不显示任何信息。</p>\n</blockquote>\n<h2 id=\"Here-Document\"><a href=\"#Here-Document\" class=\"headerlink\" title=\"Here Document\"></a>Here Document</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; <span class=\"string\">delimiter[一般都是EOF]</span></span><br><span class=\"line\"><span class=\"string\">    document</span></span><br><span class=\"line\"><span class=\"string\">delimiter</span>[EOF]</span><br></pre></td></tr></table></figure>\n\n<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>\n<li>开始的delimiter前后的空格会被忽略掉。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; a.txt &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">\t测试Here Document</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br><span class=\"line\">追加文件末尾</span><br><span class=\"line\">测试Here Document</span><br></pre></td></tr></table></figure>\n\n","categories":["Shell"],"tags":["Shell"]},{"title":"Spring核心原理(二)","url":"/2022/10/29/Spring/Spring_2/","content":"<h1 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h1><p>BeanDefinition是一个interface，表示Bean定义，BeanDefinition中存在很多属性用来描述一个Bean的特点。比如：</p>\n<ul>\n<li>class，表示Bean类型</li>\n<li>scope，表示Bean作用域，单例或原型等</li>\n<li>lazyInit：表示Bean是否是懒加载</li>\n<li>initMethodName：表示Bean初始化时要执行的方法</li>\n<li>destroyMethodName：表示Bean销毁时要执行的方法<br>…</li>\n</ul>\n<p>在Spring中，我们经常会通过以下几种方式来定义Bean：</p>\n<ol>\n<li><code>&lt;bean/&gt;</code></li>\n<li><code>@Bean</code></li>\n<li><code>@Component(@Service,@Controller)</code></li>\n</ol>\n<p>以上我们可以称之<strong>申明式定义Bean</strong>。</p>\n<span id=\"more\"></span>\n\n<p>还可以<strong>编程式定义Bean</strong>，那就是直接通过BeanDefinition，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个Spring容器</span></span><br><span class=\"line\">    <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">    <span class=\"comment\">// 生成一个BeanDefinition对象，并设置beanClass为User.class，并注册到ApplicationContext中</span></span><br><span class=\"line\">    <span class=\"type\">AbstractBeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class=\"line\">    <span class=\"comment\">// 可以设置很多属性，这个只是设置了Class对象</span></span><br><span class=\"line\">    beanDefinition.setBeanClass(User.class);</span><br><span class=\"line\">    context.registerBeanDefinition(<span class=\"string\">&quot;user&quot;</span>, beanDefinition);</span><br><span class=\"line\">    <span class=\"comment\">// 获取Spring容器中的bean</span></span><br><span class=\"line\">    System.out.println(context.getBean(<span class=\"string\">&quot;user&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和申明式事务、编程式事务类似，通过<code>&lt;bean/&gt;，@Bean，@Component</code>等申明式方式所定义的Bean，最终都会被Spring解析为对应的BeanDefinition对象，并放入Spring容器中。</p>\n<h1 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a>BeanDefinitionReader</h1><h3 id=\"AnnotatedBeanDefinitionReader\"><a href=\"#AnnotatedBeanDefinitionReader\" class=\"headerlink\" title=\"AnnotatedBeanDefinitionReader\"></a>AnnotatedBeanDefinitionReader</h3><p>AnnotatedBeanDefinitionReader是一个类，可以直接把某个类转换为BeanDefinition，并且会解析该类上的注解，比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建Spring容器</span></span><br><span class=\"line\">    <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class=\"line\">    <span class=\"type\">AnnotatedBeanDefinitionReader</span> <span class=\"variable\">annotatedBeanDefinitionReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotatedBeanDefinitionReader</span>(applicationContext);</span><br><span class=\"line\">    <span class=\"comment\">// 将User.class解析为BeanDefinition</span></span><br><span class=\"line\">    annotatedBeanDefinitionReader.register(User.class);</span><br><span class=\"line\">    System.out.println(applicationContext.getBean(<span class=\"string\">&quot;user&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它能解析的注解是：@Conditional，@Scope、@Lazy、@Primary、@DependsOn、@Role、@Description</p>\n<p>在AnnotatedBeanDefinitionReader类中的doRegisterBean的方法中调用下面的方法来解析：@Scope、@Lazy、@Primary、@DependsOn、@Role、@Description</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br></pre></td></tr></table></figure>\n\n<p>AnnotatedBeanDefinitionReader的构造方法中来@Conditional</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AnnotatedBeanDefinitionReader</span><span class=\"params\">(BeanDefinitionRegistry registry, Environment environment)</span> &#123;</span><br><span class=\"line\">\tAssert.notNull(registry, <span class=\"string\">&quot;BeanDefinitionRegistry must not be null&quot;</span>);</span><br><span class=\"line\">\tAssert.notNull(environment, <span class=\"string\">&quot;Environment must not be null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.registry = registry;</span><br><span class=\"line\">\t<span class=\"comment\">// 用来解析@Conditional注解的</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.conditionEvaluator = <span class=\"keyword\">new</span> <span class=\"title class_\">ConditionEvaluator</span>(registry, environment, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 注册</span></span><br><span class=\"line\">\tAnnotationConfigUtils.registerAnnotationConfigProcessors(<span class=\"built_in\">this</span>.registry);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"XmlBeanDefinitionReader\"><a href=\"#XmlBeanDefinitionReader\" class=\"headerlink\" title=\"XmlBeanDefinitionReader\"></a>XmlBeanDefinitionReader</h3><p>可以解析<code>&lt;bean/&gt;</code>标签</p>\n<h3 id=\"ClassPathBeanDefinitionScanner\"><a href=\"#ClassPathBeanDefinitionScanner\" class=\"headerlink\" title=\"ClassPathBeanDefinitionScanner\"></a>ClassPathBeanDefinitionScanner</h3><p>ClassPathBeanDefinitionScanner是扫描器，但是它的作用和BeanDefinitionReader类似，它可以进行扫描，扫描某个包路径，对扫描到的类进行解析，比如，扫描到的类上如果存在@Component注解，那么就会把这个类解析为一个BeanDefinition，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建Spring容器</span></span><br><span class=\"line\">\t<span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>();</span><br><span class=\"line\">    context.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ClassPathBeanDefinitionScanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathBeanDefinitionScanner</span>(context);</span><br><span class=\"line\">    scanner.scan(<span class=\"string\">&quot;ren.fanq&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(context.getBean(<span class=\"string\">&quot;userService&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h1><p>BeanFactory，以Factory结尾，表示它是一个工厂(接口)， 它负责生产和管理bean的一个工厂。</p>\n<p>在Spring中，BeanFactory是工厂的顶层接口，也是IOC容器的核心接口，因此BeanFactory中定义了<strong>管理Bean的通用方法</strong>，如 <strong>getBean</strong> 和 <strong>containsBean</strong> 等。</p>\n<p>BeanFactory的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。BeanFactory只是个接口，并不是IOC容器的具体实现，所以Spring容器给出了很多种实现，如 <strong>DefaultListableBeanFactory</strong>、<strong>XmlBeanFactory</strong>、<strong>ApplicationContext</strong></p>\n<p>例如DefaultListableBeanFactory，它的的继承关系图如下</p>\n<img src=\"/2022/10/29/Spring/Spring_2/image-20221019223752924.png\" class title=\"image-20221019223752924\">\n\n<p>DefaultListableBeanFactory它实现了很多接口，所以拥有很多功能：</p>\n<ol>\n<li>AliasRegistry：支持别名功能，一个名字可以对应多个别名</li>\n<li>BeanDefinitionRegistry：可以注册、保存、移除、获取某个BeanDefinition</li>\n<li>BeanFactory：Bean工厂，可以根据某个bean的名字、或类型、或别名获取某个Bean对象</li>\n<li>SingletonBeanRegistry：可以直接注册、获取某个<strong>单例</strong>Bean</li>\n<li>SimpleAliasRegistry：它是一个类，实现了AliasRegistry接口中所定义的功能，支持别名功能</li>\n<li>ListableBeanFactory：在BeanFactory的基础上，增加了其他功能，可以获取所有BeanDefinition的beanNames，可以根据某个类型获取对应的beanNames，可以根据某个类型获取{类型：对应的Bean}的映射关系</li>\n<li>HierarchicalBeanFactory：在BeanFactory的基础上，添加了获取父BeanFactory的功能</li>\n<li>DefaultSingletonBeanRegistry：它是一个类，实现了SingletonBeanRegistry接口，拥有了直接注册、获取某个<strong>单例</strong>Bean的功能</li>\n<li>ConfigurableBeanFactory：在HierarchicalBeanFactory和SingletonBeanRegistry的基础上，添加了设置父BeanFactory、类加载器（表示可以指定某个类加载器进行类的加载）、设置Spring EL表达式解析器（表示该BeanFactory可以解析EL表达式）、设置类型转化服务（表示该BeanFactory可以进行类型转化）、可以添加BeanPostProcessor（表示该BeanFactory支持Bean的后置处理器），可以合并BeanDefinition，可以销毁某个Bean等等功能</li>\n<li>FactoryBeanRegistrySupport：支持了FactoryBean的功能</li>\n<li>AutowireCapableBeanFactory：是直接继承了BeanFactory，在BeanFactory的基础上，支持在创建Bean的过程中能对Bean进行自动装配</li>\n<li>AbstractBeanFactory：实现了ConfigurableBeanFactory接口，继承了FactoryBeanRegistrySupport，这个BeanFactory的功能已经很全面了，但是不能自动装配和获取beanNames</li>\n<li>ConfigurableListableBeanFactory：继承了ListableBeanFactory、AutowireCapableBeanFactory、ConfigurableBeanFactory</li>\n<li>AbstractAutowireCapableBeanFactory：继承了AbstractBeanFactory，实现了AutowireCapableBeanFactory，拥有了自动装配的功能</li>\n<li>DefaultListableBeanFactory：继承了AbstractAutowireCapableBeanFactory，实现了ConfigurableListableBeanFactory接口和BeanDefinitionRegistry接口，所以DefaultListableBeanFactory的功能很强大</li>\n</ol>\n<h1 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h1><p>ApplicationContext是个接口，实际上也是一个BeanFactory，不过比BeanFactory更加强大，比如：</p>\n<ol>\n<li>HierarchicalBeanFactory：拥有获取父BeanFactory的功能</li>\n<li>ListableBeanFactory：拥有获取beanNames的功能</li>\n<li>ResourcePatternResolver：资源加载器，可以一次性获取多个资源（文件资源等等）</li>\n<li>EnvironmentCapable：可以获取运行时环境（没有设置运行时环境功能）</li>\n<li>ApplicationEventPublisher：拥有广播事件的功能（没有添加事件监听器的功能）</li>\n<li>MessageSource：拥有国际化功能</li>\n</ol>\n<p>ApplicationContext的继承关系图如下</p>\n<img src=\"/2022/10/29/Spring/Spring_2/image-20221019220328462.png\" class title=\"image-20221019220328462\">\n\n<h2 id=\"AnnotationConfigApplicationContext\"><a href=\"#AnnotationConfigApplicationContext\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext\"></a>AnnotationConfigApplicationContext</h2><p>在Spring的源码实现中，当我们new一个<code>AnnotationConfigApplicationContext</code>时，会先初始化其父类构造方法，在<code>GenericApplicationContext</code>的构造方法中初始化实现了<code>BeanFactory</code>接口的子类<code>DefaultListableBeanFactory</code>对象，当使用ApplicationContext的某些方法时，比如getBean()，底层调用的是BeanFactory的getBean()方法。</p>\n<p>AnnotationConfigApplicationContext的继承关系图如下</p>\n<img src=\"/2022/10/29/Spring/Spring_2/image-20221019223444752.png\" class title=\"image-20221019223444752\">\n\n<p>AnnotationConfigApplicationContext它实现了很多接口，所以拥有很多功能：</p>\n<ol>\n<li>ConfigurableApplicationContext：继承了ApplicationContext接口，增加了，添加事件监听器、添加BeanFactoryPostProcessor、设置Environment，获取ConfigurableListableBeanFactory等功能</li>\n<li>AbstractApplicationContext：实现了ConfigurableApplicationContext接口</li>\n<li>GenericApplicationContext：继承了AbstractApplicationContext，实现了BeanDefinitionRegistry接口，拥有了所有ApplicationContext的功能，并且可以注册BeanDefinition，注意这个类中有一个属性(DefaultListableBeanFactory <strong>beanFactory</strong>)</li>\n<li>AnnotationConfigRegistry：可以单独注册某个为类为BeanDefinition（可以处理该类上的**@Configuration注解<strong>，已经可以处理</strong>@Bean注解**），同时可以扫描</li>\n<li>AnnotationConfigApplicationContext：继承了GenericApplicationContext，实现了AnnotationConfigRegistry接口，拥有了以上所有的功能</li>\n</ol>\n<h2 id=\"ClassPathXmlApplicationContext\"><a href=\"#ClassPathXmlApplicationContext\" class=\"headerlink\" title=\"ClassPathXmlApplicationContext\"></a>ClassPathXmlApplicationContext</h2><p>它也是继承了AbstractApplicationContext，但是相对于AnnotationConfigApplicationContext而言，功能没有AnnotationConfigApplicationContext强大，比如不能注册BeanDefinition。</p>\n<p>ClassPathXmlApplicationContext的继承关系图如下</p>\n<img src=\"/2022/10/29/Spring/Spring_2/image-20221019231951504.png\" class title=\"image-20221019231951504\">\n\n<h1 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h1><h2 id=\"PropertyEditor\"><a href=\"#PropertyEditor\" class=\"headerlink\" title=\"PropertyEditor\"></a>PropertyEditor</h2><p>是JDK中提供的类型转化服务的interface，使用方式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个工具类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringToUserPropertyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyEditorSupport</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PropertyEditor</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAsText</span><span class=\"params\">(String text)</span> <span class=\"keyword\">throws</span> IllegalArgumentException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setName(text);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.setValue(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接创建对象测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringToUserPropertyEditor</span> <span class=\"variable\">propertyEditor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringToUserPropertyEditor</span>();</span><br><span class=\"line\">propertyEditor.setAsText(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> (User) propertyEditor.getValue();</span><br><span class=\"line\">System.out.println(value+<span class=\"string\">&quot;\\t&quot;</span>+value.getName());</span><br></pre></td></tr></table></figure>\n\n<p>向Spring中注册Bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CustomEditorConfigurer <span class=\"title function_\">customEditorConfigurer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomEditorConfigurer</span> <span class=\"variable\">customEditorConfigurer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CustomEditorConfigurer</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 构造map是因为CustomEditorConfigurer的setCustomEditors方法入参</span></span><br><span class=\"line\">    Map&lt;Class&lt;?&gt;, Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">PropertyEditor</span>&gt;&gt; propertyEditorMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">    \t表示StringToUserPropertyEditor可以将String转化成User类型，</span></span><br><span class=\"line\"><span class=\"comment\">    \t在Spring源码中，如果发现当前对象是String,而需要的类型是User，</span></span><br><span class=\"line\"><span class=\"comment\">    \t就会使用该PropertyEditor来做类型转化</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    propertyEditorMap.put(User.class, StringToUserPropertyEditor.class);</span><br><span class=\"line\">    customEditorConfigurer.setCustomEditors(propertyEditorMap);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> customEditorConfigurer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现依赖注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;xxx&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(user.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// User的name属性值就是xxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ConversionService\"><a href=\"#ConversionService\" class=\"headerlink\" title=\"ConversionService\"></a>ConversionService</h2><p>Spring中提供的类型转化服务的interface，它比PropertyEditor更强大，使用方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringToUserConverter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConditionalGenericConverter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置类型匹配</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(TypeDescriptor sourceType, TypeDescriptor targetType)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sourceType.getType().equals(String.class) &amp;&amp; targetType.getType().equals(User.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置类型转换</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Set&lt;ConvertiblePair&gt; <span class=\"title function_\">getConvertibleTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Collections.singleton(<span class=\"keyword\">new</span> <span class=\"title class_\">ConvertiblePair</span>(String.class, User.class));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际类型转换赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">convert</span><span class=\"params\">(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setName((String)source);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接创建对象测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DefaultConversionService</span> <span class=\"variable\">conversionService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConversionService</span>();</span><br><span class=\"line\">conversionService.addConverter(<span class=\"keyword\">new</span> <span class=\"title class_\">StringToUserConverter</span>());</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> conversionService.convert(<span class=\"string\">&quot;1&quot;</span>, User.class);</span><br><span class=\"line\">System.out.println(value);</span><br></pre></td></tr></table></figure>\n\n<p>向Spring中注册Bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ConversionServiceFactoryBean <span class=\"title function_\">conversionService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">ConversionServiceFactoryBean</span> <span class=\"variable\">conversionServiceFactoryBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConversionServiceFactoryBean</span>();</span><br><span class=\"line\">\tconversionServiceFactoryBean.setConverters(Collections.singleton(<span class=\"keyword\">new</span> <span class=\"title class_\">StringToUserConverter</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> conversionServiceFactoryBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现依赖注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;xxx&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(user.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// User的name属性值就是xxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TyeConverter\"><a href=\"#TyeConverter\" class=\"headerlink\" title=\"TyeConverter\"></a>TyeConverter</h2><p>整合了PropertyEditor和ConversionService的功能，是Spring内部用的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SimpleTypeConverter</span> <span class=\"variable\">typeConverter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleTypeConverter</span>();</span><br><span class=\"line\"><span class=\"comment\">//注册或者设置类型转换器</span></span><br><span class=\"line\">typeConverter.registerCustomEditor(User.class, <span class=\"keyword\">new</span> <span class=\"title class_\">StringToUserPropertyEditor</span>());</span><br><span class=\"line\"><span class=\"comment\">//typeConverter.setConversionService(conversionService);</span></span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> typeConverter.convertIfNecessary(<span class=\"string\">&quot;1&quot;</span>, User.class);</span><br><span class=\"line\">System.out.println(valuegetName());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"OrderComparator\"><a href=\"#OrderComparator\" class=\"headerlink\" title=\"OrderComparator\"></a>OrderComparator</h1><p>OrderComparator是Spring所提供的一种比较器，可以用来根据@Order注解或实现Ordered接口来进行比较，从而进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Ordered</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getClass().getSimpleName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Ordered</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getClass().getSimpleName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// order=3</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// order=2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">OrderComparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderComparator</span>();</span><br><span class=\"line\">\t\tSystem.out.println(comparator.compare(a, b));  <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tlist.add(a);</span><br><span class=\"line\">\t\tlist.add(b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 按order值升序排序</span></span><br><span class=\"line\">\t\tlist.sort(comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(list);  <span class=\"comment\">// B，A</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring中还提供了一个OrderComparator的子类：<strong>AnnotationAwareOrderComparator</strong>，它支持用@Order来指定order值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order(3)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getClass().getSimpleName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"meta\">@Order(2)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getClass().getSimpleName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>(); <span class=\"comment\">// order=3</span></span><br><span class=\"line\">\t\t<span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>(); <span class=\"comment\">// order=2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">AnnotationAwareOrderComparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationAwareOrderComparator</span>();</span><br><span class=\"line\">\t\tSystem.out.println(comparator.compare(a, b)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\tlist.add(a);</span><br><span class=\"line\">\t\tlist.add(b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 按order值升序排序</span></span><br><span class=\"line\">\t\tlist.sort(comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(list); <span class=\"comment\">// B，A</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a>BeanPostProcessor</h1><p><code>BeanPostProcessor</code>也称为Bean后置处理器，它是Spring中定义的接口，在Spring容器的创建过程中（具体为Bean初始化前后）会回调<code>BeanPostProcessor</code>中定义的两个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Spring"],"tags":["Spring"]},{"title":"tree","url":"/2024/07/28/Shell/git%E4%B8%AD%E6%B7%BB%E5%8A%A0tree%E5%91%BD%E4%BB%A4/","content":"<h1 id=\"Windows下直接使用tree\"><a href=\"#Windows下直接使用tree\" class=\"headerlink\" title=\"Windows下直接使用tree\"></a>Windows下直接使用tree</h1><p><code>tree</code>可以显示目录结构，windows下在cmd中可以直接使用，但是显示会有点瑕疵，不会直接显示子级目录前面的<code>---</code></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tree</span> /F /A</span><br><span class=\"line\"></span><br><span class=\"line\">+---base</span><br><span class=\"line\">|   +---config</span><br><span class=\"line\">|   |       config.yaml</span><br><span class=\"line\">|   |       kustomization.yaml</span><br><span class=\"line\">|   |</span><br><span class=\"line\">|   +---nginx</span><br><span class=\"line\">|   |       hpa.yaml</span><br><span class=\"line\">|   |       kustomization.yaml</span><br><span class=\"line\">|   |       nginx.yaml</span><br><span class=\"line\">|   |</span><br><span class=\"line\">|   \\---redis</span><br><span class=\"line\">|           hpa.yaml</span><br><span class=\"line\">|           kustomization.yaml</span><br><span class=\"line\">|           redis.yaml</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Git中安装tree-for-windows\"><a href=\"#Git中安装tree-for-windows\" class=\"headerlink\" title=\"Git中安装tree for windows\"></a>Git中安装tree for windows</h1><p><a href=\"https://gnuwin32.sourceforge.net/packages/tree.html\">tree for windows</a>安装包。下载Binaries，解压后将<code>tree.exe</code>复制到git的安装目录中的<code>D:\\develop\\Git\\usr\\bin</code>，新建git bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -C -A</span><br><span class=\"line\"></span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── config.yaml</span><br><span class=\"line\">│   └── kustomization.yaml</span><br><span class=\"line\">├── nginx</span><br><span class=\"line\">│   ├── hpa.yaml</span><br><span class=\"line\">│   ├── kustomization.yaml</span><br><span class=\"line\">│   └── nginx.yaml</span><br><span class=\"line\">└── redis</span><br><span class=\"line\">    ├── hpa.yaml</span><br><span class=\"line\">    ├── kustomization.yaml</span><br><span class=\"line\">    └── redis.yaml</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>tree命令行参数：</p>\n<ul>\n<li>-a 显示所有文件和目录。</li>\n<li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li>\n<li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li>\n<li>-d 显示目录名称而非内容。</li>\n<li>-D 列出文件或目录的更改时间。</li>\n<li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li>\n<li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”&#x2F;“,”&#x3D;”,”@”,”|”号。</li>\n<li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>\n<li>-i 不以阶梯状列出文件或目录名称。</li>\n<li>-I 不显示符合范本样式的文件或目录名称。</li>\n<li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>\n<li>-n 不在文件和目录清单加上色彩。</li>\n<li>-N 直接列出文件和目录名称，包括控制字符。</li>\n<li>-p 列出权限标示。</li>\n<li>-P 只显示符合范本样式的文件或目录名称。</li>\n<li>-q 用”?”号取代控制字符，列出文件和目录名称。</li>\n<li>-s 列出文件或目录大小。</li>\n<li>-t 用文件和目录的更改时间排序。</li>\n<li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>\n<li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>\n</ul>\n","categories":["Shell"],"tags":["Shell"]},{"title":"SpringBoot","url":"/2024/06/24/SpringBoot/SpringBoot/","content":"<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1>","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"Shell进阶","url":"/2023/02/11/Shell/shell%E8%BF%9B%E9%98%B6/","content":"<h1 id=\"获取当前所执行的shell的文件夹\"><a href=\"#获取当前所执行的shell的文件夹\" class=\"headerlink\" title=\"获取当前所执行的shell的文件夹\"></a>获取当前所执行的shell的文件夹</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span>=<span class=\"string\">&quot;<span class=\"subst\">$( cd <span class=\"string\">&quot;<span class=\"subst\">$( dirname <span class=\"string\">&quot;<span class=\"variable\">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span> )</span>&quot;</span> &amp;&amp; pwd )</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$dir</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;dir&#125;</span>/..&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n\n<p><code>$&#123;BASH_SOURCE[0]&#125;</code>表示bash脚本的第一个参数（如果第一个参数是bash，表明这是要执行bash脚本，这时<code>&quot;$&#123;BASH_SOURCE[0]&#125;&quot;</code>自动转换为第二个参数），例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh /data/shell/shell.sh</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>&quot;$&#123;BASH_SOURCE[0]&#125;&quot;</code>代表的是<code>/data/shell/shell.sh</code>。<br><code>&quot;dirname&quot;</code>表示提取参数里的目录，<code>dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot;</code>表示提取bash脚本第一个参数里的目录，例如<code>/data/shell/shell.sh”的目录为&quot;/data/shell</code>。<br><code>cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )</code>“表示切换到刚才提取的目录，<br><code>dir=cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd</code>则表示，如果第一条语句顺利执行，就执行<code>pwd</code>显示当前目录，并将结果赋值给变量<code>dir</code>。<br><code>cd &quot;$&#123;dir&#125;/..</code>切换到<code>dir</code>变量所指目录的上一级目录。</p>\n","categories":["Shell"],"tags":["Shell"]},{"title":"SpringBoot容器化单元测试","url":"/2024/08/04/SpringBoot/SpringBoot%E5%AE%B9%E5%99%A8%E5%8C%96ut/","content":"<h1 id=\"单元测试UT\"><a href=\"#单元测试UT\" class=\"headerlink\" title=\"单元测试UT\"></a>单元测试UT</h1><h2 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h2><p>开发在自己电脑上进行开发和测试的时候，maven几乎都是安装包或者idea自身提供的，然后其他开发和测试依赖的组件，例如<code>mysql数据库</code>，<code>redis缓存等</code>，都是使用容器化方式部署到本地，这样在开发和测试可以快速<code>debug</code>。</p>\n<h2 id=\"线上\"><a href=\"#线上\" class=\"headerlink\" title=\"线上\"></a>线上</h2><p>线上都是流水线一体化作业，可以使用<code>git action</code>，<code>git lab cicd</code>，<code>azure devops</code>，<code>jenkins</code>等。</p>\n<p>这些的编译，单元测试，构建服务镜像都是使用容器化来编排操作的，因为容器化是无状态的，可以快速扩展和升降级相关组件版本。</p>\n<h1 id=\"UT环境搭建\"><a href=\"#UT环境搭建\" class=\"headerlink\" title=\"UT环境搭建\"></a>UT环境搭建</h1><h2 id=\"本地-1\"><a href=\"#本地-1\" class=\"headerlink\" title=\"本地\"></a>本地</h2><p>在本地启动所需组件可以是容器启动，也可以是直接安装对应组件的客户端；</p>\n<p>由于拥抱未来，所以只讨论容器启动所需组件。在容器的前提下，容器的启动方式可以是动态启动的，也可以是提前准备好的容器。</p>\n<h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3><p>使用<code>docker</code>来启动相关的<code>mysql</code>和<code>redis</code>的，如果需要保留测试数据，需要再启动的时候挂载目录来持久化；可以使用<code>docker run</code>也可以使用<code>docker compose</code>来拉起容器。</p>\n<h3 id=\"动态启动\"><a href=\"#动态启动\" class=\"headerlink\" title=\"动态启动\"></a>动态启动</h3><p><code>Java</code>有相关类库来支持<code>UT</code>启动所需容器，<a href=\"https://testcontainers.com/\">testcontainers</a>。在<code>UT</code>阶段，<code>testcontainers</code>可以动态启动所需容器，他会自动hook本机的docker sock，这样就可以直接在本机上动态启动容器了，如果本机没有<code>docker</code>，那<code>UT</code>将无法执行。</p>\n<span id=\"more\"></span>\n\n<p>使用方法，添加maven 中的<code>pom</code>依赖和对应的测试数据库驱动，我这里使用的<code>mysql9</code>分库分表的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.testcontainers/testcontainers --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.testcontainers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>testcontainers<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.20.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.testcontainers/mysql --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.testcontainers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.20.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">&lt;/dependency</span><br></pre></td></tr></table></figure>\n\n<p>在<code>UT</code>的中添加启动所需组件的代码和相关初始化配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@ExtendWith(SpringExtension.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ActiveProfiles(profiles = &#123;&quot;test&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureMockMvc</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloControllerTest</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义redis容器</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> GenericContainer&lt;?&gt; redis = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericContainer</span>&lt;&gt;(</span><br><span class=\"line\">            DockerImageName.parse(<span class=\"string\">&quot;redis:latest&quot;</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">            .withExposedPorts(<span class=\"number\">6379</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//定义mysql9容器</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> MySQLContainer&lt;?&gt; mysql = <span class=\"keyword\">new</span> <span class=\"title class_\">MySQLContainer</span>&lt;&gt;(</span><br><span class=\"line\">            DockerImageName.parse(<span class=\"string\">&quot;dockerhub.qingcloud.com/doubao/mysql:9.0.1&quot;</span>).asCompatibleSubstituteFor(<span class=\"string\">&quot;mysql&quot;</span>)</span><br><span class=\"line\">    ).withAccessToHost(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"comment\">//默认的用户名和密码都是test，root的密码默认也是test，如果使用test用户来链接数据库会提示没有权限。需要执行sql来赋权</span></span><br><span class=\"line\">            .withUsername(<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//容器的端口，并不是对外暴露服务的端口，对外暴露的端口是随机的，这样在线上不会有端口冲突。</span></span><br><span class=\"line\">            .withExposedPorts(<span class=\"number\">3306</span>) <span class=\"comment\">//;</span></span><br><span class=\"line\">        <span class=\"comment\">//这样可以固定对外暴露的端口，在本地可以这样，因为使用数据库客户端连接是方便的，如果不是固定的，想要链接的话，可以看sprinbootlog和docker ps查看对外暴露的端口。</span></span><br><span class=\"line\">            .waitingFor(Wait.forListeningPort())</span><br><span class=\"line\">            .withCreateContainerCmdModifier(cmd -&gt; cmd.withHostConfig(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">HostConfig</span>().withPortBindings(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> <span class=\"title class_\">PortBinding</span>(Ports.Binding.bindPort(<span class=\"number\">33064</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">ExposedPort</span>(<span class=\"number\">3306</span>))</span><br><span class=\"line\">                    )</span><br><span class=\"line\">            ));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@DynamicPropertySource</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redisProperties</span><span class=\"params\">(DynamicPropertyRegistry registry)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//启动redis容器，并覆盖原有yaml中的信息。</span></span><br><span class=\"line\">        redis.start();</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.data.redis.host&quot;</span>, redis::getHost);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.data.redis.port&quot;</span>, redis::getFirstMappedPort);</span><br><span class=\"line\">\t\t<span class=\"comment\">//启动mysql容器，由于是分库的，官方容器中并不包含测试库，所以在启动mysql容器后，先建库</span></span><br><span class=\"line\">        mysql.start();</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(mysql.getJdbcUrl(), mysql.getUsername(), mysql.getPassword());</span><br><span class=\"line\">        <span class=\"type\">Statement</span> <span class=\"variable\">statement</span> <span class=\"operator\">=</span> connection.createStatement() ;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">createPrimaryDatabaseSQL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;CREATE DATABASE doubao_primary_test&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">createSlaveDatabaseSQL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;CREATE DATABASE doubao_slave_test&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//执行建库语句</span></span><br><span class=\"line\">        statement.executeUpdate(createPrimaryDatabaseSQL);</span><br><span class=\"line\">        statement.executeUpdate(createSlaveDatabaseSQL);</span><br><span class=\"line\">\t\t<span class=\"comment\">//由于分库，所以需要手动更改默认库，testcontainers对于mysql的默认库是test，所以我手动更改成我自己的测试库，</span></span><br><span class=\"line\">        Supplier&lt;String&gt; primary = () -&gt; mysql.getJdbcUrl().replace(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;doubao_primary_test&quot;</span>);</span><br><span class=\"line\">        Supplier&lt;String&gt; slave = () -&gt; mysql.getJdbcUrl().replace(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;doubao_slave_test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//覆盖原有yaml的信息</span></span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.primary.url&quot;</span>, primary::get);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.primary.username&quot;</span>, mysql::getUsername);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.primary.password&quot;</span>, mysql::getPassword);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.slave.url&quot;</span>, slave::get);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.slave.username&quot;</span>, mysql::getUsername);</span><br><span class=\"line\">        registry.add(<span class=\"string\">&quot;spring.datasource.dynamic.datasource.slave.password&quot;</span>, mysql::getPassword);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动<code>UT</code>然后打个断点，然后查看本机上启动的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\oge&gt; docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE                                        COMMAND                   CREATED         STATUS         PORTS                                NAMES</span><br><span class=\"line\">909d5d15b567   dockerhub.qingcloud.com/doubao/mysql:9.0.1   <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   3 minutes ago   Up 3 minutes   33060/tcp, 0.0.0.0:33064-&gt;3306/tcp   trusting_keller</span><br><span class=\"line\">10475eb07397   testcontainers/sshd:1.2.0                    <span class=\"string\">&quot;sh -c &#x27;echo <span class=\"variable\">$&#123;USERN…&quot;   3 minutes ago   Up 3 minutes   0.0.0.0:4894-&gt;22/tcp                 jolly_swirles</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">bd52b75a10c5   redis:latest                                 &quot;docker-entrypoint.s…&quot;   3 minutes ago   Up 3 minutes   0.0.0.0:4892-&gt;6379/tcp               confident_mcclintock</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">a37e9186d65f   testcontainers/ryuk:0.8.1                    &quot;/bin/ryuk&quot;               3 minutes ago   Up 3 minutes   0.0.0.0:4890-&gt;8080/tcp               testcontainers-ryuk-73ea9ceb-6f3a-4bee-8300-01c67697f251</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">PS C:\\Users\\oge&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中有两个容器是<code>testcontainers</code>的，剩下的<code>redis</code>和<code>mysql</code>就是<code>UT</code>测试所需的组件。<code>mysql</code>对外暴露的端口也是<code>33064</code>，这样就可以使用数据库客户端进行链接了。但是线上无法固定端口，因为线上可能有多个服务同时启动<code>UT</code>。</p>\n<h2 id=\"线上-1\"><a href=\"#线上-1\" class=\"headerlink\" title=\"线上\"></a>线上</h2><p>线上都是流水线可能使用到<code>git action</code>，<code>git lab cicd</code>，<code>azure devops</code>，<code>jenkins</code>等。所以这里直接跳过流水线执行部分，直接讨论<code>UT</code>启动方式。</p>\n<h3 id=\"不依赖相关组件\"><a href=\"#不依赖相关组件\" class=\"headerlink\" title=\"不依赖相关组件\"></a>不依赖相关组件</h3><p>可以直接使用<code>maven</code>容器来直接进行<code>UT</code>.</p>\n<h3 id=\"依赖相关组件\"><a href=\"#依赖相关组件\" class=\"headerlink\" title=\"依赖相关组件\"></a>依赖相关组件</h3><p>依赖相关组件的话，启动相关组件就可以有很多方式。</p>\n<h5 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h5><p>可以再流水线中直接docker run，比较蠢，并且多服务一起<code>UT</code>时会相互影响。不推荐。</p>\n<h5 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h5><p><code>docker compose</code>来启动，默认会创建当前<code>docker-compose.yml</code>所在的目录名字的网络，这样对于多个服务一起<code>UT</code>不会有影响，但是会有性能开销，空间换时间。</p>\n<p><code>docker compose</code>可以直接启动<code>maven</code>，<code>redis</code>，<code>mysql</code>等，然后将项目内容挂载到<code>maven</code>容器中，容器中的初始化化数据库可以使用<code>dockerfile</code>来自定义或者直接<code>docker commit</code>来完成</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">maven-v:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">maven:3.9.8-amazoncorretto-17</span></span><br><span class=\"line\">    <span class=\"attr\">working_dir:</span> <span class=\"string\">/usr/src/mymaven</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;mvn clean verify -Dspring.datasource.dynamic.datasource.primary.url=jdbc:mysql://mysql:3306/doubao-primary-test?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false -Dspring.data.redis.host=redis -Dspring.data.redis.port=6379&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">maven-repo:/root/.m2/</span> <span class=\"comment\"># maven的.m2加速</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">.:/usr/src/mymaven</span> <span class=\"comment\">#当前代码挂载到maven容器的workdir中</span></span><br><span class=\"line\">    <span class=\"attr\">tty:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:7.0.5</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:9.0.1</span></span><br><span class=\"line\">    <span class=\"attr\">tty:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">rootpassword</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">maven-repo:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">maven-repo-ut</span> <span class=\"comment\"># maven的.m2加速</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Java类库\"><a href=\"#Java类库\" class=\"headerlink\" title=\"Java类库\"></a>Java类库</h5><p>对于不同的流水线触发<code>maven</code>指定<code>ut</code>的触发方式可能不同。所以测试只考虑使用<code>docker compose</code>来启动，并将带有<code>testcontainers</code>的代码挂载到maven中，执行<code>UT</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">maven-v:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">maven:3.8.6-amazoncorretto-17</span></span><br><span class=\"line\">    <span class=\"attr\">working_dir:</span> <span class=\"string\">/usr/src/mymaven</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;mvn clean verify&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span> <span class=\"comment\">#testcontainers需要docker的sock，不挂载的话，maven容器是没有的</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">maven-repo:/root/.m2/</span> <span class=\"comment\"># maven的.m2加速</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">.:/usr/src/mymaven</span></span><br><span class=\"line\">    <span class=\"attr\">tty:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">maven-repo:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">maven-repo-ut</span> <span class=\"comment\"># maven的.m2加速</span></span><br></pre></td></tr></table></figure>\n\n<p><code>docker compose</code>启动<code>maven</code>编译后，可以看到本机上的容器，<code>testcontainers</code>会通过挂载给<code>maven</code>容器的本机<code>docker</code>的<code>sock</code>来启动代码中引用的<code>mysql</code>和<code>redis</code>容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~/doubao-service-poc<span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID   IMAGE                                           COMMAND                  CREATED          STATUS          PORTS                                                                      NAMES</span><br><span class=\"line\">2e25b580e813   dockerhub.qingcloud.com/doubao/mysql:9.0.1      <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   19 seconds ago   Up 18 seconds   33060/tcp, 0.0.0.0:33064-&gt;3306/tcp, :::33064-&gt;3306/tcp                     sad_keller</span><br><span class=\"line\">4ed3af2bb239   testcontainers/sshd:1.2.0                       <span class=\"string\">&quot;sh -c &#x27;echo <span class=\"variable\">$&#123;USERN…&quot;   19 seconds ago   Up 18 seconds   0.0.0.0:32773-&gt;22/tcp, :::32773-&gt;22/tcp                                    jolly_lehmann</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">527856b83f4b   redis:latest                                    &quot;docker-entrypoint.s…&quot;   20 seconds ago   Up 19 seconds   0.0.0.0:32772-&gt;6379/tcp, :::32772-&gt;6379/tcp                                blissful_ptolemy</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">a879669cbd3e   testcontainers/ryuk:0.8.1                       &quot;/bin/ryuk&quot;              20 seconds ago   Up 19 seconds   0.0.0.0:32771-&gt;8080/tcp, :::32771-&gt;8080/tcp                                testcontainers-ryuk-152b59a4-0601-4283-8bca-f5a1ae054795</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">f9d9790d38c3   maven:3.8.6-amazoncorretto-17                   &quot;/usr/local/bin/mvn-…&quot;   7 minutes ago    Up 7 minutes                                                                               doubao-service-poc-maven-v-1</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">059bb5e1f06f   dockerhub.qingcloud.com/doubao/mysql:9.0.1      &quot;docker-entrypoint.s…&quot;   21 hours ago     Up 50 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp                       mysql9</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">e244d45174b3   dockerhub.qingcloud.com/doubao/rancher:latest   &quot;entrypoint.sh&quot;          3 weeks ago      Up 50 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, :::443-&gt;443/tcp   rancher</span></span></span><br><span class=\"line\"><span class=\"variable\"><span class=\"string\">root@devops:~/doubao-service-poc#</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"SpringBoot Maven Archetype","url":"/2024/08/03/SpringBoot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/","content":"<h1 id=\"生成自定义archetype\"><a href=\"#生成自定义archetype\" class=\"headerlink\" title=\"生成自定义archetype\"></a>生成自定义<code>archetype</code></h1><p>根据现有项目来生成一个<code>maven archetype</code>, 现有项目目录结构如下</p>\n<img src=\"/2024/08/03/SpringBoot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/image-20240803231028360.png\" class title=\"image-20240803231028360\">\n\n<span id=\"more\"></span>\n\n<p>在当前项目目录下执行命名<code>mvn archetype:create-from-project</code>，完成后会在target目录下产生一个<code>archetype</code>目录</p>\n<img src=\"/2024/08/03/SpringBoot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/image-20240803231512846.png\" class title=\"image-20240803231512846\">\n\n<h1 id=\"主要目录说明\"><a href=\"#主要目录说明\" class=\"headerlink\" title=\"主要目录说明\"></a>主要目录说明</h1><h2 id=\"archetype-resources\"><a href=\"#archetype-resources\" class=\"headerlink\" title=\"archetype-resources\"></a>archetype-resources</h2><p>下面放着模板项目的主要目录结构，如果是空文件夹，archetype是不会渲染的。</p>\n<p>对于<code>.gitignore</code>需要再<code>archetype-metadata.xml</code>元数据中特殊处理。</p>\n<h2 id=\"META-INF\"><a href=\"#META-INF\" class=\"headerlink\" title=\"META-INF\"></a>META-INF</h2><p>下面放着<code>archetype-metadata.xml</code>元数据</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">archetype-descriptor</span> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;https://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0 http://maven.apache.org/xsd/archetype-descriptor-1.1.0.xsd&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;doubao-service&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;https://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--特殊处理.gitignore--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">requiredProperties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">requiredProperty</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;gitignore&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">defaultValue</span>&gt;</span>.gitignore<span class=\"tag\">&lt;/<span class=\"name\">defaultValue</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">requiredProperty</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">requiredProperties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fileSets</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">packaged</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.java<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.yml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.sql<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">packaged</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.java<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.yml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>config/checkstyle<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">filtered</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>.mvn<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileSet</span> <span class=\"attr\">encoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--特殊处理.gitignore--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>__gitignore__<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>Dockerfile<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>Jenkinsfile<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>lombok.config<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>README.md<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>mvnw.cmd<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>mvnw<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fileSet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">fileSets</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">archetype-descriptor</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊处理\"><a href=\"#特殊处理\" class=\"headerlink\" title=\"特殊处理\"></a>特殊处理</h2><p>需要手动复制<code>.gitignore</code>并更改名字，放到模板项目的根目录下。</p>\n<img src=\"/2024/08/03/SpringBoot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/image-20240803232200116.png\" class title=\"image-20240803232200116\">\n\n<h1 id=\"安装archetype到本地\"><a href=\"#安装archetype到本地\" class=\"headerlink\" title=\"安装archetype到本地\"></a>安装archetype到本地</h1><p>进入到<code>archetype</code>这层目录执行命令<code>mvn install</code>然后再执行<code>mvn archetype:crawl</code>生成Catalog，生成的在默认在maven的repository目录下的<code>archetype-catalog.xml</code>中，里面有archetype信息。</p>\n<img src=\"/2024/08/03/SpringBoot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/image-20240803232413015.png\" class title=\"image-20240803232413015\">\n\n<h1 id=\"简单使用和进阶使用archetype\"><a href=\"#简单使用和进阶使用archetype\" class=\"headerlink\" title=\"简单使用和进阶使用archetype\"></a>简单使用和进阶使用archetype</h1><h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>见<a href=\"https://github.com/dooubb/spring-boot-archetype.git\">git仓库Readme</a>，里面的如何使用<code>archetype</code></p>\n<h2 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h2><p>可以将执行完<code>mvn archetype:create-from-project</code>后在target目录下产生一个<code>archetype</code>目录单独新建成另一个项目，这个项目单独就是一个<code>archetype 项目</code>，这个项目不能运行，只能用来构建现有模板。</p>\n<p>具体使用方法见<a href=\"https://github.com/dooubb/spring-boot-archetype.git\">git仓库代码</a></p>\n","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"ThreadPool","url":"/2024/06/24/ThreadPool/ThreadPool/","content":"<h1 id=\"ThreadPool\"><a href=\"#ThreadPool\" class=\"headerlink\" title=\"ThreadPool\"></a>ThreadPool</h1>","categories":["ThreadPool"],"tags":["ThreadPool"]},{"title":"Zookeeper","url":"/2021/11/21/Zookeeper/Zookeeper/","content":"<h1 id=\"什么是Zookeeper\"><a href=\"#什么是Zookeeper\" class=\"headerlink\" title=\"什么是Zookeeper\"></a>什么是Zookeeper</h1><p>官方文档上解释说，zookeeper它是一个分布式协调框架，主要是用来解决分布式应用中经常遇到得一些数据管理问题。例如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。。。</p>\n<h1 id=\"Zookeeper核心概念\"><a href=\"#Zookeeper核心概念\" class=\"headerlink\" title=\"Zookeeper核心概念\"></a>Zookeeper核心概念</h1><p>Zookeeper是一个用于存储少量数据的基于内存的数据库，主要有两个核心概念：文件系统数据结构和监听通知机制。</p>\n<h2 id=\"文件系统数据结构\"><a href=\"#文件系统数据结构\" class=\"headerlink\" title=\"文件系统数据结构\"></a>文件系统数据结构</h2><p>Zookeeper维护一个类似文件系统的数据结构，如下图</p>\n<p><img src=\"/./image-20210508182538218.png\" alt=\"image-20210508182538218\"></p>\n<p>每个子目录都被称为**znode(目录节点)**，和文件系统类似，我们可以自由增加、删除znode，在znode下增加、删除znode。</p>\n<h3 id=\"Zookeeper有六种类型的znode-新版本又增加了两个\"><a href=\"#Zookeeper有六种类型的znode-新版本又增加了两个\" class=\"headerlink\" title=\"Zookeeper有六种类型的znode(新版本又增加了两个)\"></a>Zookeeper有六种类型的znode(新版本又增加了两个)</h3><ul>\n<li><h4 id=\"PERSISTENT-持久化目录节点\"><a href=\"#PERSISTENT-持久化目录节点\" class=\"headerlink\" title=\"PERSISTENT-持久化目录节点\"></a>PERSISTENT-持久化目录节点</h4></li>\n</ul>\n<p>客户端与Zookeeper断开连接后，该节点依然存在，只要不手动删除改节点，它将一直存在。</p>\n<ul>\n<li><h4 id=\"PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点\"><a href=\"#PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点\" class=\"headerlink\" title=\"PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点\"></a>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点</h4></li>\n</ul>\n<p>客户端与Zookeeper断开连接后，该节点依然存在，只是Zookeeper给该节点名称进行顺序编号</p>\n<ul>\n<li><h4 id=\"EPHEMERAL-临时目录节点\"><a href=\"#EPHEMERAL-临时目录节点\" class=\"headerlink\" title=\"EPHEMERAL-临时目录节点\"></a>EPHEMERAL-临时目录节点</h4></li>\n</ul>\n<p>客户端与zookeeper断开连接后，该节点被删除</p>\n<ul>\n<li><h4 id=\"EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点\"><a href=\"#EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点\" class=\"headerlink\" title=\"EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点\"></a>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点</h4></li>\n</ul>\n<p>客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p>\n<ul>\n<li><h4 id=\"Container-节点\"><a href=\"#Container-节点\" class=\"headerlink\" title=\"Container 节点\"></a>Container 节点</h4></li>\n</ul>\n<p>3.5.3 版本新增，如果Container节点下面没有子节点，则Container节点在未来会被Zookeeper自动清除,定时任务默认60s 检查一次</p>\n<ul>\n<li><h4 id=\"TTL-节点\"><a href=\"#TTL-节点\" class=\"headerlink\" title=\"TTL 节点\"></a>TTL 节点</h4></li>\n</ul>\n<p> 默认禁用，只能通过系统配置 <em>zookeeper.extendedTypesEnabled&#x3D;true</em> 开启，不稳定</p>\n<p><img src=\"/./image-20210508183449347.png\" alt=\"image-20210508183449347\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"监听通知机制\"><a href=\"#监听通知机制\" class=\"headerlink\" title=\"监听通知机制\"></a>监听通知机制</h2><p>未完待续。。。</p>\n<p><img src=\"/Zookeeper.assets/image-20240624215251539.png\" alt=\"image-20240624215251539\"></p>\n","categories":["Zookeeper"],"tags":["Zookeeper"]},{"title":"Ingress","url":"/2023/03/16/k8s/Ingress/","content":"<h1 id=\"Ingress过滤掉某些接口\"><a href=\"#Ingress过滤掉某些接口\" class=\"headerlink\" title=\"Ingress过滤掉某些接口\"></a>Ingress过滤掉某些接口</h1><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-wp-dev</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"comment\">#请求路径重写</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"string\">/$2</span></span><br><span class=\"line\">    <span class=\"comment\">#限制上传文件大小</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;100m&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">#匹配到请求路径直接返回404</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/server-snippet:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      if ( $request_uri ~*  (/health|/api|/swagger)) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                 return 404;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">doubao.fun</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">paths:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/far/(|$)(.*)</span> <span class=\"comment\">#匹配路径中带有far的请求, 然后将far去掉</span></span><br><span class=\"line\">            <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">            <span class=\"attr\">backend:</span></span><br><span class=\"line\">              <span class=\"attr\">service:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">uiservice</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span></span><br><span class=\"line\">                  <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/boo/(|$)(.*)</span> <span class=\"comment\">#匹配路径中带有boo的请求, 然后将boo去掉</span></span><br><span class=\"line\">            <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">            <span class=\"attr\">backend:</span></span><br><span class=\"line\">              <span class=\"attr\">service:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">service</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span></span><br><span class=\"line\">                  <span class=\"attr\">number:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n","categories":["K8S"],"tags":["K8S"]},{"title":"Kustomization的使用","url":"/2022/08/26/k8s/Kustomization/","content":"<h1 id=\"安装kustomize命令\"><a href=\"#安装kustomize命令\" class=\"headerlink\" title=\"安装kustomize命令\"></a>安装kustomize命令</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">tar -xzvf kustomize_v4.5.7_linux_amd64.tar.gz -C /usr/bin/ &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/kustomize</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"kustomization\"><a href=\"#kustomization\" class=\"headerlink\" title=\"kustomization\"></a>kustomization</h1><p>kustomize 是一个通过 kustomization 文件定制 kubernetes 对象的工具，它可以通过一些资源生成一些新的资源，也可以定制不同的资源的集合。</p>\n<h1 id=\"kustomization常见目录布局\"><a href=\"#kustomization常见目录布局\" class=\"headerlink\" title=\"kustomization常见目录布局\"></a>kustomization常见目录布局</h1><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">base</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">deployment.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">service.yaml</span></span><br><span class=\"line\"><span class=\"string\">└──</span> <span class=\"string\">overlays</span></span><br><span class=\"line\">    <span class=\"string\">├──</span> <span class=\"string\">dev</span></span><br><span class=\"line\">    <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\">    <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">patch.yaml</span></span><br><span class=\"line\">    <span class=\"string\">├──</span> <span class=\"string\">prod</span></span><br><span class=\"line\">    <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\">    <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">patch.yaml</span></span><br><span class=\"line\">    <span class=\"string\">└──</span> <span class=\"string\">staging</span></span><br><span class=\"line\">        <span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\">        <span class=\"string\">└──</span> <span class=\"string\">patch.yaml</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>/base</code>目录保存的是基本的配置</p>\n</li>\n<li><p><code>/overlays</code>【此文件夹也可以省略】里放置的不同环境的配置，例如 <code>/dev</code>、<code>/staging</code>，<code>/prod</code>这些就是不同环境的配置，</p>\n</li>\n<li><p><code>/base</code>等文件夹下都有一个 kustomization .yml 文件，用于配置。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"kustomization自定义目录布局\"><a href=\"#kustomization自定义目录布局\" class=\"headerlink\" title=\"kustomization自定义目录布局\"></a>kustomization自定义目录布局</h1><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">base</span></span><br><span class=\"line\"><span class=\"string\">│</span>\t<span class=\"string\">├──</span> <span class=\"string\">configmap</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">config.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span> \t<span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">nginx.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"string\">│</span>        <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>        <span class=\"string\">├──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>        <span class=\"string\">└──</span> <span class=\"string\">redis.yaml</span></span><br><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">configmap</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"string\">│</span>       <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>       <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">prod</span>       </span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">configmap</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">config.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>   <span class=\"string\">└──</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"string\">│</span>        <span class=\"string\">├──</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"string\">│</span>        <span class=\"string\">└──</span> <span class=\"string\">kustomization.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"kustomization-yml常用字段详解\"><a href=\"#kustomization-yml常用字段详解\" class=\"headerlink\" title=\"kustomization.yml常用字段详解\"></a>kustomization.yml常用字段详解</h1><p>kustomize 提供了比较丰富的字段选择，除此之外还可以自定义插件，下面会大概列举一下每个字段的含义，当我们需要用到的时候知道有这么个能力，然后再去  Kustomize 官方文档 查找对应的 API 文档就行了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kustomization.yaml中常用字段参考官方文档:</span><br><span class=\"line\"></span><br><span class=\"line\">https://kubectl.docs.kubernetes.io/zh/api-reference/kustomization/</span><br><span class=\"line\">https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"resources\"><a href=\"#resources\" class=\"headerlink\" title=\"resources \"></a><code>resources </code></h2><p>表示 k8s 资源的位置，这个可以是一个文件，也可以指向一个文件夹，读取的时候会按照顺序读取，路径可以是相对路径也可以是绝对路径，如果是相对路径那么就是相对于 <code>kustomization.yml</code>的路径</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span>\t\t<span class=\"comment\">#创建该对象所使用的API版本</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span>\t\t\t\t\t\t\t\t<span class=\"comment\">#创建的对象的类别</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#资源文件的位置</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nginx.yaml</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\">#资源文件为当前文件夹下的nginx.yaml</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\">#资源文件为当前文件夹同级文件夹config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hpa.yaml</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\">#资源文件为当前文件夹下的hpa.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a><code>namespace</code></h2><p> 为所有资源添加 <code>namespace</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"images\"><a href=\"#images\" class=\"headerlink\" title=\"images\"></a><code>images</code></h2><p>修改镜像的<code>name</code>、<code>tag</code> 或 <code>image digest</code> ，而无需使用 <code>patches</code> 。例如，对于这种 kubernetes Deployment 片段：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mypostgresdb</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">postgres:8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginxapp</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.7.9</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myapp</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">my-demo-app:latest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">alpine-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">alpine:3.7</span></span><br></pre></td></tr></table></figure>\n\n<p>想要将 <code>image</code> 做如下更改：</p>\n<ul>\n<li>将 <code>postgres:8</code> 改为 <code>my-registry/my-postgres:v1</code></li>\n<li>将 nginx tag 从 <code>1.7.9</code> 改为 <code>1.8.0</code></li>\n<li>将镜像名称 <code>my-demo-app</code> 改为 <code>my-app</code></li>\n<li>将 alpine 的 tag <code>3.7</code> 改为 digest 值</li>\n</ul>\n<p>只需在 <code>kustomization</code> 中添加以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">images:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">  <span class=\"attr\">newName:</span> <span class=\"string\">my-registry/my-postgres</span></span><br><span class=\"line\">  <span class=\"attr\">newTag:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">newTag:</span> <span class=\"number\">1.8</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-demo-app</span></span><br><span class=\"line\">  <span class=\"attr\">newName:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">alpine</span></span><br><span class=\"line\">  <span class=\"attr\">digest:</span> <span class=\"string\">sha256:24a0c4b4a4c0eb97a1aabb8e29f18e917d05abfe1b7a7c07857230879ce7d3d3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"replicas\"><a href=\"#replicas\" class=\"headerlink\" title=\"replicas\"></a><code>replicas</code></h2><p>修改资源副本数</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">replicas:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">count:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>该字段内容为列表，所以可以同时修改许多资源。</p>\n<p>由于这个声明无法设置 <code>kind:</code> 或 <code>group:</code>，所以他只能匹配如下资源中的一种：</p>\n<ul>\n<li><code>Deployment</code></li>\n<li><code>ReplicationController</code></li>\n<li><code>ReplicaSet</code></li>\n<li><code>StatefulSet</code></li>\n</ul>\n<h2 id=\"namePrefix\"><a href=\"#namePrefix\" class=\"headerlink\" title=\"namePrefix\"></a><code>namePrefix</code></h2><p>为所有资源和引用的名称添加前缀</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">namePrefix:</span> <span class=\"string\">mall-</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nameSuffix\"><a href=\"#nameSuffix\" class=\"headerlink\" title=\"nameSuffix\"></a><code>nameSuffix</code></h2><p> 为所有资源和引用的名称添加后缀</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nameSuffix:</span> <span class=\"string\">-v2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"patches\"><a href=\"#patches\" class=\"headerlink\" title=\"patches\"></a><code>patches</code></h2><p>在资源上添加或覆盖字段，<code>Kustomization</code> 使用 <code>patches</code> 字段来提供该功能。</p>\n<p><code>patches</code> 字段包含要按指定顺序应用的 patch 列表。</p>\n<p>patch 可以:</p>\n<ul>\n<li>是一个 <code>strategic merge patch</code>，或者是一个 <code>JSON patch</code>。</li>\n<li>也可以是 patch 文件或 inline string</li>\n<li>针对单个资源或多个资源</li>\n</ul>\n<p>目标选择器可以通过 group、version、kind、name、namespace、标签选择器和注释选择器来选择资源，选择一个或多个匹配所有<strong>指定</strong>字段的资源来应用 patch。</p>\n<p><code>hpa.yml更改了最小实例数</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-hpa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">      <span class=\"attr\">resource:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">cpu</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">Utilization</span></span><br><span class=\"line\">          <span class=\"attr\">averageUtilization:</span> <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<p><code>patch.yml更该了镜像拉取策略和pod的实例数</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br></pre></td></tr></table></figure>\n\n<p><code>patch.json中修改了deployment的name和部署镜像后的名字</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;op&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;replace&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/metadata/name&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;jsonredis&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;op&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;add&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/spec/template/spec/containers/0/name&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;jsonredis&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>kustomization.yml中添加了patch</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"><span class=\"comment\">#资源文件和文件夹</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base/redis</span></span><br><span class=\"line\"><span class=\"comment\">#修改base/redis/redis.yml中的replicas</span></span><br><span class=\"line\"><span class=\"attr\">replicas:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">count:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\">#修改base/redis/redis.yml中的镜像</span></span><br><span class=\"line\"><span class=\"attr\">images:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">newTag:</span> <span class=\"string\">latest</span></span><br><span class=\"line\"><span class=\"comment\">#修改base/redis/hpa.yml   </span></span><br><span class=\"line\"><span class=\"attr\">patchesStrategicMerge:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hpa.yaml</span></span><br><span class=\"line\"><span class=\"comment\">#patch属性来添加或者覆盖</span></span><br><span class=\"line\"><span class=\"attr\">patches:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">patch.yaml</span>\t<span class=\"comment\">#使用patch.yml中的参数覆盖base/redis/redis.yml，和patchesStrategicMerge一样</span></span><br><span class=\"line\">    <span class=\"attr\">target:</span></span><br><span class=\"line\">      <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">patch:</span> <span class=\"string\">|-</span> \t\t\t<span class=\"comment\">#使用json的方式来替换base/redis/redis.ym.和patchesJson6902一样</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">op:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/spec/template/spec/containers/0/name</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"string\">bigredis</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">op:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/spec/template/spec/containers/0/ports/0/containerPort</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"number\">8001</span></span><br><span class=\"line\">    <span class=\"attr\">target:</span></span><br><span class=\"line\">      <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">patch.json</span>\t<span class=\"comment\">#使用patch.json中的参数覆盖base/redis/redis.yml，和patchesJson6902一样</span></span><br><span class=\"line\">    <span class=\"attr\">target:</span></span><br><span class=\"line\">      <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>     </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">patchesJson6902:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">patch.json</span>\t\t<span class=\"comment\">#json文件</span></span><br><span class=\"line\">    <span class=\"attr\">target:</span></span><br><span class=\"line\">      <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>\t\t<span class=\"comment\">#所选择的对象类别</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span>\t\t\t<span class=\"comment\"># 对象的版本</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">mall-redis-v2</span>\t<span class=\"comment\">#deployment的name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span>      </span><br><span class=\"line\"><span class=\"attr\">namePrefix:</span> <span class=\"string\">mall-</span></span><br><span class=\"line\"><span class=\"attr\">nameSuffix:</span> <span class=\"string\">-v2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"patchesJson6902\"><a href=\"#patchesJson6902\" class=\"headerlink\" title=\"patchesJson6902\"></a><code>patchesJson6902</code></h3><p>列表中的每个条目都应可以解析为 <code>kubernetes</code> 对象和将应用于该对象的  <code>JSON patch</code>。</p>\n<p><code>patch.json</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">&quot;op&quot;:</span> <span class=\"string\">&quot;replace&quot;</span>, <span class=\"attr\">&quot;path&quot;:</span> <span class=\"string\">&quot;/metadata/name&quot;</span>, <span class=\"attr\">&quot;value&quot;:</span> <span class=\"string\">&quot;jsonredis&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">&quot;op&quot;:</span> <span class=\"string\">&quot;add&quot;</span>, <span class=\"attr\">&quot;path&quot;:</span> <span class=\"string\">&quot;/spec/template/spec/containers/0/name&quot;</span>, <span class=\"attr\">&quot;value&quot;:</span> <span class=\"string\">&quot;jsonredis&quot;</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"patchesStrategicMerge\"><a href=\"#patchesStrategicMerge\" class=\"headerlink\" title=\"patchesStrategicMerge\"></a><code>patchesStrategicMerge</code></h3><p>使用 <code>strategic merge patch</code> 标准 <code>Patch resources</code>.</p>\n<p><code>patch.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>commonAnnotations</code> 为所有资源加上 <code>annotations</code> 如果对应的 key 已经存在值，这个值将会被覆盖</p>\n<p><code>commonLabels</code> 为所有资源的加上 <code>label</code> 和 <code>label selector</code> 注意：这个操作会比较危险</p>\n<h2 id=\"configMapGenerator\"><a href=\"#configMapGenerator\" class=\"headerlink\" title=\"configMapGenerator\"></a><code>configMapGenerator</code></h2><p>列表中的每个条目都将生成一个 ConfigMap （合计可以生成 n 个 ConfigMap）。</p>\n<p>以下示例创建四个 ConfigMap：</p>\n<ul>\n<li>第一个使用给定文件的名称和内容创建数据</li>\n<li>第二个使用文件中的键&#x2F;值对将数据创建为键&#x2F;值</li>\n<li>第三个使用 <code>literals</code> 中的键&#x2F;值对创建数据作为键&#x2F;值</li>\n<li>第四个通过 <code>options</code> 设置单个 ConfigMap 的注释和标签</li>\n</ul>\n<p>每个 configMapGenerator 项均接受的参数 <code>behavior: [create|replace|merge]</code>，这个参数允许修改或替换父级现有的 configMap。</p>\n<p>此外，每个条目都有一个 <code>options</code> 字段，该字段具有与 kustomization 文件的 <code>generatorOptions</code> 字段相同的子字段。</p>\n<p><code>options</code> 字段允许用户为生成的实例添加标签和（或）注释，或者分别禁用该实例名称的哈希后缀。此处添加的标签和注释不会被 kustomization 文件 <code>generatorOptions</code> 字段关联的全局选项覆盖。但是如果全局 <code>generatorOptions</code> 字段指定 <code>disableNameSuffixHash: true</code>，其他 <code>options</code> 的设置将无法将其覆盖。</p>\n<h3 id=\"ConfigMap-from-file\"><a href=\"#ConfigMap-from-file\" class=\"headerlink\" title=\"ConfigMap from file\"></a>ConfigMap from file</h3><p><code>kustomization.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base/redis</span></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span>\t\t\t<span class=\"comment\">#全局设置</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#禁止在CM的名字后面添加hash值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">configMapGenerator:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis-config</span>\t\t<span class=\"comment\">#已经存在的configMap的名字</span></span><br><span class=\"line\">  <span class=\"attr\">behavior:</span> <span class=\"string\">merge</span>\t\t\t<span class=\"comment\">#将新生成的configMap合并到上面已经存在的CM中</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span>\t\t\t\t\t\t<span class=\"comment\">#根据下面的资源文件生产的CM</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">application.properties</span>\t<span class=\"comment\">#同级目录下的资源文件</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span></span><br><span class=\"line\">    <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dou</span>=<span class=\"string\">bao\t\t\t\t\t\t#根据此键值对生产CM</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConfigMap-from-env-file\"><a href=\"#ConfigMap-from-env-file\" class=\"headerlink\" title=\"ConfigMap from env file\"></a>ConfigMap from env file</h3><p><code>kustomization.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base/redis</span></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span>\t\t\t<span class=\"comment\">#全局设置</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#禁止在CM的名字后面添加hash值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">configMapGenerator:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis-config</span>\t\t<span class=\"comment\">#已经存在的configMap的名字</span></span><br><span class=\"line\">  <span class=\"attr\">behavior:</span> <span class=\"string\">merge</span>\t\t\t<span class=\"comment\">#将新生成的configMap合并到上面已经存在的CM中</span></span><br><span class=\"line\">  <span class=\"attr\">envs:</span>\t\t\t\t\t\t<span class=\"comment\">#根据下面的资源文件生产的CM设置成env[环境变量]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">application.properties</span>\t<span class=\"comment\">#同级目录下的资源文件</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span></span><br><span class=\"line\">    <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dou</span>=<span class=\"string\">bao\t\t\t\t\t\t#根据此键值对生产CM</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConfigMap-from-Literals\"><a href=\"#ConfigMap-from-Literals\" class=\"headerlink\" title=\"ConfigMap from Literals\"></a>ConfigMap from Literals</h3><p><code>kustomization.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base/redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">configMapGenerator:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis-config-gen</span></span><br><span class=\"line\">  <span class=\"attr\">literals:</span>\t\t\t\t<span class=\"comment\">#根据此属性下的键值对生产CM</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">doubao=baby</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"secretGenerator\"><a href=\"#secretGenerator\" class=\"headerlink\" title=\"secretGenerator\"></a><code>secretGenerator</code></h2><p>生成 Secret 资源。</p>\n<p>列表中的每个条目都将生成一个 Secret（合计可以生成 n 个 Secrets）。</p>\n<p>功能与 configMapGenerator 字段类似。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../config</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base/redis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">secretGenerator:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">db-secret</span>\t\t\t\t\t<span class=\"comment\">#secret名字</span></span><br><span class=\"line\">    <span class=\"attr\">files:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;db.username&quot;</span>\t\t\t\t<span class=\"comment\">#从文件中读取信息</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;db.password&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>db.username</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<p><code>db.password</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p><code>生产的db-secret</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">db.password:</span> <span class=\"string\">cm9vdA==</span></span><br><span class=\"line\">  <span class=\"attr\">db.username:</span> <span class=\"string\">MTIzNDU2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">db-secret</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"generatorOptions\"><a href=\"#generatorOptions\" class=\"headerlink\" title=\"generatorOptions\"></a><code>generatorOptions</code></h2><p> 用于控制<code>configMapGenerator</code> 和<code>secretGenerator</code> 的行为</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kustomize.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Kustomization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span></span><br><span class=\"line\">  <span class=\"comment\">#给所有生产的资源添加标签</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kustomize.generated.resources:</span> <span class=\"string\">somevalue</span></span><br><span class=\"line\">  <span class=\"comment\">#给所有生成的资源添加注解</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kustomize.generated.resource:</span> <span class=\"string\">somevalue</span></span><br><span class=\"line\">  <span class=\"comment\"># true是禁止生成hash后缀</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Kustomize的内置功能\"><a href=\"#Kustomize的内置功能\" class=\"headerlink\" title=\"Kustomize的内置功能\"></a>Kustomize的内置功能</h1><p><a href=\"https://kubectl.docs.kubernetes.io/references/kustomize/builtins/\">Kustomize Built-Ins | SIG CLI (kubernetes.io)</a></p>\n<hr>\n<h1 id=\"yaml地址\"><a href=\"#yaml地址\" class=\"headerlink\" title=\"yaml地址\"></a>yaml地址</h1><p><a href=\"https://github.com/dooubb/kustomization.git\">git仓库</a></p>\n","categories":["K8S"],"tags":["K8S"]},{"title":"k8s常用命令","url":"/2022/09/27/k8s/k8s%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h1 id=\"命令补全提示\"><a href=\"#命令补全提示\" class=\"headerlink\" title=\"命令补全提示\"></a>命令补全提示</h1><h2 id=\"Contos7安装\"><a href=\"#Contos7安装\" class=\"headerlink\" title=\"Contos7安装\"></a>Contos7安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/bash-completion/bash_completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOs安装\"><a href=\"#macOs安装\" class=\"headerlink\" title=\"macOs安装\"></a>macOs安装</h2><p>由于mac默认的shell是zsh，查看方式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">/bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>安装对应macOS的kubectl(我的是m1)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -LO <span class=\"string\">&quot;https://dl.k8s.io/release/<span class=\"subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/darwin/arm64/kubectl&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>将 kubectl 置为可执行文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./kubectl</span><br></pre></td></tr></table></figure>\n\n<p>将可执行文件 kubectl 移动到系统可寻址路径 <code>PATH</code> 内的一个位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> root: /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure>\n\n<p>在文件 <code>~/.zshrc</code>中添加信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将以下代码加入到文件内容顶部</span></span><br><span class=\"line\"> <span class=\"built_in\">autoload</span> -Uz compinit </span><br><span class=\"line\"> compinit</span><br></pre></td></tr></table></figure>\n\n<p>在文件 <code>~/.bash_profile</code> 中导入（Source）补全脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;source &lt;(kubectl completion zsh)&#x27;</span> &gt;&gt;~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>然后分别执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"kubectl-上下文和配置\"><a href=\"#kubectl-上下文和配置\" class=\"headerlink\" title=\"kubectl 上下文和配置\"></a>kubectl 上下文和配置</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl config view <span class=\"comment\"># 显示合并的 kubeconfig 配置。</span></span><br><span class=\"line\">kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.users[].name&#125;&#x27;</span>    <span class=\"comment\"># 显示第一个用户</span></span><br><span class=\"line\">kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.users[*].name&#125;&#x27;</span>   <span class=\"comment\"># 获取用户列表</span></span><br><span class=\"line\">kubectl config get-contexts                          <span class=\"comment\"># 显示上下文列表</span></span><br><span class=\"line\">kubectl config current-context                       <span class=\"comment\"># 展示当前所处的上下文</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Kubectl-apply\"><a href=\"#Kubectl-apply\" class=\"headerlink\" title=\"Kubectl apply\"></a>Kubectl apply</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f ./my-manifest.yaml           <span class=\"comment\"># 创建资源</span></span><br><span class=\"line\">kubectl apply -f ./my1.yaml -f ./my2.yaml     <span class=\"comment\"># 使用多个文件创建</span></span><br><span class=\"line\">kubectl apply -f ./dir                        <span class=\"comment\"># 基于目录下的所有清单文件创建资源</span></span><br><span class=\"line\">kubectl apply -f https://git.io/vPieo         <span class=\"comment\"># 从 URL 中创建资源</span></span><br><span class=\"line\">kubectl create deployment nginx --image=nginx <span class=\"comment\"># 启动单实例 nginx</span></span><br><span class=\"line\">kubectl explain pods                          <span class=\"comment\"># 获取 pod 清单的文档说明</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"查看和查找资源\"><a href=\"#查看和查找资源\" class=\"headerlink\" title=\"查看和查找资源\"></a>查看和查找资源</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get 命令的基本输出</span></span><br><span class=\"line\">kubectl get services                          <span class=\"comment\"># 列出当前命名空间下的所有 services</span></span><br><span class=\"line\">kubectl get pods --all-namespaces             <span class=\"comment\"># 列出所有命名空间下的全部的 Pods</span></span><br><span class=\"line\">kubectl get pods -o wide                      <span class=\"comment\"># 列出当前命名空间下的全部 Pods，并显示更详细的信息</span></span><br><span class=\"line\">kubectl get deployment my-dep                 <span class=\"comment\"># 列出某个特定的 Deployment</span></span><br><span class=\"line\">kubectl get pods                              <span class=\"comment\"># 列出当前命名空间下的全部 Pods</span></span><br><span class=\"line\">kubectl get pod my-pod -o yaml                <span class=\"comment\"># 获取一个 pod 的 YAML</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># describe 命令的详细输出</span></span><br><span class=\"line\">kubectl describe nodes my-node</span><br><span class=\"line\">kubectl describe pods my-pod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前名字空间下所有 Services，按名称排序</span></span><br><span class=\"line\">kubectl get services --sort-by=.metadata.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出 Pods，按重启次数排序</span></span><br><span class=\"line\">kubectl get pods --sort-by=<span class=\"string\">&#x27;.status.containerStatuses[0].restartCount&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列举所有 PV 持久卷，按容量排序</span></span><br><span class=\"line\">kubectl get pv --sort-by=.spec.capacity.storage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取包含 app=cassandra 标签的所有 Pods 的 version 标签</span></span><br><span class=\"line\">kubectl get pods --selector=app=cassandra -o \\</span><br><span class=\"line\">  jsonpath=<span class=\"string\">&#x27;&#123;.items[*].metadata.labels.version&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检索带有 “.” 键值，例： &#x27;ca.crt&#x27;</span></span><br><span class=\"line\">kubectl get configmap myconfig \\</span><br><span class=\"line\">  -o jsonpath=<span class=\"string\">&#x27;&#123;.data.ca\\.crt&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检索一个 base64 编码的值，其中的键名应该包含减号而不是下划线。</span></span><br><span class=\"line\">kubectl get secret my-secret --template=<span class=\"string\">&#x27;&#123;&#123;index .data &quot;key-name-with-dashes&quot;&#125;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取所有工作节点（使用选择器以排除标签名称为 &#x27;node-role.kubernetes.io/control-plane&#x27; 的结果）</span></span><br><span class=\"line\">kubectl get node --selector=<span class=\"string\">&#x27;!node-role.kubernetes.io/control-plane&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取当前命名空间中正在运行的 Pods</span></span><br><span class=\"line\">kubectl get pods --field-selector=status.phase=Running</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取全部节点的 ExternalIP 地址</span></span><br><span class=\"line\">kubectl get nodes -o jsonpath=<span class=\"string\">&#x27;&#123;.items[*].status.addresses[?(@.type==&quot;ExternalIP&quot;)].address&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出属于某个特定 RC 的 Pods 的名称</span></span><br><span class=\"line\"><span class=\"comment\"># 在转换对于 jsonpath 过于复杂的场合，&quot;jq&quot; 命令很有用；可以在 https://stedolan.github.io/jq/ 找到它。</span></span><br><span class=\"line\">sel=<span class=\"variable\">$&#123;$(kubectl get rc my-rc --output=json | jq -j &#x27;.spec.selector | to_entries | .[] | &quot;\\(.key)=\\(.value),&quot;&#x27;)%?&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(kubectl get pods --selector=<span class=\"variable\">$sel</span> --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有 Pods 的标签（或任何其他支持标签的 Kubernetes 对象）</span></span><br><span class=\"line\">kubectl get pods --show-labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查哪些节点处于就绪状态</span></span><br><span class=\"line\">JSONPATH=<span class=\"string\">&#x27;&#123;range .items[*]&#125;&#123;@.metadata.name&#125;:&#123;range @.status.conditions[*]&#125;&#123;@.type&#125;=&#123;@.status&#125;;&#123;end&#125;&#123;end&#125;&#x27;</span> \\</span><br><span class=\"line\"> &amp;&amp; kubectl get nodes -o jsonpath=<span class=\"string\">&quot;<span class=\"variable\">$JSONPATH</span>&quot;</span> | grep <span class=\"string\">&quot;Ready=True&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不使用外部工具来输出解码后的 Secret</span></span><br><span class=\"line\">kubectl get secret my-secret -o go-template=<span class=\"string\">&#x27;&#123;&#123;range $k,$v := .data&#125;&#125;&#123;&#123;&quot;### &quot;&#125;&#125;&#123;&#123;$k&#125;&#125;&#123;&#123;&quot;\\n&quot;&#125;&#125;&#123;&#123;$v|base64decode&#125;&#125;&#123;&#123;&quot;\\n\\n&quot;&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出被一个 Pod 使用的全部 Secret</span></span><br><span class=\"line\">kubectl get pods -o json | jq <span class=\"string\">&#x27;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&#x27;</span> | grep -v null | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列举所有 Pods 中初始化容器的容器 ID（containerID）</span></span><br><span class=\"line\"><span class=\"comment\"># 可用于在清理已停止的容器时避免删除初始化容器</span></span><br><span class=\"line\">kubectl get pods --all-namespaces -o jsonpath=<span class=\"string\">&#x27;&#123;range .items[*].status.initContainerStatuses[*]&#125;&#123;.containerID&#125;&#123;&quot;\\n&quot;&#125;&#123;end&#125;&#x27;</span> | <span class=\"built_in\">cut</span> -d/ -f3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出事件（Events），按时间戳排序</span></span><br><span class=\"line\">kubectl get events --sort-by=.metadata.creationTimestamp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较当前的集群状态和假定某清单被应用之后的集群状态</span></span><br><span class=\"line\">kubectl diff -f ./my-manifest.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成一个句点分隔的树，其中包含为节点返回的所有键</span></span><br><span class=\"line\"><span class=\"comment\"># 在复杂的嵌套JSON结构中定位键时非常有用</span></span><br><span class=\"line\">kubectl get nodes -o json | jq -c <span class=\"string\">&#x27;paths|join(&quot;.&quot;)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成一个句点分隔的树，其中包含为pod等返回的所有键</span></span><br><span class=\"line\">kubectl get pods -o json | jq -c <span class=\"string\">&#x27;paths|join(&quot;.&quot;)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设你的 Pods 有默认的容器和默认的名字空间，并且支持 &#x27;env&#x27; 命令，可以使用以下脚本为所有 Pods 生成 ENV 变量。</span></span><br><span class=\"line\"><span class=\"comment\"># 该脚本也可用于在所有的 Pods 里运行任何受支持的命令，而不仅仅是 &#x27;env&#x27;。 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pod <span class=\"keyword\">in</span> $(kubectl get po --output=jsonpath=&#123;.items..metadata.name&#125;); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$pod</span> &amp;&amp; kubectl <span class=\"built_in\">exec</span> -it <span class=\"variable\">$pod</span> -- <span class=\"built_in\">env</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取一个 Deployment 的 status 子资源</span></span><br><span class=\"line\">kubectl get deployment nginx-deployment --subresource=status</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新资源\"><a href=\"#更新资源\" class=\"headerlink\" title=\"更新资源\"></a>更新资源</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">set</span> image deployment/frontend www=image:v2               <span class=\"comment\"># 滚动更新 &quot;frontend&quot; Deployment 的 &quot;www&quot; 容器镜像</span></span><br><span class=\"line\">kubectl rollout <span class=\"built_in\">history</span> deployment/frontend                      <span class=\"comment\"># 检查 Deployment 的历史记录，包括版本</span></span><br><span class=\"line\">kubectl rollout undo deployment/frontend                         <span class=\"comment\"># 回滚到上次部署版本</span></span><br><span class=\"line\">kubectl rollout undo deployment/frontend --to-revision=2         <span class=\"comment\"># 回滚到特定部署版本</span></span><br><span class=\"line\">kubectl rollout status -w deployment/frontend                    <span class=\"comment\"># 监视 &quot;frontend&quot; Deployment 的滚动升级状态直到完成</span></span><br><span class=\"line\">kubectl rollout restart deployment/frontend                      <span class=\"comment\"># 轮替重启 &quot;frontend&quot; Deployment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> pod.json | kubectl replace -f -                              <span class=\"comment\"># 通过传入到标准输入的 JSON 来替换 Pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制替换，删除后重建资源。会导致服务不可用。</span></span><br><span class=\"line\">kubectl replace --force -f ./pod.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为多副本的 nginx 创建服务，使用 80 端口提供服务，连接到容器的 8000 端口。</span></span><br><span class=\"line\">kubectl expose rc nginx --port=80 --target-port=8000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将某单容器 Pod 的镜像版本（标签）更新到 v4</span></span><br><span class=\"line\">kubectl get pod mypod -o yaml | sed <span class=\"string\">&#x27;s/\\(image: myimage\\):.*$/\\1:v4/&#x27;</span> | kubectl replace -f -</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl label pods my-pod new-label=awesome                      <span class=\"comment\"># 添加标签</span></span><br><span class=\"line\">kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       <span class=\"comment\"># 添加注解</span></span><br><span class=\"line\">kubectl autoscale deployment foo --min=2 --max=10                <span class=\"comment\"># 对 &quot;foo&quot; Deployment 自动伸缩容</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部分更新资源\"><a href=\"#部分更新资源\" class=\"headerlink\" title=\"部分更新资源\"></a>部分更新资源</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部分更新某节点</span></span><br><span class=\"line\">kubectl patch node k8s-node-1 -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;:&#123;&quot;unschedulable&quot;:true&#125;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新容器的镜像；spec.containers[*].name 是必须的。因为它是一个合并性质的主键。</span></span><br><span class=\"line\">kubectl patch pod valid-pod -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;name&quot;:&quot;kubernetes-serve-hostname&quot;,&quot;image&quot;:&quot;new image&quot;&#125;]&#125;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用带位置数组的 JSON patch 更新容器的镜像</span></span><br><span class=\"line\">kubectl patch pod valid-pod --<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span> -p=<span class=\"string\">&#x27;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/containers/0/image&quot;, &quot;value&quot;:&quot;new image&quot;&#125;]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用带位置数组的 JSON patch 禁用某 Deployment 的 livenessProbe</span></span><br><span class=\"line\">kubectl patch deployment valid-deployment  --<span class=\"built_in\">type</span> json   -p=<span class=\"string\">&#x27;[&#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/livenessProbe&quot;&#125;]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在带位置数组中添加元素</span></span><br><span class=\"line\">kubectl patch sa default --<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span> -p=<span class=\"string\">&#x27;[&#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/secrets/1&quot;, &quot;value&quot;: &#123;&quot;name&quot;: &quot;whatever&quot; &#125; &#125;]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过修正 scale 子资源来更新 Deployment 的副本数</span></span><br><span class=\"line\">kubectl patch deployment nginx-deployment --subresource=<span class=\"string\">&#x27;scale&#x27;</span> --<span class=\"built_in\">type</span>=<span class=\"string\">&#x27;merge&#x27;</span> -p <span class=\"string\">&#x27;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:2&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编辑资源\"><a href=\"#编辑资源\" class=\"headerlink\" title=\"编辑资源\"></a>编辑资源</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl edit svc/docker-registry                      <span class=\"comment\"># 编辑名为 docker-registry 的服务</span></span><br><span class=\"line\">KUBE_EDITOR=<span class=\"string\">&quot;nano&quot;</span> kubectl edit svc/docker-registry   <span class=\"comment\"># 使用其他编辑器</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对资源进行伸缩\"><a href=\"#对资源进行伸缩\" class=\"headerlink\" title=\"对资源进行伸缩\"></a>对资源进行伸缩</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl scale --replicas=3 rs/foo                                 <span class=\"comment\"># 将名为 &#x27;foo&#x27; 的副本集伸缩到 3 副本</span></span><br><span class=\"line\">kubectl scale --replicas=3 -f foo.yaml                            <span class=\"comment\"># 将在 &quot;foo.yaml&quot; 中的特定资源伸缩到 3 个副本</span></span><br><span class=\"line\">kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  <span class=\"comment\"># 如果名为 mysql 的 Deployment 的副本当前是 2，那么将它伸缩到 3</span></span><br><span class=\"line\">kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   <span class=\"comment\"># 伸缩多个副本控制器</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除资源\"><a href=\"#删除资源\" class=\"headerlink\" title=\"删除资源\"></a>删除资源</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl delete -f ./pod.json                                              <span class=\"comment\"># 删除在 pod.json 中指定的类型和名称的 Pod</span></span><br><span class=\"line\">kubectl delete pod,service baz foo                                        <span class=\"comment\"># 删除名称为 &quot;baz&quot; 和 &quot;foo&quot; 的 Pod 和服务</span></span><br><span class=\"line\">kubectl delete pods,services -l name=myLabel                              <span class=\"comment\"># 删除包含 name=myLabel 标签的 pods 和服务</span></span><br><span class=\"line\">kubectl -n my-ns delete pod,svc --all                                     <span class=\"comment\"># 删除在 my-ns 名字空间中全部的 Pods 和服务</span></span><br><span class=\"line\"><span class=\"comment\"># 删除所有与 pattern1 或 pattern2 awk 模式匹配的 Pods</span></span><br><span class=\"line\">kubectl get pods  -n mynamespace --no-headers=<span class=\"literal\">true</span> | awk <span class=\"string\">&#x27;/pattern1|pattern2/&#123;print $1&#125;&#x27;</span> | xargs  kubectl delete -n mynamespace pod</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"与运行中的-Pod-进行交互\"><a href=\"#与运行中的-Pod-进行交互\" class=\"headerlink\" title=\"与运行中的 Pod 进行交互\"></a>与运行中的 Pod 进行交互</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl logs my-pod                                 <span class=\"comment\"># 获取 pod 日志（标准输出）</span></span><br><span class=\"line\">kubectl logs -l name=myLabel                        <span class=\"comment\"># 获取含 name=myLabel 标签的 Pods 的日志（标准输出）</span></span><br><span class=\"line\">kubectl logs my-pod --previous                      <span class=\"comment\"># 获取上个容器实例的 pod 日志（标准输出）</span></span><br><span class=\"line\">kubectl logs my-pod -c my-container                 <span class=\"comment\"># 获取 Pod 容器的日志（标准输出, 多容器场景）</span></span><br><span class=\"line\">kubectl logs -l name=myLabel -c my-container        <span class=\"comment\"># 获取含 name=myLabel 标签的 Pod 容器日志（标准输出, 多容器场景）</span></span><br><span class=\"line\">kubectl logs my-pod -c my-container --previous      <span class=\"comment\"># 获取 Pod 中某容器的上个实例的日志（标准输出, 多容器场景）</span></span><br><span class=\"line\">kubectl logs -f my-pod                              <span class=\"comment\"># 流式输出 Pod 的日志（标准输出）</span></span><br><span class=\"line\">kubectl logs -f my-pod -c my-container              <span class=\"comment\"># 流式输出 Pod 容器的日志（标准输出, 多容器场景）</span></span><br><span class=\"line\">kubectl logs -f -l name=myLabel --all-containers    <span class=\"comment\"># 流式输出含 name=myLabel 标签的 Pod 的所有日志（标准输出）</span></span><br><span class=\"line\">kubectl run -i --<span class=\"built_in\">tty</span> busybox --image=busybox:1.28 -- sh  <span class=\"comment\"># 以交互式 Shell 运行 Pod</span></span><br><span class=\"line\">kubectl run nginx --image=nginx -n mynamespace      <span class=\"comment\"># 在 “mynamespace” 命名空间中运行单个 nginx Pod</span></span><br><span class=\"line\">kubectl run nginx --image=nginx                     <span class=\"comment\"># 运行 nginx Pod 并将其规约写入到名为 pod.yaml 的文件</span></span><br><span class=\"line\">  --dry-run=client -o yaml &gt; pod.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl attach my-pod -i                            <span class=\"comment\"># 挂接到一个运行的容器中</span></span><br><span class=\"line\">kubectl port-forward my-pod 5000:6000               <span class=\"comment\"># 在本地计算机上侦听端口 5000 并转发到 my-pod 上的端口 6000</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> my-pod -- <span class=\"built_in\">ls</span> /                         <span class=\"comment\"># 在已有的 Pod 中运行命令（单容器场景）</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> my-pod -- /bin/sh        <span class=\"comment\"># 使用交互 shell 访问正在运行的 Pod (一个容器场景)</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> my-pod -c my-container -- <span class=\"built_in\">ls</span> /         <span class=\"comment\"># 在已有的 Pod 中运行命令（多容器场景）</span></span><br><span class=\"line\">kubectl top pod POD_NAME --containers               <span class=\"comment\"># 显示给定 Pod 和其中容器的监控数据</span></span><br><span class=\"line\">kubectl top pod POD_NAME --sort-by=cpu              <span class=\"comment\"># 显示给定 Pod 的指标并且按照 &#x27;cpu&#x27; 或者 &#x27;memory&#x27; 排序</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"从容器中复制文件和目录\"><a href=\"#从容器中复制文件和目录\" class=\"headerlink\" title=\"从容器中复制文件和目录\"></a>从容器中复制文件和目录</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">cp</span> /tmp/foo_dir my-pod:/tmp/bar_dir            <span class=\"comment\"># 将 /tmp/foo_dir 本地目录复制到远程当前命名空间中 Pod 中的 /tmp/bar_dir</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">cp</span> /tmp/foo my-pod:/tmp/bar -c my-container    <span class=\"comment\"># 将 /tmp/foo 本地文件复制到远程 Pod 中特定容器的 /tmp/bar 下</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">cp</span> /tmp/foo my-namespace/my-pod:/tmp/bar       <span class=\"comment\"># 将 /tmp/foo 本地文件复制到远程 “my-namespace” 命名空间内指定 Pod 中的 /tmp/bar</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">cp</span> my-namespace/my-pod:/tmp/foo /tmp/bar       <span class=\"comment\"># 将 /tmp/foo 从远程 Pod 复制到本地 /tmp/bar</span></span><br></pre></td></tr></table></figure>\n\n<p><code>kubectl cp</code> 要求容器镜像中存在 “tar” 二进制文件。如果 “tar” 不存在，<code>kubectl cp</code> 将失败。 对于进阶用例，例如符号链接、通配符扩展或保留文件权限，请考虑使用 <code>kubectl exec</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar cf - /tmp/foo | kubectl <span class=\"built_in\">exec</span> -i -n my-namespace my-pod -- tar xf - -C /tmp/bar  <span class=\"comment\"># 将 /tmp/foo 本地文件复制到远程 “my-namespace” 命名空间中 pod 中的 /tmp/bar</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -n my-namespace my-pod -- tar cf - /tmp/foo | tar xf - -C /tmp/bar    <span class=\"comment\"># 将 /tmp/foo 从远程 pod 复制到本地 /tmp/bar</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"与-Deployments-和-Services-进行交互\"><a href=\"#与-Deployments-和-Services-进行交互\" class=\"headerlink\" title=\"与 Deployments 和 Services 进行交互\"></a>与 Deployments 和 Services 进行交互</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl logs deploy/my-deployment                         <span class=\"comment\"># 获取一个 Deployment 的 Pod 的日志（单容器例子）</span></span><br><span class=\"line\">kubectl logs deploy/my-deployment -c my-container         <span class=\"comment\"># 获取一个 Deployment 的 Pod 的日志（多容器例子）</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl port-forward svc/my-service 5000                  <span class=\"comment\"># 侦听本地端口 5000 并转发到 Service 后端端口 5000</span></span><br><span class=\"line\">kubectl port-forward svc/my-service 5000:my-service-port  <span class=\"comment\"># 侦听本地端口 5000 并转发到名字为 &lt;my-service-port&gt; 的 Service 目标端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl port-forward deploy/my-deployment 5000:6000       <span class=\"comment\"># 侦听本地端口 5000 并转发到 &lt;my-deployment&gt; 创建的 Pod 里的端口 6000</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> deploy/my-deployment -- <span class=\"built_in\">ls</span>                   <span class=\"comment\"># 在 Deployment 里的第一个 Pod 的第一个容器里运行命令（单容器和多容器例子）</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"与节点和集群进行交互\"><a href=\"#与节点和集群进行交互\" class=\"headerlink\" title=\"与节点和集群进行交互\"></a>与节点和集群进行交互</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl cordon my-node                                                <span class=\"comment\"># 标记 my-node 节点为不可调度</span></span><br><span class=\"line\">kubectl drain my-node                                                 <span class=\"comment\"># 对 my-node 节点进行清空操作，为节点维护做准备</span></span><br><span class=\"line\">kubectl uncordon my-node                                              <span class=\"comment\"># 标记 my-node 节点为可以调度</span></span><br><span class=\"line\">kubectl top node my-node                                              <span class=\"comment\"># 显示给定节点的度量值</span></span><br><span class=\"line\">kubectl cluster-info                                                  <span class=\"comment\"># 显示主控节点和服务的地址</span></span><br><span class=\"line\">kubectl cluster-info dump                                             <span class=\"comment\"># 将当前集群状态转储到标准输出</span></span><br><span class=\"line\">kubectl cluster-info dump --output-directory=/path/to/cluster-state   <span class=\"comment\"># 将当前集群状态输出到 /path/to/cluster-state</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前节点上存在的现有污点。</span></span><br><span class=\"line\">kubectl get nodes -o=custom-columns=NodeName:.metadata.name,TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,TaintEffect:.spec.taints[*].effect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果已存在具有指定键和效果的污点，则替换其值为指定值。</span></span><br><span class=\"line\">kubectl taint nodes foo dedicated=special-user:NoSchedule</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"资源类型\"><a href=\"#资源类型\" class=\"headerlink\" title=\"资源类型\"></a>资源类型</h1><p>列出所支持的全部资源类型和它们的<code>简称</code>、<code>API 组</code>, 是否是<code>名字空间作用域</code> 和 <code>Kind</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl api-resources</span><br></pre></td></tr></table></figure>\n\n<p>用于探索 API 资源的其他操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl api-resources --namespaced=<span class=\"literal\">true</span>      <span class=\"comment\"># 所有命名空间作用域的资源</span></span><br><span class=\"line\">kubectl api-resources --namespaced=<span class=\"literal\">false</span>     <span class=\"comment\"># 所有非命名空间作用域的资源</span></span><br><span class=\"line\">kubectl api-resources -o name                <span class=\"comment\"># 用简单格式列举所有资源（仅显示资源名称）</span></span><br><span class=\"line\">kubectl api-resources -o wide                <span class=\"comment\"># 用扩展格式列举所有资源（又称 &quot;wide&quot; 格式）</span></span><br><span class=\"line\">kubectl api-resources --verbs=list,get       <span class=\"comment\"># 支持 &quot;list&quot; 和 &quot;get&quot; 请求动词的所有资源</span></span><br><span class=\"line\">kubectl api-resources --api-group=extensions <span class=\"comment\"># &quot;extensions&quot; API 组中的所有资源</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h1><p>要以特定格式将详细信息输出到终端窗口，将 <code>-o</code>（或者 <code>--output</code>）参数添加到支持的 <code>kubectl</code> 命令中。</p>\n<table>\n<thead>\n<tr>\n<th>输出格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-o=custom-columns=&lt;spec&gt;</code></td>\n<td>使用逗号分隔的自定义列来打印表格</td>\n</tr>\n<tr>\n<td><code>-o=custom-columns-file=&lt;filename&gt;</code></td>\n<td>使用 <code>&lt;filename&gt;</code> 文件中的自定义列模板打印表格</td>\n</tr>\n<tr>\n<td><code>-o=json</code></td>\n<td>输出 JSON 格式的 API 对象</td>\n</tr>\n<tr>\n<td><code>-o=jsonpath=&lt;template&gt;</code></td>\n<td>打印 <a href=\"https://kubernetes.io/zh-cn/docs/reference/kubectl/jsonpath\">jsonpath</a> 表达式中定义的字段</td>\n</tr>\n<tr>\n<td><code>-o=jsonpath-file=&lt;filename&gt;</code></td>\n<td>打印在 <code>&lt;filename&gt;</code> 文件中定义的 <a href=\"https://kubernetes.io/zh-cn/docs/reference/kubectl/jsonpath\">jsonpath</a> 表达式所指定的字段。</td>\n</tr>\n<tr>\n<td><code>-o=name</code></td>\n<td>仅打印资源名称而不打印其他内容</td>\n</tr>\n<tr>\n<td><code>-o=wide</code></td>\n<td>以纯文本格式输出额外信息，对于 Pod 来说，输出中包含了节点名称</td>\n</tr>\n<tr>\n<td><code>-o=yaml</code></td>\n<td>输出 YAML 格式的 API 对象</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF&gt;&gt; /etc/docker/daemon.json </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"给node打label\"><a href=\"#给node打label\" class=\"headerlink\" title=\"给node打label\"></a>给node打label</h1><p><strong><code>给node打role</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令</span></span><br><span class=\"line\">kubectl label node k8s-node03 node-role.kubernetes.io/worker=worker</span><br><span class=\"line\"><span class=\"comment\">#查看结果</span></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get node</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE    VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   247d   v1.21.0</span><br><span class=\"line\">k8s-node01   Ready    worker                 247d   v1.21.0</span><br><span class=\"line\">k8s-node02   Ready    worker                 247d   v1.21.0</span><br><span class=\"line\">k8s-node03   Ready    worker                 12m    v1.21.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>给node打label</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl label node k8s-node03 app=mall</span></span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get node --show-labels</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE    VERSION   LABELS</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   247d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=</span><br><span class=\"line\">k8s-node01   Ready    worker                 247d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node01,kubernetes.io/os=linux,node-role.kubernetes.io/worker=</span><br><span class=\"line\">k8s-node02   Ready    worker                 247d   v1.21.0   app=mall-nginx,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node02,kubernetes.io/os=linux,mall-label=nginx-label,node-role.kubernetes.io/worker=</span><br><span class=\"line\">k8s-node03   Ready    worker                 13m    v1.21.0   app=mall,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node03,kubernetes.io/os=linux,node-role.kubernetes.io/worker=worker</span><br><span class=\"line\">[root@k8s-master ~]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"kustomization\"><a href=\"#kustomization\" class=\"headerlink\" title=\"kustomization\"></a>kustomization</h1><p><a href=\"https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization\">Glossary | SIG CLI (kubernetes.io)</a></p>\n","categories":["K8S"],"tags":["K8S"]},{"title":"k8s基础概念","url":"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/","content":"<h1 id=\"Kubernetes-组件\"><a href=\"#Kubernetes-组件\" class=\"headerlink\" title=\"Kubernetes 组件\"></a>Kubernetes 组件</h1><img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815222135791.png\" class title=\"image-20220815222135791\">\n\n<p><strong>Master节点</strong></p>\n<p>Master节点是集群的控制节点，由API Server、Scheduler、Controller Manager和ETCD四个组件构成。</p>\n<ul>\n<li>API Server：各组件互相通讯的中转站，接受外部请求，并将信息写到ETCD中。</li>\n<li>Controller Manager：执行集群级功能，例如复制组件，跟踪Node节点，处理节点故障等等。</li>\n<li>Scheduler：负责应用调度的组件，根据各种条件（如可用的资源、节点的亲和性等）将容器调度到Node上运行。</li>\n<li>ETCD：一个分布式数据存储组件，负责存储集群的配置信息。</li>\n</ul>\n<p>在生产环境中，为了保障集群的高可用，通常会部署多个master，如CCE的集群高可用模式就是3个master节点。</p>\n<p><strong>Node节点</strong></p>\n<p>Node节点是集群的计算节点，即运行容器化应用的节点。</p>\n<ul>\n<li>kubelet：kubelet主要负责同Container Runtime打交道，并与API Server交互，管理节点上的容器。</li>\n<li>kube-proxy：应用组件间的访问代理，解决节点上应用的访问问题。</li>\n<li>Container Runtime：容器运行时，如Docker，最主要的功能是下载镜像和运行容器。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"Kubernetes的扩展性\"><a href=\"#Kubernetes的扩展性\" class=\"headerlink\" title=\"Kubernetes的扩展性\"></a>Kubernetes的扩展性</h1><p>Kubernetes开放了容器运行时接口（CRI）、容器网络接口（CNI）和容器存储接口（CSI），这些接口让Kubernetes的扩展性变得最大化，而Kubernetes本身则专注于容器调度。</p>\n<ul>\n<li>CRI（Container Runtime Interface）：容器运行时接口，提供计算资源，CRI隔离了各个容器引擎之间的差异，而通过统一的接口与各个容器引擎之间进行互动。</li>\n<li>CNI（Container Network Interface）：容器网络接口，提供网络资源，通过CNI接口，Kubernetes可以支持不同网络环境。</li>\n<li>CSI（Container Storage Interface）：容器存储接口，提供存储资源，通过CSI接口，Kubernetes可以支持各种类型的存储。</li>\n</ul>\n<h1 id=\"Kubernetes中的基本对象\"><a href=\"#Kubernetes中的基本对象\" class=\"headerlink\" title=\"Kubernetes中的基本对象\"></a>Kubernetes中的基本对象</h1><img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815222237485.png\" class title=\"image-20220815222237485\">\n\n<ul>\n<li><p>Pod</p>\n<p>Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（container）、存储资源（volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment是对Pod的服务化封装。一个Deployment可以包含一个或多个Pod，每个Pod的角色相同，所以系统会自动为Deployment的多个Pod分发请求。</p>\n</li>\n<li><p>StatefulSet</p>\n<p>StatefulSet是用来管理有状态应用的对象。和Deployment相同的是，StatefulSet管理了基于相同容器定义的一组Pod。但和Deployment不同的是，StatefulSet为它们的每个Pod维护了一个固定的ID。这些Pod是基于相同的声明来创建的，但是不能相互替换，无论怎么调度，每个Pod都有一个永久不变的ID。</p>\n</li>\n<li><p>Job</p>\n<p>Job是用来控制批处理型任务的对象。批处理业务与长期伺服业务（Deployment）的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出（Pod自动删除）。</p>\n</li>\n<li><p>CronJob</p>\n<p>CronJob是基于时间控制的Job，类似于Linux系统的crontab，在指定的时间周期运行指定的任务。</p>\n</li>\n<li><p>DaemonSet</p>\n<p>DaemonSet是这样一种对象（守护进程），它在集群的每个节点上运行一个Pod，且保证只有一个Pod，这非常适合一些系统层面的应用，例如日志收集、资源监控等，这类应用需要每个节点都运行，且不需要太多实例，一个比较好的例子就是Kubernetes的kube-proxy。</p>\n</li>\n<li><p>Service</p>\n<p>Service是用来解决Pod访问问题的。Service有一个固定IP地址，Service将访问流量转发给Pod，而且Service可以给这些Pod做负载均衡。</p>\n</li>\n<li><p>Ingress</p>\n<p>Service是基于四层TCP和UDP协议转发的，Ingress可以基于七层的HTTP和HTTPS协议转发，可以通过域名和路径做到更细粒度的划分。</p>\n</li>\n<li><p>ConfigMap</p>\n<p>ConfigMap是一种用于存储应用所需配置信息的资源类型，用于保存配置数据的键值对。通过ConfigMap可以方便的做到配置解耦，使得不同环境有不同的配置。</p>\n</li>\n<li><p>Secret</p>\n<p>Secret是一种加密存储的资源对象，您可以将认证信息、证书、私钥等保存在Secret中，而不需要把这些敏感数据暴露到镜像或者Pod定义中，从而更加安全和灵活。</p>\n</li>\n<li><p>PersistentVolume（PV）</p>\n<p>PV指持久化数据存储卷，主要定义的是一个持久化存储在宿主机上的目录，比如一个NFS的挂载目录。</p>\n</li>\n<li><p>PersistentVolumeClaim（PVC）</p>\n<p>Kubernetes提供PVC专门用于持久化存储的申请，PVC可以让您无需关心底层存储资源如何创建、释放等动作，而只需要申明您需要何种类型的存储资源、多大的存储空间。</p>\n</li>\n</ul>\n<h1 id=\"Kubernetes对象的描述\"><a href=\"#Kubernetes对象的描述\" class=\"headerlink\" title=\"Kubernetes对象的描述\"></a>Kubernetes对象的描述</h1><p>kubernetes中资源可以使用YAML描述，也可以使用JSON。其内容可以分为如下四个部分：</p>\n<ul>\n<li>typeMeta：对象类型的元信息，声明对象使用哪个API版本，哪个类型的对象。</li>\n<li>objectMeta：对象的元信息，包括对象名称、使用的标签等。</li>\n<li>spec：对象的期望状态，例如对象使用什么镜像、有多少副本等。</li>\n<li>status：对象的实际状态，只能在对象创建后看到，创建对象时无需指定。</li>\n</ul>\n<h1 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h1><h2 id=\"Pod基础信息\"><a href=\"#Pod基础信息\" class=\"headerlink\" title=\"Pod基础信息\"></a>Pod基础信息</h2><p><strong><code>Kubernetes中的最小调度对象</code></strong></p>\n<p>Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（container）、存储资源（volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。</p>\n<p>Pod使用主要分为两种方式：</p>\n<ul>\n<li>Pod中运行一个容器。这是Kubernetes最常见的用法，您可以将Pod视为单个封装的容器，但是Kubernetes是直接管理Pod而不是容器。</li>\n<li>Pod中运行多个需要耦合在一起工作、需要共享资源的容器。通常这种场景下应用包含一个主容器和几个辅助容器（SideCar Container）。</li>\n</ul>\n<p>创建pod的yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                      <span class=\"comment\"># Kubernetes的API Version</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                           <span class=\"comment\"># Kubernetes的资源类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       <span class=\"comment\"># Pod的名称</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                               <span class=\"comment\"># Pod的具体规格（specification）</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span>             <span class=\"comment\"># 使用的镜像为 nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span>               <span class=\"comment\"># 容器的名称</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span>                      <span class=\"comment\"># 申请容器所需的资源</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span>                            <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">env_key</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">env_value</span>  </span><br><span class=\"line\">    <span class=\"attr\">command:</span>                     <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">top</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;-b&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span>                 <span class=\"comment\"># 启动后处理</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&quot;/postStart.sh&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">preStop:</span>                   <span class=\"comment\"># 停止前处理</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&quot;/preStop.sh&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span>                 <span class=\"comment\"># 拉取镜像使用的证书</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod-存活探针（Liveness-Probe）\"><a href=\"#Pod-存活探针（Liveness-Probe）\" class=\"headerlink\" title=\"Pod 存活探针（Liveness Probe）\"></a>Pod 存活探针（Liveness Probe）</h2><p>Kubernetes支持如下三种探测机制。</p>\n<ul>\n<li>HTTP GET：向容器发送HTTP GET请求，如果Probe收到2xx或3xx，说明容器是健康的。</li>\n<li>TCP Socket：尝试与容器指定端口建立TCP连接，如果连接成功建立，说明容器是健康的。</li>\n<li>Exec：Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明容器是健康的。</li>\n</ul>\n<h3 id=\"HTTP-GET\"><a href=\"#HTTP-GET\" class=\"headerlink\" title=\"HTTP GET\"></a>HTTP GET</h3><p>HTTP GET方式是最常见的探测方法，其具体机制是向容器发送HTTP GET请求，如果Probe收到2xx或3xx，说明容器是健康的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-http</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>\t\t\t\t <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>\t\t\t\t\t <span class=\"comment\"># HTTP GET定义</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>    <span class=\"comment\"># 容器启动后多久开始探测</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>          <span class=\"comment\"># 表示容器必须在2s内做出相应反馈给probe，否则视为探测失败</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span>          <span class=\"comment\"># 探测周期，每30s探测一次</span></span><br><span class=\"line\">      <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span>        <span class=\"comment\"># 连续探测1次成功表示成功</span></span><br><span class=\"line\">      <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span>        <span class=\"comment\"># 连续探测3次失败表示失败</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP-Socket\"><a href=\"#TCP-Socket\" class=\"headerlink\" title=\"TCP Socket\"></a>TCP Socket</h3><p>TCP Socket尝试与容器指定端口建立TCP连接，如果连接成功建立，说明容器是健康的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">test:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-tcp</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>           <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h3><p>Exec即执行具体命令，具体机制是Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明健康</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">test:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-exec</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">30</span><span class=\"string\">;</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">600</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>           <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span>                  <span class=\"comment\"># Exec定义</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod就绪探针（Readiness-Probe）\"><a href=\"#Pod就绪探针（Readiness-Probe）\" class=\"headerlink\" title=\"Pod就绪探针（Readiness Probe）\"></a>Pod就绪探针（Readiness Probe）</h2><p>Kubernetes支持如下三种类型。</p>\n<ul>\n<li>Exec：Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明已经就绪。</li>\n<li>HTTP GET：往容器的IP:Port发送HTTP GET请求，如果Probe收到2xx或3xx，说明已经就绪。</li>\n<li>TCP Socket：尝试与容器建立TCP连接，如果能建立连接说明已经就绪。</li>\n</ul>\n<h3 id=\"HTTP-GET-1\"><a href=\"#HTTP-GET-1\" class=\"headerlink\" title=\"HTTP GET\"></a>HTTP GET</h3><p>Readiness Probe的配置与<code>存活探针（livness probe）</code>一样，都是在Pod Template的containers里面，如下所示，这个Readiness Probe向Pod发送HTTP请求，当Probe收到2xx或3xx返回时，说明Pod已经就绪</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>           <span class=\"comment\"># readinessProbe</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span>                <span class=\"comment\"># HTTP GET定义</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/read</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>    <span class=\"comment\"># 容器启动后多久开始探测</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>          <span class=\"comment\"># 表示容器必须在2s内做出相应反馈给probe，否则视为探测失败</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span>          <span class=\"comment\"># 探测周期，每30s探测一次</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span>        <span class=\"comment\"># 连续探测1次成功表示成功</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span>        <span class=\"comment\"># 连续探测3次失败表示失败</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP-Socket-1\"><a href=\"#TCP-Socket-1\" class=\"headerlink\" title=\"TCP Socket\"></a>TCP Socket</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>             <span class=\"comment\"># readinessProbe</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span>                <span class=\"comment\"># TCP Socket定义</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Exec-1\"><a href=\"#Exec-1\" class=\"headerlink\" title=\"Exec\"></a>Exec</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>      <span class=\"comment\"># Readiness Probe</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span>              <span class=\"comment\"># 定义 ls /ready 命令</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ls</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/ready</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h2><p><strong><code>组织Pod的利器: Kubernetes提供了一种机制来为资源分类，那就是Label（标签）</code></strong></p>\n<p>没有分类组织的Pod</p>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815225858369.png\" class title=\"image-20220815225858369\">\n\n<p>使用Label组织的Pod</p>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815225949945.png\" class title=\"image-20220815225949945\">\n\n<h3 id=\"添加Label\"><a href=\"#添加Label\" class=\"headerlink\" title=\"添加Label\"></a>添加Label</h3><p>Label的形式为key-value形式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\"># 为Pod设置两个Label    </span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span>    </span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看Label\"><a href=\"#查看Label\" class=\"headerlink\" title=\"查看Label\"></a>查看Label</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改Label\"><a href=\"#修改Label\" class=\"headerlink\" title=\"修改Label\"></a>修改Label</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nginx是上面的pod的name</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">label</span> <span class=\"string\">pod</span> <span class=\"string\">nginx</span> <span class=\"string\">env=debug</span> <span class=\"string\">--overwrite</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Pod的编排与调度\"><a href=\"#Pod的编排与调度\" class=\"headerlink\" title=\"Pod的编排与调度\"></a>Pod的编排与调度</h1><h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>一个Deployment可以包含一个或多个Pod副本，每个Pod副本的角色相同，并且提供副本管理、滚动升级和自愈能力</p>\n<h3 id=\"Deployment的创建\"><a href=\"#Deployment的创建\" class=\"headerlink\" title=\"Deployment的创建\"></a>Deployment的创建</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> \t\t\t<span class=\"comment\"># 注意这里与Pod的区别，Deployment是apps/v1而不是v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span> \t\t\t\t<span class=\"comment\"># 资源类型为Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-web</span> \t\t\t\t<span class=\"comment\"># Deployment的名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> \t\t\t\t\t<span class=\"comment\"># Pod的数量，Deployment会确保一直有2个Pod运行</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>\t\t\t\t\t\t<span class=\"comment\"># Label Selector</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>\t\t\t\t\t\t<span class=\"comment\"># Pod的定义，用于创建Pod，也称为Pod template</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALLOW_EMPTY_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">REDIS_REPLICATION_MOD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">redis:5</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">128Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">private-registry-secret</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">schedulerName:</span> <span class=\"string\">default-scheduler</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsNonRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p>使用kubectl get查看Deployment和Pod，可以看到<strong>READY</strong>值为2&#x2F;2，前一个2表示当前有2个Pod运行，后一个2表示期望有2个Pod，<strong>AVAILABLE</strong>为2表示有2个Pod是可用的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get deployments.apps -n mall-dev</span></span><br><span class=\"line\">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">redis-web      2/2     2            2           146d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deployment控制Pod\"><a href=\"#Deployment控制Pod\" class=\"headerlink\" title=\"Deployment控制Pod\"></a>Deployment控制Pod</h3><p>Deployment是通过一种名为ReplicaSet的控制器控制Pod。</p>\n<p><code>Deployment控制ReplicaSet，ReplicaSet控制Pod</code></p>\n<p>查询ReplicaSet命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get rs -n mall-dev</span></span><br><span class=\"line\">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">redis-web-db6f7cd87       2         2         2       145d</span><br></pre></td></tr></table></figure>\n\n<p>使用kubectl describe命令查看Deployment的详情，您就可以看到ReplicaSet</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl describe deployments.apps redis-web -n mall-dev</span></span><br><span class=\"line\">Name:                   redis-web</span><br><span class=\"line\">Namespace:              mall-dev</span><br><span class=\"line\">CreationTimestamp:      Tue, 22 Mar 2022 01:10:22 +0800</span><br><span class=\"line\">Labels:                 &lt;none&gt;</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 6</span><br><span class=\"line\">Selector:               app=redis-web</span><br><span class=\"line\">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:       app=redis-web</span><br><span class=\"line\">  Annotations:  kubectl.kubernetes.io/restartedAt: 2022-03-23T22:51:20+08:00</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   redis-web:</span><br><span class=\"line\">    Image:      redis:5</span><br><span class=\"line\">    Port:       6379/TCP</span><br><span class=\"line\">    Host Port:  0/TCP</span><br><span class=\"line\">    Limits:</span><br><span class=\"line\">      cpu:                2</span><br><span class=\"line\">      ephemeral-storage:  1Gi</span><br><span class=\"line\">      memory:             256Mi</span><br><span class=\"line\">    Requests:</span><br><span class=\"line\">      cpu:                200m</span><br><span class=\"line\">      ephemeral-storage:  200Mi</span><br><span class=\"line\">      memory:             128Mi</span><br><span class=\"line\">    Environment:</span><br><span class=\"line\">      ALLOW_EMPTY_PASSWORD:   <span class=\"built_in\">yes</span></span><br><span class=\"line\">      REDIS_REPLICATION_MOD:  master</span><br><span class=\"line\">    Mounts:                   &lt;none&gt;</span><br><span class=\"line\">  Volumes:                    &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   redis-web-db6f7cd87 (2/2 replicas created) <span class=\"comment\">#ReplicaSet信息</span></span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  9m14s  deployment-controller  Scaled up replica <span class=\"built_in\">set</span> redis-web-db6f7cd87 to 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deployment升级\"><a href=\"#Deployment升级\" class=\"headerlink\" title=\"Deployment升级\"></a>Deployment升级</h3><p>Deployment可以设置不同的升级策略，有如下两种。</p>\n<ul>\n<li>RollingUpdate：滚动升级，即逐步创建新Pod再删除旧Pod，为默认策略。</li>\n<li>Recreate：替换升级，即先把当前Pod删掉再重新创建Pod。</li>\n</ul>\n<p>Deployment可以通过maxSurge和maxUnavailable两个参数控制升级过程中同时重新创建Pod的比例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>maxSurge：与Deployment中spec.replicas相比，可以有多少个Pod存在，默认值是25%，比如spec.replicas为 4，那升级过程中就不能超过5个Pod存在，即按1个的步伐升级，实际升级过程中会换算成数字，且换算会向上取整。这个值也可以直接设置成数字。</li>\n<li>maxUnavailable：与Deployment中spec.replicas相比，可以有多少个Pod失效，也就是删除的比例，默认值是25%，比如spec.replicas为4，那升级过程中就至少有3个Pod存在，即删除Pod的步伐是1。同样这个值也可以设置成数字。</li>\n</ul>\n<h3 id=\"Deployment回滚\"><a href=\"#Deployment回滚\" class=\"headerlink\" title=\"Deployment回滚\"></a>Deployment回滚</h3><p>回滚也称为回退，即当发现升级出现问题时，让应用回到老的版本。Deployment可以非常方便的回滚到老版本。</p>\n<p>假如上面升级的新版镜像有问题，可以执行kubectl rollout undo命令进行回滚。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl rollout undo deployment redis-web</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StatefulSet\"><a href=\"#StatefulSet\" class=\"headerlink\" title=\"StatefulSet\"></a>StatefulSet</h2><p>Deployment控制器下的Pod都有个共同特点，那就是每个Pod除了名称和IP地址不同，其余完全相同。需要的时候，Deployment可以通过Pod模板创建新的Pod；不需要的时候，Deployment就可以删除任意一个Pod。</p>\n<p>详细分析下有状态应用的需求，分布式有状态的特点主要是应用中每个部分的角色不同（即分工不同），比如数据库有主备，Pod之间有依赖，对应到Kubernetes中就是对Pod有如下要求：</p>\n<ul>\n<li>Pod能够被别的Pod找到，这就要求Pod有固定的标识。</li>\n<li>每个Pod有单独存储，Pod被删除恢复后，读取的数据必须还是以前那份，否则状态就会不一致。</li>\n</ul>\n<p>Kubernetes提供了StatefulSet来解决这个问题，其具体如下：</p>\n<ol>\n<li>StatefulSet给每个Pod提供固定名称，Pod名称增加从0-N的固定后缀，Pod重新调度后Pod名称和HostName不变。</li>\n<li>StatefulSet通过Headless Service给每个Pod提供固定的访问域名，Service的概念会在后面章节中详细介绍。</li>\n<li>StatefulSet通过创建固定标识的PVC保证Pod重新调度后还是能访问到相同的持久化数据。</li>\n</ol>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220816210111583.png\" class title=\"image-20220816210111583\">\n\n\n\n\n\n<h3 id=\"创建Headless-Service\"><a href=\"#创建Headless-Service\" class=\"headerlink\" title=\"创建Headless Service\"></a>创建Headless Service</h3><p>创建Statefulset需要一个Headless Service用于Pod访问</p>\n<p>使用如下文件描述Headless Service，其中：</p>\n<ul>\n<li>spec.clusterIP：必须设置为None，表示Headless Service。</li>\n<li>spec.ports.port：Pod间通信端口号。</li>\n<li>spec.ports.name：Pod间通信端口名称。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>       <span class=\"comment\"># 对象类型为Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>     <span class=\"comment\"># Pod间通信的端口名称</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span>        <span class=\"comment\"># Pod间通信的端口号</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span>        <span class=\"comment\"># 选择标签为app:nginx的Pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span>     <span class=\"comment\"># 必须设置为None，表示Headless Service</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>创建后的service</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl get service  -n mall-dev</span></span><br><span class=\"line\">NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">nginx   ClusterIP   None            &lt;none&gt;        80/TCP     2m26s</span><br><span class=\"line\">redis   ClusterIP   10.96.121.105   &lt;none&gt;        6379/TCP   147d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建Statefulset\"><a href=\"#创建Statefulset\" class=\"headerlink\" title=\"创建Statefulset\"></a>创建Statefulset</h3><p><strong><code>serviceName指定了Statefulset使用哪个Headless Service</code></strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">nginx</span>                             <span class=\"comment\"># headless service的名称</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>创建后的pod</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          5m43s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          3m59s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          3m55s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>删除pod后再查看pod</code></strong></p>\n<p>会发现k8s会重新创建一个name一样的pod出来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          11m</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m24s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m20s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl delete pod nginx-0 -n mall-dev</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-0&quot;</span> deleted</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          2s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m50s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m46s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          4s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m52s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m48s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>进入pod内部查看hostname</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-0 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-0</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-1 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-1</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-2 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-2</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StatefulSet的网络标识\"><a href=\"#StatefulSet的网络标识\" class=\"headerlink\" title=\"StatefulSet的网络标识\"></a>StatefulSet的网络标识</h3><p>StatefulSet创建后，可以看下Pod是有固定名称的，那Headless Service是如何起作用的呢，那就是使用DNS，为Pod提供固定的域名，这样Pod间就可以使用域名访问，即便Pod被重新创建而导致Pod的IP地址发生变化，这个域名也不会发生变化。</p>\n<p>Headless Service创建后，每个Pod的IP都会有下面格式的域名。</p>\n<p><strong><code>&lt;pod-name&gt;.&lt;svc-name&gt;.&lt;namespace&gt;.svc.cluster.local</code></strong></p>\n<p>例如上面的三个Pod的域名就是：</p>\n<ul>\n<li>nginx-0.nginx.mall-dev.svc.cluster.local</li>\n<li>nginx-1.nginx.mall-dev..svc.cluster.local</li>\n<li>nginx-2.nginx.mall-dev.ult.svc.cluster.local</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl run -it --image=busybox:1.28.3 --restart=Never -n mall-dev dns-test /bin/sh</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.202 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-1.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.nginx</span><br><span class=\"line\">Address 1: 192.167.85.204 nginx-1.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-2.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-2.nginx</span><br><span class=\"line\">Address 1: 192.167.85.203 nginx-2.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\"># </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>删除一个pod后在查看dns</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除pod</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev </span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dns-test                    1/1     Running   0          75s</span><br><span class=\"line\">nginx-0                     1/1     Running   0          31m</span><br><span class=\"line\">nginx-1                     1/1     Running   0          41m</span><br><span class=\"line\">nginx-2                     1/1     Running   0          41m</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl delete pod -n mall-dev nginx-0</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-0&quot;</span> deleted</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev </span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dns-test                    1/1     Running   0          2m47s</span><br><span class=\"line\">nginx-0                     1/1     Running   0          71s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          43m</span><br><span class=\"line\">nginx-2                     1/1     Running   0          43m</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">#查看dns</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl run -it --image=busybox:1.28.3 --restart=Never -n mall-dev dns-test /bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#####第一次查看#####</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.202 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-1.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.nginx</span><br><span class=\"line\">Address 1: 192.167.85.204 nginx-1.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-2.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-2.nginx</span><br><span class=\"line\">Address 1: 192.167.85.203 nginx-2.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\"><span class=\"comment\">#####第二次查看#####</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.214 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StatefulSet存储状态\"><a href=\"#StatefulSet存储状态\" class=\"headerlink\" title=\"StatefulSet存储状态\"></a>StatefulSet存储状态</h3><p><strong><code>StatefulSet可以通过PVC做持久化存储，保证Pod重新调度后还是能访问到相同的持久化数据，在删除Pod时，PVC不会被删除。</code></strong></p>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220816215943427.png\" class title=\"image-20220816215943427\">\n\n<h2 id=\"Job和CronJob\"><a href=\"#Job和CronJob\" class=\"headerlink\" title=\"Job和CronJob\"></a>Job和CronJob</h2><p>Job和CronJob是负责批量处理短暂的一次性任务（short lived one-off tasks），即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。</p>\n<ul>\n<li>Job：是Kubernetes用来控制批处理型任务的资源对象。批处理业务与长期伺服业务（Deployment、Statefulset）的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出（Pod自动删除）。</li>\n<li>CronJob：是基于时间的Job，就类似于Linux系统的crontab文件中的一行，在指定的时间周期运行指定的Job。</li>\n</ul>\n<p>任务负载的这种用完即停止的特性特别适合一次性任务，比如持续集成。</p>\n<table>\n<thead>\n<tr>\n<th>Job类型</th>\n<th>说明</th>\n<th>使用示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一次性Job</td>\n<td>创建一个Pod直至其成功结束</td>\n<td>数据库迁移</td>\n</tr>\n<tr>\n<td>固定结束次数的Job</td>\n<td>依次创建一个Pod运行直至completions个成功结束</td>\n<td>处理工作队列的Pod</td>\n</tr>\n<tr>\n<td>固定结束次数的并行Job</td>\n<td>依次创建多个Pod运行直至completions个成功结束</td>\n<td>多个Pod同时处理工作队列</td>\n</tr>\n<tr>\n<td>并行Job</td>\n<td>创建一个或多个Pod直至有一个成功结束</td>\n<td>多个Pod同时处理工作队列</td>\n</tr>\n</tbody></table>\n<h3 id=\"创建Job\"><a href=\"#创建Job\" class=\"headerlink\" title=\"创建Job\"></a>创建Job</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: batch/v1</span><br><span class=\"line\">kind: Job</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: pi-with-timeout</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  completions: 50            # 运行的次数，即Job结束需要成功运行的Pod个数</span><br><span class=\"line\">  parallelism: 5             # 并行运行Pod的数量，默认为1</span><br><span class=\"line\">  backoffLimit: 5            # 表示失败Pod的重试最大次数，超过这个次数不会继续重试。</span><br><span class=\"line\">  activeDeadlineSeconds: 10  # 表示Pod超期时间，一旦达到这个时间，Job及其所有的Pod都会停止。</span><br><span class=\"line\">  template:                  # Pod定义</span><br><span class=\"line\">    spec: </span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: pi</span><br><span class=\"line\">        image: perl</span><br><span class=\"line\">        command:</span><br><span class=\"line\">        - perl</span><br><span class=\"line\">        - &quot;-Mbignum=bpi&quot;</span><br><span class=\"line\">        - &quot;-wle&quot;</span><br><span class=\"line\">        - print bpi(2000)</span><br><span class=\"line\">      restartPolicy: Never</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建CronJob\"><a href=\"#创建CronJob\" class=\"headerlink\" title=\"创建CronJob\"></a>创建CronJob</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cronjob-example</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;0,15,30,45 * * * *&quot;</span>           <span class=\"comment\"># 定时相关配置</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span>                             <span class=\"comment\"># Job的定义</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">OnFailure</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">main</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">pi</span></span><br></pre></td></tr></table></figure>\n\n<p>CronJob的格式从前到后就是：</p>\n<ul>\n<li>Minute</li>\n<li>Hour</li>\n<li>Day of month</li>\n<li>Month</li>\n<li>Day of week</li>\n</ul>\n<h2 id=\"DaemonSet\"><a href=\"#DaemonSet\" class=\"headerlink\" title=\"DaemonSet\"></a>DaemonSet</h2><p>DaemonSet是这样一种对象（守护进程），它在集群的每个节点上运行一个Pod，且保证只有一个Pod。</p>\n<p>DaemonSet跟节点相关，如果节点异常，也不会在其他节点重新创建。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-daemonset</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-daemonset</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-daemonset</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-daemonset</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span>                 <span class=\"comment\"># 节点选择，当节点拥有daemon=need时才在节点上创建Pod</span></span><br><span class=\"line\">        <span class=\"attr\">daemon:</span> <span class=\"string\">need</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-daemonset</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">250m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">250m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev -owide</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE   IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-0                     1/1     Running   1          23h   192.167.58.216   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-1                     1/1     Running   1          24h   192.167.85.205   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-2                     1/1     Running   1          24h   192.167.85.215   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-7q46d       1/1     Running   0          18s   192.167.85.214   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-j2ks7       1/1     Running   0          14s   192.167.58.211   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   2          46h   192.167.58.210   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   5          60d   192.167.85.207   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"亲和与反亲和调度\"><a href=\"#亲和与反亲和调度\" class=\"headerlink\" title=\"亲和与反亲和调度\"></a>亲和与反亲和调度</h2><p>通过 Kubernetes 你可以将一个 pod 限制或倾向于在某些特定节点运行。有几种方式可以达到这个目的，它们都通过 **<code>label selectors</code>**进行选择</p>\n<h3 id=\"Node-Label\"><a href=\"#Node-Label\" class=\"headerlink\" title=\"Node Label\"></a>Node Label</h3><p>添加label</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl label node &lt;node_name&gt; key=value</span><br><span class=\"line\"><span class=\"comment\">#命令</span></span><br><span class=\"line\">kubectl label node k8s-node02 app=mall-dev</span><br></pre></td></tr></table></figure>\n\n<p>查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"> kubectl get node --show-labels</span><br><span class=\"line\"> <span class=\"comment\">#结果</span></span><br><span class=\"line\"> [root@k8s-master yaml]<span class=\"comment\"># kubectl get node --show-labels</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE    VERSION   LABELS</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   245d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=</span><br><span class=\"line\">k8s-node01   Ready    worker                 245d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node01,kubernetes.io/os=linux,node-role.kubernetes.io/worker=</span><br><span class=\"line\">k8s-node02   Ready    worker                 245d   v1.21.0   app=mall-dev,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node02,kubernetes.io/os=linux,node-role.kubernetes.io/worker=</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>更改</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl label node &lt;node_name&gt; key=value  --overwrite</span><br><span class=\"line\"><span class=\"comment\">#命令更改</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl label node k8s-node02 app=mall-nginx --overwrite</span></span><br><span class=\"line\">node/k8s-node02 labeled</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get node --show-labels</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE    VERSION   LABELS</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   245d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers=</span><br><span class=\"line\">k8s-node01   Ready    worker                 245d   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node01,kubernetes.io/os=linux,node-role.kubernetes.io/worker=</span><br><span class=\"line\">k8s-node02   Ready    worker                 245d   v1.21.0   app=mall-nginx,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,daemon=need,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node02,kubernetes.io/os=linux,node-role.kubernetes.io/worker=</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Node-Affinity（节点亲和）\"><a href=\"#Node-Affinity（节点亲和）\" class=\"headerlink\" title=\"Node Affinity（节点亲和）\"></a>Node Affinity（节点亲和）</h3><p>通过nodeSelector可以让Pod只部署在具有特定标签的节点上</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>                 <span class=\"comment\"># 节点选择，当节点拥有app=mall-dev时才在节点上创建Pod</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mall-nginx</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过节点亲和性规则配置，也可以做到同样的事情</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span>  <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span>  <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                <span class=\"attr\">values:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&quot;mall-nginx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里affinity表示亲和，nodeAffinity表示节点亲和，requiredDuringSchedulingIgnoredDuringExecution非常长，不过可以将这个分作两段来看：</p>\n<ul>\n<li>前半段requiredDuringScheduling表示下面定义的规则必须强制满足（require）才会调度Pod到节点上。</li>\n<li>后半段IgnoredDuringExecution表示已经在节点上运行的Pod不需要满足下面定义的规则，即去除节点上的某个标签，那些需要节点包含该标签的Pod不会被重新调度。</li>\n</ul>\n<p>另外操作符operator的值为In，表示标签值需要在values的列表中，其他operator取值如下。</p>\n<ul>\n<li>NotIn：标签的值不在某个列表中</li>\n<li>In：标签的值在个列表中</li>\n<li>Exists：某个标签存在</li>\n<li>DoesNotExist：某个标签不存在</li>\n<li>Gt：标签的值大于某个值（字符串比较）</li>\n<li>Lt：标签的值小于某个值（字符串比较）</li>\n</ul>\n<p><strong><code>部署对应的yaml文件，查看pod被调度到对应有label的node上</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev -owide</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE     IP               NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-0                     1/1     Running   1          24h     192.167.58.216   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-1                     1/1     Running   1          24h     192.167.85.205   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-2                     1/1     Running   1          24h     192.167.85.215   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-78c67b5cdb-c4lkj      1/1     Running   0          7m21s   192.167.58.221   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-78c67b5cdb-hkpgm      1/1     Running   0          7m21s   192.167.58.222   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-78c67b5cdb-zx97s      1/1     Running   0          7m21s   192.167.58.220   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-7q46d       1/1     Running   0          19m     192.167.85.214   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-j2ks7       1/1     Running   0          19m     192.167.58.211   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   2          46h     192.167.58.210   k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   5          60d     192.167.85.207   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点优先选择规则\"><a href=\"#节点优先选择规则\" class=\"headerlink\" title=\"节点优先选择规则\"></a>节点优先选择规则</h3><p>节点亲和还有一种优先选择规则，即preferredDuringSchedulingIgnoredDuringExecution，表示会根据规则<strong>优先</strong>选择哪些节点</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">nginx-label</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span>  <span class=\"string\">nginx-label</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-label</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span>  <span class=\"string\">nginx-label</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">nginx-label</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">80</span> </span><br><span class=\"line\">            <span class=\"attr\">preference:</span> </span><br><span class=\"line\">              <span class=\"attr\">matchExpressions:</span> </span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">mall-label</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span> </span><br><span class=\"line\">                <span class=\"attr\">values:</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">nginx-label</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">20</span> </span><br><span class=\"line\">            <span class=\"attr\">preference:</span> </span><br><span class=\"line\">              <span class=\"attr\">matchExpressions:</span> </span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span> </span><br><span class=\"line\">                <span class=\"attr\">values:</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&quot;mall-nginx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>查看部署后的结果</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev -owide</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE   IP                NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-0                       1/1     Running   1          24h   192.167.58.216    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-1                       1/1     Running   1          25h   192.167.85.205    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-2                       1/1     Running   1          25h   192.167.85.215    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-7q46d         1/1     Running   0          47m   192.167.85.214    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-daemonset-j2ks7         1/1     Running   0          46m   192.167.58.211    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-67br8   1/1     Running   0          10s   192.167.58.231    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-8lvnr   1/1     Running   0          10s   192.167.58.238    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-cp6lz   1/1     Running   0          10s   192.167.135.137   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-dk2jm   1/1     Running   0          10s   192.167.58.233    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-f8jcm   1/1     Running   0          10s   192.167.58.242    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-gnvnv   1/1     Running   0          10s   192.167.135.138   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-pss49   1/1     Running   0          10s   192.167.135.139   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-r6l96   1/1     Running   0          10s   192.167.58.230    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-sl28m   1/1     Running   0          10s   192.167.58.243    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-label-df8799647-zps5t   1/1     Running   0          10s   192.167.58.237    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff     1/1     Running   2          47h   192.167.58.210    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph     1/1     Running   5          60d   192.167.85.207    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于节点排序优先级如下所示，有个两个标签的节点排序最高，只有**<code>mall-label=nginx-label</code><strong>标签的节点排序第二（权重为80），只有</strong><code>app=mall-nginx</code>**的节点排序第三，没有的节点排序最低。</p>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220817222302611.png\" class title=\"image-20220817222302611\">\n\n<p>Pod并没有调度到 **<code>k8s-node01</code>**这个节点上，这是因为这个节点上部署了很多其他Pod，资源使用较多，所以并没有往这个节点上调度，这也侧面说明preferredDuringSchedulingIgnoredDuringExecution是优先规则，而不是强制规则。</p>\n<h3 id=\"Pod-Affinity（Pod亲和）\"><a href=\"#Pod-Affinity（Pod亲和）\" class=\"headerlink\" title=\"Pod Affinity（Pod亲和）\"></a>Pod Affinity（Pod亲和）</h3><p>节点亲和的规则只能影响Pod和节点之间的亲和，Kubernetes还支持Pod和Pod之间的亲和，例如多个pod不会同时被调度到同一个node上面，或者前端和后端部署在同一个node上，从而减少访问延迟等。</p>\n<p>Pod亲和同样有requiredDuringSchedulingIgnoredDuringExecution和preferredDuringSchedulingIgnoredDuringExecution两种规则</p>\n<p><strong><code>调度时，先对node的label【kubernetes.io/hostname，表示所有node】进行匹配，然后在对pod的label【app=backend】进行匹配,完成后对新调度的pod进行亲和</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>   <span class=\"string\">frontend</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">frontend</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span> <span class=\"comment\">#node的label</span></span><br><span class=\"line\">            <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">              <span class=\"attr\">matchExpressions:</span> </span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span> <span class=\"comment\">#pod的label app=backed</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span> </span><br><span class=\"line\">                <span class=\"attr\">values:</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">backend</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pod-AntiAffinity（Pod反亲和）\"><a href=\"#Pod-AntiAffinity（Pod反亲和）\" class=\"headerlink\" title=\"Pod AntiAffinity（Pod反亲和）\"></a>Pod AntiAffinity（Pod反亲和）</h3><p><strong><code>调度时，先对node的label【kubernetes.io/hostname，表示所有node】进行匹配，然后在对pod的label【app=frontend】进行匹配,完成后对新调度的pod进行反亲和</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>   <span class=\"string\">frontend</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">frontend</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">frontend</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span>  <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span>  <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span> <span class=\"comment\">#node的label</span></span><br><span class=\"line\">            <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">              <span class=\"attr\">matchExpressions:</span> </span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app</span> <span class=\"comment\">#pod的label app=frontend</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span> </span><br><span class=\"line\">                <span class=\"attr\">values:</span> </span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">frontend</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以针对 Pod 间亲和性与反亲和性为其 <code>operator</code> 字段使用 <code>In</code>、<code>NotIn</code>、<code>Exists</code>、 <code>DoesNotExist</code> 等值。</p>\n<p>原则上，<code>topologyKey</code> 可以是任何合法的标签键。出于性能和安全原因，<code>topologyKey</code> 有一些限制：</p>\n<ul>\n<li>对于 Pod 亲和性而言，在 <code>requiredDuringSchedulingIgnoredDuringExecution</code> 和 <code>preferredDuringSchedulingIgnoredDuringExecution</code> 中，<code>topologyKey</code> 不允许为空。</li>\n<li>对于 <code>requiredDuringSchedulingIgnoredDuringExecution</code> 要求的 Pod 反亲和性， 准入控制器 <code>LimitPodHardAntiAffinityTopology</code> 要求 <code>topologyKey</code> 只能是 <code>kubernetes.io/hostname</code>。如果你希望使用其他定制拓扑逻辑， 你可以更改准入控制器或者禁用之。</li>\n</ul>\n<p>除了 <code>labelSelector</code> 和 <code>topologyKey</code>，你也可以指定 <code>labelSelector</code> 要匹配的命名空间列表，方法是在 <code>labelSelector</code> 和 <code>topologyKey</code> 所在层同一层次上设置 <code>namespaces</code>。 如果 <code>namespaces</code> 被忽略或者为空，则默认为 Pod 亲和性&#x2F;反亲和性的定义所在的命名空间。</p>\n<h1 id=\"持久化存储\"><a href=\"#持久化存储\" class=\"headerlink\" title=\"持久化存储\"></a>持久化存储</h1><h2 id=\"Volume\"><a href=\"#Volume\" class=\"headerlink\" title=\"Volume\"></a>Volume</h2><h3 id=\"Volume的类型\"><a href=\"#Volume的类型\" class=\"headerlink\" title=\"Volume的类型\"></a>Volume的类型</h3><p>Kubernetes的Volume有非常多的类型，在实际使用中使用最多的类型如下。</p>\n<ul>\n<li>emptyDir：一种简单的空目录，主要用于临时存储。</li>\n<li>hostPath：将主机某个目录挂载到容器中。</li>\n<li>ConfigMap、Secret：特殊类型，将Kubernetes特定的对象类型挂载到Pod</li>\n<li>persistentVolumeClaim：Kubernetes的持久化存储类型。</li>\n</ul>\n<h3 id=\"EmptyDir\"><a href=\"#EmptyDir\" class=\"headerlink\" title=\"EmptyDir\"></a>EmptyDir</h3><p>EmptyDir是最简单的一种Volume类型，根据名字就能看出，这个Volume挂载后就是一个空目录，应用程序可以在里面读写文件，emptyDir Volume的生命周期与Pod相同，Pod删除后Volume的数据也同时删除掉。</p>\n<p>emptyDir的一些用途：</p>\n<ul>\n<li>缓存空间，例如基于磁盘的归并排序。</li>\n<li>为耗时较长的计算任务提供检查点，以便任务能从崩溃前状态恢复执行。</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">test-container</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/cache</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cache-volume</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cache-volume</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外emptyDir也可以设置存储介质为内存，如下所示，medium设置为Memory</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">test-container</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/cache</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cache-volume</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html</span></span><br><span class=\"line\">      <span class=\"attr\">emptyDir:</span></span><br><span class=\"line\">        <span class=\"attr\">medium:</span> <span class=\"string\">Memory</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HostPath\"><a href=\"#HostPath\" class=\"headerlink\" title=\"HostPath\"></a>HostPath</h3><p>HostPath是一种持久化存储，emptyDir里面的内容会随着Pod的删除而消失，但HostPath不会，如果对应的Pod删除，HostPath Volume里面的内容依然存在于节点的目录中，如果后续重新创建Pod并调度到同一个节点，挂载后依然可以读取到之前Pod写的内容。</p>\n<p>HostPath存储的内容与节点相关，所以它不适合像数据库这类的应用，想象下如果数据库的Pod被调度到别的节点了，那读取的内容就完全不一样了。</p>\n<p>记住永远不要使用HostPath存储跨Pod的数据，一定要把HostPath的使用范围限制在读取节点文件上，这是因为Pod被重建后不确定会调度哪个节点上，写文件可能会导致前后不一致。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-hostpath</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">hostpath-container</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/test-pd</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">test-volume</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-volume</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/data</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Volume中引用ConfigMap\"><a href=\"#在Volume中引用ConfigMap\" class=\"headerlink\" title=\"在Volume中引用ConfigMap\"></a>在Volume中引用ConfigMap</h3><p>在Volume中引用ConfigMap，就是通过文件的方式直接将ConfigMap的每条数据填入Volume，每条数据是一个文件，键就是文件名，键值就是文件内容。</p>\n<p>创建一个名为vol-configmap的Volume，这个Volume引用名为<strong>“configmap-test”</strong>的ConfigMap，再将Volume挂载到容器的“&#x2F;tmp”路径下。Pod创建成功后，在容器的“&#x2F;tmp”路径下，就有两个文件property_1和property_2，它们的值分别为“Hello”和“World”。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap-test</span></span><br><span class=\"line\"><span class=\"attr\">data:</span>                     <span class=\"comment\"># 配置数据</span></span><br><span class=\"line\">  <span class=\"attr\">property_1:</span> <span class=\"string\">Hello</span></span><br><span class=\"line\">  <span class=\"attr\">property_2:</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">vol-configmap</span>           <span class=\"comment\"># 挂载名为vol-configmap的Volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/tmp&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">vol-configmap</span></span><br><span class=\"line\">    <span class=\"attr\">configMap:</span>                      <span class=\"comment\"># 引用ConfigMap</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">configmap-test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Volume中引用Secret\"><a href=\"#在Volume中引用Secret\" class=\"headerlink\" title=\"在Volume中引用Secret\"></a>在Volume中引用Secret</h3><p>在Volume中引用Secret，就是通过文件的方式直接将Secret的每条数据填入Volume，每条数据是一个文件，键就是文件名，键值就是文件内容。</p>\n<p>如下示例中，创建一个名为vol-secret的Volume，这个Volume引用名为<strong>“mysecret”</strong>的Secret，再将Volume挂载到容器的“&#x2F;tmp”路径下。Pod创建成功后，在容器的“&#x2F;tmp”路径下，就有两个文件key1和key2。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">key1:</span> <span class=\"string\">aGVsbG8gd29ybGQ=</span>   <span class=\"comment\"># &quot;hello world&quot; Base64编码后的值</span></span><br><span class=\"line\">  <span class=\"attr\">key2:</span> <span class=\"string\">MzMwNg==</span>           <span class=\"comment\"># &quot;3306&quot; Base64编码后的值</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">vol-secret</span>              <span class=\"comment\"># 挂载名为vol-secret的Volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">&quot;/tmp&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">vol-secret</span></span><br><span class=\"line\">    <span class=\"attr\">secret:</span>                         <span class=\"comment\"># 引用Secret</span></span><br><span class=\"line\">      <span class=\"attr\">secretName:</span> <span class=\"string\">mysecret</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PV、PVC和StorageClass\"><a href=\"#PV、PVC和StorageClass\" class=\"headerlink\" title=\"PV、PVC和StorageClass\"></a>PV、PVC和StorageClass</h2><p>如果要求Pod重新调度后仍然能使用之前读写过的数据，就只能使用网络存储了，网络存储种类非常多且有不同的使用方法。Kubernetes解决这个问题的方式是抽象了PV（PersistentVolume）和PVC（PersistentVolumeClaim）来解耦这个问题</p>\n<ul>\n<li>PV：PV描述的是持久化存储卷，主要定义的是一个持久化存储在宿主机上的目录，比如一个NFS的挂载目录。</li>\n<li>PVC：PVC描述的是Pod所希望使用的持久化存储的属性，比如，Volume存储的大小、可读写权限等等。</li>\n</ul>\n<p>Kubernetes管理员设置好网络存储的类型，提供对应的PV描述符配置到Kubernetes，使用者需要存储的时候只需要创建PVC，然后在Pod中使用Volume关联PVC，即可让Pod使用到存储资源。</p>\n<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220818185709648.png\" class title=\"image-20220818185709648\">\n\n<h3 id=\"CSI\"><a href=\"#CSI\" class=\"headerlink\" title=\"CSI\"></a>CSI</h3><p>Kubernetes提供了CSI接口（Container Storage Interface，容器存储接口），基于CSI这套接口，可以开发定制出CSI插件，从而支持特定的存储，达到解耦的目的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看csi插件</span></span><br><span class=\"line\">kubectl get po -n kube-system </span><br><span class=\"line\">NAME                                                    READY   STATUS      RESTARTS       AGE</span><br><span class=\"line\">csi-nfs-controller-fdb9f88b4-4rhd4                      3/3     Running     3 (25h ago)    5d11h</span><br><span class=\"line\">csi-nfs-controller-fdb9f88b4-vw2j6                      3/3     Running     5 (25h ago)    5d11h</span><br><span class=\"line\">csi-nfs-node-77rsl                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-nfs-node-8bnhj                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-nfs-node-8jptr                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-nfs-node-bnh69                                      3/3     Running     9 (25h ago)    5d12h</span><br><span class=\"line\">csi-nfs-node-hl2pg                                      3/3     Running     7 (25h ago)    5d13h</span><br><span class=\"line\">csi-nfs-node-jgt46                                      3/3     Running     6 (25h ago)    5d13h</span><br><span class=\"line\">csi-nfs-node-qwwd2                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-controller-8bdc4fc89-7k5cx                      3/3     Running     8 (25h ago)    5d11h</span><br><span class=\"line\">csi-smb-controller-8bdc4fc89-st5d4                      3/3     Running     6 (25h ago)    5d11h</span><br><span class=\"line\">csi-smb-node-4hf9g                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-node-85km7                                      3/3     Running     9 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-node-cflt2                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-node-cl8xb                                      3/3     Running     6 (25h ago)    5d13h</span><br><span class=\"line\">csi-smb-node-k2cv7                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-node-k5z6b                                      3/3     Running     6 (25h ago)    5d12h</span><br><span class=\"line\">csi-smb-node-nrtps </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><p>Kubernetes管理员设置好网络存储的类型，提供对应的PV描述符配置到Kubernetes，使用者需要存储的时候只需要创建PVC，然后在Pod中使用Volume关联PVC，即可让Pod使用到存储资源</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv-example</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 读写模式</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 定义PV的大小</span></span><br><span class=\"line\">  <span class=\"attr\">csi:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">smb.csi.k8s.io</span>\t\t\t\t<span class=\"comment\"># 声明使用的驱动</span></span><br><span class=\"line\">    <span class=\"attr\">nodeStageSecretRef:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cifs-secret</span>\t\t\t\t\t\t<span class=\"comment\"># 访问cfs使用的密码  </span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span>\t\t\t\t\t<span class=\"comment\"># secret所在的命名空间  </span></span><br><span class=\"line\">    <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">volumeAttributes:</span></span><br><span class=\"line\">      <span class=\"attr\">source:</span> <span class=\"string\">//cfs_hostname/mall/dev</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 挂载地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumeHandle:</span> <span class=\"string\">68e4a4fd-d759-444b-8265-20dc66c8c502</span> \t<span class=\"comment\"># 存储ID</span></span><br><span class=\"line\">  <span class=\"attr\">mountOptions:</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 设置文件夹的挂载选项，比如文件夹权限，用户组等</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">dir_mode=0777</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">file_mode=0777</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">uid=1001</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">gid=1001</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PVC\"><a href=\"#PVC\" class=\"headerlink\" title=\"PVC\"></a>PVC</h3><p>PVC可以绑定一个PV</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc-example</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span>              <span class=\"comment\"># 声明存储的大小</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">pv-example</span>         <span class=\"comment\"># PV的名称</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>创建并查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f pvc.yaml -n mall-dev</span><br><span class=\"line\">persistentvolumeclaim/pvc-example created</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pvc -n mall-dev</span><br><span class=\"line\">NAME          STATUS   VOLUME       CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc-example   Bound    pv-example   5Gi       RWO                           9s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StorageClass\"><a href=\"#StorageClass\" class=\"headerlink\" title=\"StorageClass\"></a>StorageClass</h3><p>PV和PVC方法虽然能实现屏蔽底层存储，但是PV创建比较复杂（可以看到PV中csi字段的配置很麻烦）</p>\n<p>Kubernetes解决这个问题的方法是提供动态配置PV的方法，可以自动创PV。管理员可以部署PV配置器（provisioner），然后定义对应的StorageClass，这样开发者在创建PVC的时候就可以选择需要创建存储的类型，PVC会把StorageClass传递给PV provisioner，由provisioner自动创建PV。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get sc</span><br><span class=\"line\">NAME      PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class=\"line\">nfs-csi   nfs.csi.k8s.io   Retain          Immediate           <span class=\"literal\">false</span>                  191d</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"弹性伸缩\"><a href=\"#弹性伸缩\" class=\"headerlink\" title=\"弹性伸缩\"></a>弹性伸缩</h1><h4 id=\"HPA工作机制\"><a href=\"#HPA工作机制\" class=\"headerlink\" title=\"HPA工作机制\"></a>HPA工作机制</h4><p>HPA（Horizontal Pod Autoscaler）是用来控制Pod水平伸缩的控制器，HPA周期性检查Pod的度量数据，计算满足HPA资源所配置的目标数值所需的副本数量，进而调整目标资源（如Deployment）的replicas字段。<img src=\"/2022/08/20/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220818200748512.png\" class title=\"image-20220818200748512\"></p>\n<p>HPA可以配置单个和多个度量指标，配置单个度量指标时，只需要对Pod的当前度量数据求和，除以期望目标值，然后向上取整，就能得到期望的副本数。例如有一个Deployment控制有3个Pod，每个Pod的CPU使用率是70%、50%、90%，而HPA中配置的期望值是50%，计算期望副本数&#x3D;（70 + 50 + 90）&#x2F;50 &#x3D; 4.2，向上取整得到5，即期望副本数就是5。</p>\n<p>如果是配置多个度量指标，则会分别计算单个度量指标的期望副本数量，然后取其中最大值，就是最终的期望副本数量。</p>\n<p>使用HPA（Horizontal Pod Autoscaler）配合Metrics Server可以实现基于CPU和内存的自动弹性伸缩，再配合Prometheus还可以实现自定义监控指标的自动弹性伸缩。</p>\n<p><strong><code>部署Metrics </code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将yaml中的镜像地址更改和添加取消证书校验</span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: metrics-server</span><br><span class=\"line\">  name: metrics-server</span><br><span class=\"line\">  namespace: kube-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      k8s-app: metrics-server</span><br><span class=\"line\">  strategy:</span><br><span class=\"line\">    rollingUpdate:</span><br><span class=\"line\">      maxUnavailable: 0</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        k8s-app: metrics-server</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - args:</span><br><span class=\"line\">        - --cert-dir=/tmp</span><br><span class=\"line\">        - --secure-port=4443</span><br><span class=\"line\">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class=\"line\">        - --kubelet-use-node-status-port</span><br><span class=\"line\">        - --metric-resolution=15s</span><br><span class=\"line\">        - --kubelet-insecure-tls <span class=\"comment\">#禁用证书验证</span></span><br><span class=\"line\">        image: registry.cn-hangzhou.aliyuncs.com/chenby/metrics-server:v0.6.1 <span class=\"comment\">#镜像地址</span></span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>创建一个deployment</code></strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>      <span class=\"comment\"># 注意这里与Pod的区别，Deployment是apps/v1而不是v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>         <span class=\"comment\"># 资源类型为Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>            <span class=\"comment\"># Deployment的名称</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span>            <span class=\"comment\"># Pod的数量，Deployment会确保一直有2个Pod运行         </span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>              <span class=\"comment\"># Label Selector</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>              <span class=\"comment\"># Pod的定义，用于创建Pod，也称为Pod template</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br></pre></td></tr></table></figure>\n\n<p><code>**创建一个HPA</code>**</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">scale</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">10</span>                    <span class=\"comment\"># 目标资源的最大副本数量</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span>                     <span class=\"comment\"># 目标资源的最小副本数量</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span>                           <span class=\"comment\"># 度量指标，期望CPU的利用率为70%</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cpu</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">70</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span>                    <span class=\"comment\"># 目标资源</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>查看部署后的结果</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-56d58c56c7-7tqxb      1/1     Running   0          91s</span><br><span class=\"line\">nginx-56d58c56c7-cjg7x      1/1     Running   0          91s</span><br><span class=\"line\">nginx-56d58c56c7-k49k2      1/1     Running   0          91s</span><br><span class=\"line\">nginx-56d58c56c7-qp2xw      1/1     Running   0          91s</span><br><span class=\"line\">nginx-56d58c56c7-rf545      1/1     Running   0          91s</span><br><span class=\"line\">nginx-56d58c56c7-v998j      1/1     Running   0          91s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   3          2d22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   6          61d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get hpa -n mall-dev</span></span><br><span class=\"line\">NAME    REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">scale   Deployment/nginx   0%/70%    1         10        6          93s</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，TARGETS的期望值是70%，而实际是0%，这就意味着HPA会做出缩容动作，期望副本数量&#x3D;(0+0+0+0)&#x2F;70&#x3D;0，但是由于最小副本数为1，所以Pod数量会调整为1。等待一段时间，可以看到Pod数量变为1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pod数量变为1</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-56d58c56c7-v998j      1/1     Running   0          5m40s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   3          2d22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   6          61d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>查看deployment的event</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl describe deployments.apps -n mall-dev nginx</span></span><br><span class=\"line\">Name:                   nginx</span><br><span class=\"line\">Namespace:              mall-dev</span><br><span class=\"line\">CreationTimestamp:      Thu, 18 Aug 2022 21:47:52 +0800</span><br><span class=\"line\">Labels:                 &lt;none&gt;</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class=\"line\">Selector:               app=nginx</span><br><span class=\"line\">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=nginx</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   container-0:</span><br><span class=\"line\">    Image:      nginx:latest</span><br><span class=\"line\">    Port:       &lt;none&gt;</span><br><span class=\"line\">    Host Port:  &lt;none&gt;</span><br><span class=\"line\">    Limits:</span><br><span class=\"line\">      cpu:     100m</span><br><span class=\"line\">      memory:  200Mi</span><br><span class=\"line\">    Requests:</span><br><span class=\"line\">      cpu:        100m</span><br><span class=\"line\">      memory:     200Mi</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   nginx-56d58c56c7 (1/1 replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  6m58s  deployment-controller  Scaled up replica <span class=\"built_in\">set</span> nginx-56d58c56c7 to 6</span><br><span class=\"line\">  Normal  ScalingReplicaSet  103s   deployment-controller  Scaled down replica <span class=\"built_in\">set</span> nginx-56d58c56c7 to 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>查看hpa的event</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl describe deployments.apps -n mall-dev nginx</span></span><br><span class=\"line\">Name:                   nginx</span><br><span class=\"line\">Namespace:              mall-dev</span><br><span class=\"line\">CreationTimestamp:      Thu, 18 Aug 2022 21:47:52 +0800</span><br><span class=\"line\">Labels:                 &lt;none&gt;</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class=\"line\">Selector:               app=nginx</span><br><span class=\"line\">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  app=nginx</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   container-0:</span><br><span class=\"line\">    Image:      nginx:latest</span><br><span class=\"line\">    Port:       &lt;none&gt;</span><br><span class=\"line\">    Host Port:  &lt;none&gt;</span><br><span class=\"line\">    Limits:</span><br><span class=\"line\">      cpu:     100m</span><br><span class=\"line\">      memory:  200Mi</span><br><span class=\"line\">    Requests:</span><br><span class=\"line\">      cpu:        100m</span><br><span class=\"line\">      memory:     200Mi</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   nginx-56d58c56c7 (1/1 replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  6m58s  deployment-controller  Scaled up replica <span class=\"built_in\">set</span> nginx-56d58c56c7 to 6</span><br><span class=\"line\">  Normal  ScalingReplicaSet  103s   deployment-controller  Scaled down replica <span class=\"built_in\">set</span> nginx-56d58c56c7 to 1</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\">#  kubectl describe hpa scale -n mall-dev</span></span><br><span class=\"line\">Name:                                                  scale</span><br><span class=\"line\">Namespace:                                             mall-dev</span><br><span class=\"line\">Labels:                                                &lt;none&gt;</span><br><span class=\"line\">Annotations:                                           &lt;none&gt;</span><br><span class=\"line\">CreationTimestamp:                                     Thu, 18 Aug 2022 21:47:52 +0800</span><br><span class=\"line\">Reference:                                             Deployment/nginx</span><br><span class=\"line\">Metrics:                                               ( current / target )</span><br><span class=\"line\">  resource cpu on pods  (as a percentage of request):  0% (0) / 70%</span><br><span class=\"line\">Min replicas:                                          1</span><br><span class=\"line\">Max replicas:                                          10</span><br><span class=\"line\">Deployment pods:                                       1 current / 1 desired</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type            Status  Reason            Message</span><br><span class=\"line\">  ----            ------  ------            -------</span><br><span class=\"line\">  AbleToScale     True    ReadyForNewScale  recommended size matches current size</span><br><span class=\"line\">  ScalingActive   True    ValidMetricFound  the HPA was able to successfully calculate a replica count from cpu resource utilization (percentage of request)</span><br><span class=\"line\">  ScalingLimited  True    TooFewReplicas    the desired replica count is less than the minimum replica count</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type     Reason                        Age                    From                       Message</span><br><span class=\"line\">  ----     ------                        ----                   ----                       -------</span><br><span class=\"line\">  Warning  FailedGetResourceMetric       7m20s (x2 over 7m35s)  horizontal-pod-autoscaler  failed to get cpu utilization: unable to get metrics <span class=\"keyword\">for</span> resource cpu: no metrics returned from resource metrics API</span><br><span class=\"line\">  Warning  FailedComputeMetricsReplicas  7m20s (x2 over 7m35s)  horizontal-pod-autoscaler  invalid metrics (1 invalid out of 1), first error is: failed to get cpu utilization: unable to get metrics <span class=\"keyword\">for</span> resource cpu: no metrics returned from resource metrics API</span><br><span class=\"line\">  Warning  FailedGetResourceMetric       7m5s                   horizontal-pod-autoscaler  failed to get cpu utilization: did not receive metrics <span class=\"keyword\">for</span> any ready pods</span><br><span class=\"line\">  Warning  FailedComputeMetricsReplicas  7m5s                   horizontal-pod-autoscaler  invalid metrics (1 invalid out of 1), first error is: failed to get cpu utilization: did not receive metrics <span class=\"keyword\">for</span> any ready pods</span><br><span class=\"line\">  Normal   SuccessfulRescale             2m35s                  horizontal-pod-autoscaler  New size: 1; reason: All metrics below target</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["K8S"],"tags":["K8S"]},{"title":"Kaniko","url":"/2024/01/16/k8s/kaniko/","content":"<h1 id=\"Kaniko：在-k8s和-Container-环境中构建-Docker-镜像\"><a href=\"#Kaniko：在-k8s和-Container-环境中构建-Docker-镜像\" class=\"headerlink\" title=\"Kaniko：在 k8s和 Container 环境中构建 Docker 镜像\"></a>Kaniko：在 k8s和 Container 环境中构建 Docker 镜像</h1><h2 id=\"什么是-Kaniko？\"><a href=\"#什么是-Kaniko？\" class=\"headerlink\" title=\"什么是 Kaniko？\"></a>什么是 Kaniko？</h2><p>Kaniko 是一个在 k8s集群或 Container 环境中构建容器镜像的工具。它不依赖于 Docker 守护进程，并且完全在用户空间中执行 Dockerfile 中的每个命令，这使得能够在无 Docker 守护程序的环境中构建容器镜像。</p>\n<h2 id=\"为什么要使用-Kaniko？\"><a href=\"#为什么要使用-Kaniko？\" class=\"headerlink\" title=\"为什么要使用 Kaniko？\"></a>为什么要使用 Kaniko？</h2><p>在传统的 Docker 构建过程中，我们需要依赖 Docker 守护进程。然而，在某些环境中，例如 k8s集群，我们可能无法或不希望运行 Docker 守护进程。这时，Kaniko 就派上了用场。它可以在没有 Docker 守护进程的环境中构建 Docker 镜像，使得我们可以在更多的环境中构建和部署我们的应用。</p>\n<h2 id=\"Kaniko-是如何工作的？\"><a href=\"#Kaniko-是如何工作的？\" class=\"headerlink\" title=\"Kaniko 是如何工作的？\"></a>Kaniko 是如何工作的？</h2><p>Kaniko 在用户空间中执行 Dockerfile 中的每个命令，而不是在 Docker 守护进程中执行。这意味着它可以在任何容器化的环境中运行，包括 k8s集群。Kaniko 读取你的 Dockerfile，然后一步步地执行每个指令，最后生成一个 Docker 镜像，并将其推送到你指定的镜像仓库。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"如何使用-Kaniko？\"><a href=\"#如何使用-Kaniko？\" class=\"headerlink\" title=\"如何使用 Kaniko？\"></a>如何使用 Kaniko？</h2><p>使用 Kaniko 非常简单。首先，你需要在你的 k8s集群或 Container 环境中运行 Kaniko。然后，你需要提供你的 Dockerfile 和一些构建参数，例如你的镜像仓库的地址。Kaniko 会读取你的 Dockerfile，执行每个指令，然后生成一个 Docker 镜像，并将其推送到你指定的镜像仓库。</p>\n<p>下面是k8s中使用kaniko构建自定义镜像的yaml，此yaml中包含了使用cosign给镜像签名。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要替换成实际的变量&#123;harbor_url&#125; &#123;registry&#125; &#123;COSIGN_PASSWORD&#125;</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&quot;kaniko&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># 当前命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kaniko</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">&quot;kaniko&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;kaniko&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 使用的kaniko镜像</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">&quot;gcr.io/kaniko-project/executor:latest&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">      <span class=\"comment\">#kaniko 执行的命令行参数，包括harbor域名https校验，镜像tag</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span> [ <span class=\"string\">&quot;--dockerfile=/workspace/dockerfile&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--context=dir://workspace&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--destination=&#123;harbor_url&#125;/&#123;registry&#125;/nginx:doubao&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--cache&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--cache-dir=/cache&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--skip-tls-verify-registry=&#123;harbor_url&#125;&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;--digest-file=/kaniko/digest/sha256sum&quot;</span>]</span><br><span class=\"line\">      <span class=\"comment\"># kaniko的pod资源</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">limits:</span></span><br><span class=\"line\">          <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">DOCKERHUB</span></span><br><span class=\"line\">          <span class=\"comment\"># harbor_url</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;&#123;harbor_url&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">AUTHOR</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;doubao&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">IMAGE_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;nginx&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">IMAGE_VERSION</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;doubao&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 挂载访问harbor需要的认证参数和后面cosign签名需要的sha256值</span></span><br><span class=\"line\">      <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-secret</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/kaniko/.docker</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">dockerfile</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/workspace</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-digest</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/kaniko/digest</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cosign</span></span><br><span class=\"line\">      <span class=\"comment\"># cosign使用的镜像</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">&quot;bitnami/cosign:latest&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">DOCKER_CONFIG</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;/cosign-keys/.docker&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># cosign签名传递的参数和cosign使用的密码</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;/bin/sh&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          sleep 10</span></span><br><span class=\"line\"><span class=\"string\">          export COSIGN_PASSWORD=&#123;COSIGN_PASSWORD&#125;</span></span><br><span class=\"line\"><span class=\"string\">          SHA256=$(cat /kaniko/digest/sha256sum)</span></span><br><span class=\"line\"><span class=\"string\">          cosign sign --allow-insecure-registry=true -key /path/to/private/key/cosign.key --tlog-upload=false &#123;harbor_url&#125;/&#123;registry&#125;/nginx@$&#123;SHA256&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"comment\"># 挂载docker认证和镜像的sha256值</span></span><br><span class=\"line\">      <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-secret</span></span><br><span class=\"line\">        <span class=\"attr\">mountPath:</span> <span class=\"string\">/cosign-keys/.docker</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-digest</span></span><br><span class=\"line\">        <span class=\"attr\">mountPath:</span> <span class=\"string\">/kaniko/digest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cosign-key</span></span><br><span class=\"line\">        <span class=\"attr\">mountPath:</span> <span class=\"string\">/path/to/private/key</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cosign-signature</span></span><br><span class=\"line\">        <span class=\"attr\">mountPath:</span> <span class=\"string\">/cosign/signature</span></span><br><span class=\"line\">  <span class=\"comment\"># 挂载垃圾镜像需要的docker认证，还有共享两个容器内的产生镜像的sha256值和cosign所需的私钥key</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"comment\"># kubectl create secret docker-registry创建的</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-secret</span></span><br><span class=\"line\">      <span class=\"attr\">secret:</span></span><br><span class=\"line\">        <span class=\"attr\">secretName:</span> <span class=\"string\">registry-secret</span></span><br><span class=\"line\">        <span class=\"attr\">items:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">.dockerconfigjson</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">config.json</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">dockerfile</span></span><br><span class=\"line\">      <span class=\"attr\">configMap:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">dockerfile</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kaniko-digest</span></span><br><span class=\"line\">      <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">#  kubectl create secret generic cosign-secret --from-file=./key.key -n kaniko</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cosign-key</span></span><br><span class=\"line\">      <span class=\"attr\">secret:</span></span><br><span class=\"line\">        <span class=\"attr\">secretName:</span> <span class=\"string\">cosign-secret</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">cosign-signature</span></span><br><span class=\"line\">      <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 以cm来实现dockerfile</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dockerfile</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kaniko</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">dockerfile:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">    FROM nginx</span></span><br><span class=\"line\"><span class=\"string\">    LABEL kaifa=doubao</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kaniko-的优点和缺点\"><a href=\"#Kaniko-的优点和缺点\" class=\"headerlink\" title=\"Kaniko 的优点和缺点\"></a>Kaniko 的优点和缺点</h2><p>Kaniko 的主要优点是它可以在没有 Docker 守护进程的环境中构建 Docker 镜像。这使得我们可以在更多的环境中构建和部署我们的应用。此外，Kaniko 的构建过程是在用户空间中进行的，这意味着它的安全性更高。</p>\n<p>然而，Kaniko 也有一些缺点。由于它是在用户空间中执行 Dockerfile 中的每个命令，因此它的构建速度可能会比传统的 Docker 构建过程慢一些。此外，由于 Kaniko 是一个相对较新的项目，因此它可能还存在一些未知的问题或者缺陷。</p>\n","categories":["K8S"],"tags":["K8S"]},{"title":"ns绑定node节点","url":"/2023/03/16/k8s/ns%E7%BB%91%E5%AE%9Anode/","content":"<h1 id=\"开启PodNodeSelector准入控制器\"><a href=\"#开启PodNodeSelector准入控制器\" class=\"headerlink\" title=\"开启PodNodeSelector准入控制器\"></a>开启PodNodeSelector准入控制器</h1><p>只开启<code>PodNodeSelector</code>控制器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kube-apiserver --enable-admission-plugins=PodNodeSelector</span><br></pre></td></tr></table></figure>\n\n<p>如果启用多个控制器，可以（以逗号分隔的）准入控制插件列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kube-apiserver --enable-admission-plugins=NamespaceLifecycle,LimitRanger ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关闭准入控制器\"><a href=\"#关闭准入控制器\" class=\"headerlink\" title=\"关闭准入控制器\"></a>关闭准入控制器</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kube-apiserver --disable-admission-plugins=PodNodeSelector,AlwaysDeny ...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PodNodeSelector控制器的作用\"><a href=\"#PodNodeSelector控制器的作用\" class=\"headerlink\" title=\"PodNodeSelector控制器的作用\"></a>PodNodeSelector控制器的作用</h1><p><strong>特性状态：</strong> <code>Kubernetes v1.5 [alpha]</code></p>\n<p>此准入控制器通过读取名字空间注解和全局配置，来为名字空间中可以使用的节点选择器设置默认值并实施限制。</p>\n<p>此准入控制器默认被禁用。</p>\n<h2 id=\"配置文件格式\"><a href=\"#配置文件格式\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h2><p><code>PodNodeSelector</code> 使用配置文件来设置后端行为的选项。 请注意，配置文件格式将在将来某个版本中改为版本化文件。 该文件可以是 JSON 或 YAML，格式如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">podNodeSelectorPluginConfig:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterDefaultNodeSelector:</span> <span class=\"string\">name-of-node-selector</span></span><br><span class=\"line\">  <span class=\"attr\">namespace1:</span> <span class=\"string\">name-of-node-selector</span></span><br><span class=\"line\">  <span class=\"attr\">namespace2:</span> <span class=\"string\">name-of-node-selector</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 API 服务器命令行标志 <code>--admission-control-config-file</code> 为 API 服务器提供的文件中， 需要引用 <code>PodNodeSelector</code> 配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiserver.config.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">AdmissionConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PodNodeSelector</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">podnodeselector.yaml</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置注解格式\"><a href=\"#配置注解格式\" class=\"headerlink\" title=\"配置注解格式\"></a>配置注解格式</h2><p><code>PodNodeSelector</code> 使用键为 <code>scheduler.alpha.kubernetes.io/node-selector</code> 的注解为名字空间设置节点选择算符。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">kubectl</span> <span class=\"string\">edit</span> <span class=\"string\">ns</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"> <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\"> <span class=\"attr\">annotations:</span> <span class=\"comment\"># 增加</span></span><br><span class=\"line\">   <span class=\"attr\">scheduler.alpha.kubernetes.io/node-selector:</span> <span class=\"string\">env=test</span> <span class=\"comment\"># 增加</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部行为\"><a href=\"#内部行为\" class=\"headerlink\" title=\"内部行为\"></a>内部行为</h2><p>此准入控制器行为如下：</p>\n<ol>\n<li><p>如果 <code>Namespace</code> 的注解带有键 <code>scheduler.alpha.kubernetes.io/node-selector</code>， 在此命名空间中创建的所有pod都会自动添加以下部分：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">nodeSelector</span></span><br><span class=\"line\">  <span class=\"attr\">env:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果名字空间缺少此类注解，则使用 <code>PodNodeSelector</code> 插件配置文件中定义的 <code>clusterDefaultNodeSelector</code> 作为节点选择算符。</p>\n</li>\n<li><p>评估 Pod 节点选择算符和名字空间节点选择算符是否存在冲突。存在冲突将拒绝 Pod。</p>\n</li>\n<li><p>评估 Pod 节点选择算符和特定于名字空间的被允许的选择算符所定义的插件配置文件是否存在冲突。 存在冲突将导致拒绝 Pod。</p>\n</li>\n</ol>\n","categories":["K8S"],"tags":["K8S"]},{"title":"pod亲和与反亲和","url":"/2024/07/28/k8s/pod%E4%BA%B2%E5%92%8C%E4%B8%8E%E5%8F%8D%E4%BA%B2%E5%92%8C/","content":"<h1 id=\"node打label\"><a href=\"#node打label\" class=\"headerlink\" title=\"node打label\"></a>node打label</h1><p>给node-01添加标签<code>dou=bao</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看node信息</span></span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME             STATUS   ROLES                       AGE   VERSION</span><br><span class=\"line\">master-node      Ready    control-plane,etcd,master   17d   v1.30.1+rke2r1</span><br><span class=\"line\">worker-node-01   Ready    &lt;none&gt;                      17d   v1.30.1+rke2r1</span><br><span class=\"line\">worker-node-02   Ready    &lt;none&gt;                      17d   v1.30.1+rke2r1</span><br><span class=\"line\"><span class=\"comment\">#给node-01打labels</span></span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl label nodes worker-node-01 dou=bao</span></span><br><span class=\"line\">node/worker-node-01 labeled</span><br><span class=\"line\"><span class=\"comment\">#查看node的labels</span></span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get node --show-labels |grep dou</span></span><br><span class=\"line\">worker-node-01   Ready    &lt;none&gt;                      17d   v1.30.1+rke2r1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/instance-type=rke2,beta.kubernetes.io/os=linux,dou=bao,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker-node-01,kubernetes.io/os=linux,node.kubernetes.io/instance-type=rke2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"deploy中亲和\"><a href=\"#deploy中亲和\" class=\"headerlink\" title=\"deploy中亲和\"></a>deploy中亲和</h1><h2 id=\"强制亲和\"><a href=\"#强制亲和\" class=\"headerlink\" title=\"强制亲和\"></a>强制亲和</h2><p>yaml中有一个节点亲和性配置 <code>requiredDuringSchedulingIgnoredDuringExecution</code>，<code>dou=bao</code>。 这意味着 pod 只会被调度到具有 <code>dou=bao</code> 标签的节点上。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> <span class=\"comment\">#此种情况下，无论启动多少个副本，pod都会调度到node-01上</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span>  <span class=\"comment\"># 反亲和</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class=\"comment\">#一定要复合要求，不然pod会pending</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">dou</span></span><br><span class=\"line\">                    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                    <span class=\"attr\">values:</span></span><br><span class=\"line\">                      <span class=\"bullet\">-</span> <span class=\"string\">bao</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">dockerhub.qingcloud.com/doubao/nginx:latest</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">envFrom:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">secretRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">secret-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">configMapRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">base-config</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">qingyun-dockerhub</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>覆盖原有的label,并重新部署deploy</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl label nodes worker-node-01 dou=bao1 --overwrite</span></span><br><span class=\"line\">node/worker-node-01 labeled</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl rollout restart deployment -n doubao nginx</span></span><br><span class=\"line\">deployment.apps/nginx restarted</span><br></pre></td></tr></table></figure>\n\n<p>此时，新建的nginx pod将会一直处在pengidng状态</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get po -n doubao -owide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS      AGE     IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-6fdc594dcd-vqr9t   0/1     Pending   0             118s    &lt;none&gt;       &lt;none&gt;           &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-85c665bbdb-hrwpr   1/1     Running   0             5m58s   10.42.2.36   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-85c665bbdb-nm2c8   1/1     Running   0             6m47s   10.42.2.35   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   2 (23m ago)   17d     10.42.1.44   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优选亲和\"><a href=\"#优选亲和\" class=\"headerlink\" title=\"优选亲和\"></a>优选亲和</h2><p><code>yaml</code>中有一个节点亲和性配置 <code>preferredDuringSchedulingIgnoredDuringExecution</code>，<code>dou=bao</code>。 这意味着 pod 会尽量被调度到具有 <code>dou=bao</code> 标签的节点上。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\">#软约束，调度器会尽量满足这个条件。</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">1</span>  <span class=\"comment\">#偏好规则的权重是 1，权重值越高，调度器越会优先考虑这个规则。</span></span><br><span class=\"line\">              <span class=\"attr\">preference:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">dou</span></span><br><span class=\"line\">                    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                    <span class=\"attr\">values:</span></span><br><span class=\"line\">                      <span class=\"bullet\">-</span> <span class=\"string\">bao</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">dockerhub.qingcloud.com/doubao/nginx:latest</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">envFrom:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">secretRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">secret-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">configMapRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">base-config</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">qingyun-dockerhub</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>此时，即使没有复合label是<code>dou=bao</code>的话，pod也会被随机调度到node上</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get po -n doubao -owide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS      AGE   IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-c77d58977-6wfpk    1/1     Running   0             11s   10.42.1.48   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c77d58977-vmht7    1/1     Running   0             11s   10.42.2.37   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   2 (30m ago)   17d   10.42.1.44   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"deploy中反亲和\"><a href=\"#deploy中反亲和\" class=\"headerlink\" title=\"deploy中反亲和\"></a>deploy中反亲和</h1><h2 id=\"强制反亲和\"><a href=\"#强制反亲和\" class=\"headerlink\" title=\"强制反亲和\"></a>强制反亲和</h2><p><code>yaml</code>示例中，副本上设置了标签 <code>dou=bao</code>。 <code>podAntiAffinity</code> 规则告诉调度器避免将多个带有 <code>dou=bao</code> 标签的副本部署到同一节点上。 因此，每个独立节点上会创建一个缓存实例。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">4</span> <span class=\"comment\">#由2增加到4</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">dou:</span> <span class=\"string\">bao</span> <span class=\"comment\">#新增标签，下面matchExpressions要匹配</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span> <span class=\"comment\">#反亲和</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class=\"comment\">#一定要复合要求，不然pod会pending</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">dou</span></span><br><span class=\"line\">                    <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                    <span class=\"attr\">values:</span></span><br><span class=\"line\">                      <span class=\"bullet\">-</span> <span class=\"string\">bao</span></span><br><span class=\"line\">              <span class=\"attr\">topologyKey:</span> <span class=\"string\">&quot;kubernetes.io/hostname&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">dockerhub.qingcloud.com/doubao/nginx:latest</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">envFrom:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">secretRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">secret-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">configMapRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">base-config</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">qingyun-dockerhub</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>驱逐node节点，增加副本数后，新的pod将一直处在pending中，因为master和node-01上已经有nginx pod的标签是<code>dou=bao</code>了，所以新的pod没有节点可用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\">#  kubectl cordon worker-node-02</span></span><br><span class=\"line\">node/worker-node-02 cordoned</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME             STATUS                     ROLES                       AGE   VERSION</span><br><span class=\"line\">master-node      Ready                      control-plane,etcd,master   17d   v1.30.1+rke2r1</span><br><span class=\"line\">worker-node-01   Ready                      &lt;none&gt;                      17d   v1.30.1+rke2r1</span><br><span class=\"line\">worker-node-02   Ready,SchedulingDisabled   &lt;none&gt;                      17d   v1.30.1+rke2r1</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get po -n doubao -owide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS      AGE   IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-c5c59c567-4wh5z    0/1     Pending   0             7s    &lt;none&gt;       &lt;none&gt;           &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-6x6lp    1/1     Running   0             54s   10.42.0.29   master-node      &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-9fc6q    0/1     Pending   0             7s    &lt;none&gt;       &lt;none&gt;           &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-xqn88    1/1     Running   0             57s   10.42.2.40   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   2 (46m ago)   17d   10.42.1.44   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p>恢复调度，恢复调度后，新增的pod会调度到此节点上，但是仍然有一个pod处于pending状态，因为自建集群只有1M+2W。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~# kubectl uncordon worker-node-02</span><br><span class=\"line\">node/worker-node-02 uncordoned</span><br><span class=\"line\">root@devops:~# kubectl get po -n doubao -owide</span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS      AGE     IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-c5c59c567-4wh5z    1/1     Running   0             4m3s    10.42.1.52   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-6x6lp    1/1     Running   0             4m50s   10.42.0.29   master-node      &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-9fc6q    0/1     Pending   0             4m3s    &lt;none&gt;       &lt;none&gt;           &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-c5c59c567-xqn88    1/1     Running   0             4m53s   10.42.2.40   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   2 (50m ago)   17d     10.42.1.44   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优选反亲和\"><a href=\"#优选反亲和\" class=\"headerlink\" title=\"优选反亲和\"></a>优选反亲和</h2><p><code>yaml</code>示例中，副本上设置了标签 <code>dou=bao</code>。 <code>podAntiAffinity</code> 规则告诉调度器尽量避免将多个带有 <code>dou=bao</code> 标签的副本部署到同一节点上。 因此，每个独立节点上会创建一个活多个缓存实例。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">dou:</span> <span class=\"string\">bao</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">podAntiAffinity:</span> <span class=\"comment\">#反亲和</span></span><br><span class=\"line\">          <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\">#软约束，调度器会尽量满足这个条件。</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">100</span>   <span class=\"comment\">#偏好规则的权重是100重值越高，调度器越会优先考虑这个规则。</span></span><br><span class=\"line\">              <span class=\"attr\">podAffinityTerm:</span></span><br><span class=\"line\">                <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">                  <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">dou</span></span><br><span class=\"line\">                      <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                      <span class=\"attr\">values:</span></span><br><span class=\"line\">                        <span class=\"bullet\">-</span> <span class=\"string\">bao</span></span><br><span class=\"line\">                <span class=\"attr\">topologyKey:</span> <span class=\"string\">&quot;kubernetes.io/hostname&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">dockerhub.qingcloud.com/doubao/nginx:latest</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">envFrom:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">secretRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">secret-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">configMapRef:</span></span><br><span class=\"line\">                <span class=\"attr\">name:</span> <span class=\"string\">base-config</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">qingyun-dockerhub</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>即使不满足也会调度到node上</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@devops:~<span class=\"comment\"># kubectl get po -n doubao -owide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS      AGE   IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx-57d76775b7-4kc7m   1/1     Running   0             9s    10.42.2.41   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-57d76775b7-4zpk4   1/1     Running   0             9s    10.42.0.30   master-node      &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-57d76775b7-cmlqn   1/1     Running   0             9s    10.42.2.42   worker-node-01   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nginx-57d76775b7-hggbn   1/1     Running   0             9s    10.42.1.53   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">redis-6b5f9c8866-hdlmc   1/1     Running   2 (57m ago)   17d   10.42.1.44   worker-node-02   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">root@devops:~<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["K8S"],"tags":["K8S"]},{"title":"yaml","url":"/2022/08/26/k8s/yaml/","content":"<h1 id=\"文本块\"><a href=\"#文本块\" class=\"headerlink\" title=\"文本块\"></a>文本块</h1><p>多行字符串可以使用<code>|</code>保留换行符，也可以使用<code>&gt;</code>折叠换行</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">key1:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  value1</span></span><br><span class=\"line\"><span class=\"string\">  value2</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">key2:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">  value1</span></span><br><span class=\"line\"><span class=\"string\">  value2</span></span><br></pre></td></tr></table></figure>\n\n<p>转换成json格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1\\nvalue2\\n&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1 value2\\n&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">key1:</span> <span class=\"string\">|+</span></span><br><span class=\"line\"><span class=\"string\">  value1</span></span><br><span class=\"line\"><span class=\"string\">  value2</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">key2:</span> <span class=\"string\">|-</span></span><br><span class=\"line\"><span class=\"string\">  value1</span></span><br><span class=\"line\"><span class=\"string\">  value2</span></span><br></pre></td></tr></table></figure>\n\n<p>转换成json格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key1&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1\\nvalue2\\n&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key2&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;value1\\nvalue2&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p><code>&amp;</code>用来建立锚点，<code>&lt;&lt; </code>表示合并到当前数据，<code>* </code>用来引用锚点</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">key1:</span> <span class=\"meta\">&amp;key1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dooubb</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">key2:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">1213</span></span><br><span class=\"line\">  <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*key1</span></span><br></pre></td></tr></table></figure>\n\n<p>转换成json格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key1&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dooubb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key2&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1213</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dooubb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"单文件多配置\"><a href=\"#单文件多配置\" class=\"headerlink\" title=\"单文件多配置\"></a>单文件多配置</h1><p><code>---</code>分隔多个不同配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#公共配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#开发环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span> <span class=\"comment\"># </span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#生产环境配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">pro</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["K8S"],"tags":["K8S"]},{"title":"搭建k8s集群","url":"/2022/08/22/k8s/%E6%90%AD%E5%BB%BAK8S%E9%9B%86%E7%BE%A4/","content":"<h1 id=\"准备机器\"><a href=\"#准备机器\" class=\"headerlink\" title=\"准备机器\"></a>准备机器</h1><p>本地安装三台虚拟机</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点</th>\n<th align=\"center\">hostname</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">内存</th>\n<th align=\"center\">硬盘</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">master</td>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n<tr>\n<td align=\"center\">node01</td>\n<td align=\"center\">k8s-node01</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n<tr>\n<td align=\"center\">node02</td>\n<td align=\"center\">k8s-node02</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n</tbody></table>\n<h1 id=\"基础环境-都执行\"><a href=\"#基础环境-都执行\" class=\"headerlink\" title=\"基础环境(都执行)\"></a>基础环境(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\">#关闭防火墙： 如果是云服务器，需要设置安全组策略放行端口</span></span><br><span class=\"line\"><span class=\"comment\"># https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 hostname 分别执行</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-master</span><br><span class=\"line\">hostnamectl set-hostname k8s-node01</span><br><span class=\"line\">hostnamectl set-hostname k8s-node02</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 hostname 解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;127.0.0.1   <span class=\"subst\">$(hostname)</span>&quot;</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.106 k8s-master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.107 k8s-node01</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.108 k8s-node02</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看修改结果</span></span><br><span class=\"line\">hostnamectl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 selinux： </span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 swap：</span></span><br><span class=\"line\">swapoff -a  </span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许 iptables 检查桥接流量</span></span><br><span class=\"line\"><span class=\"comment\">#https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#%E5%85%81%E8%AE%B8-iptables-%E6%A3%80%E6%9F%A5%E6%A1%A5%E6%8E%A5%E6%B5%81%E9%87%8F</span></span><br><span class=\"line\"><span class=\"comment\">## 开启br_netfilter</span></span><br><span class=\"line\">sudo modprobe br_netfilter</span><br><span class=\"line\"><span class=\"comment\">## 确认下</span></span><br><span class=\"line\">lsmod | grep br_netfilter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改配置</span></span><br><span class=\"line\"><span class=\"comment\">#将桥接的 IPv4 流量传递到 iptables 的链：</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 /etc/sysctl.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有配置，则修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可能没有，追加</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.default.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.forwarding = 1&quot;</span>  &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 执行命令以应用</span></span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"docker环境安装-都执行\"><a href=\"#docker环境安装-都执行\" class=\"headerlink\" title=\"docker环境安装(都执行)\"></a>docker环境安装(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker*</span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"><span class=\"comment\">#配置docker yum 源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装docker   docker-cli  19.03.9</span></span><br><span class=\"line\">yum install -y docker-ce  docker-ce-cli-19.03.9 containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动服务</span></span><br><span class=\"line\">systemctl start docker&amp;&amp;systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置cgroupdriver </span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF&gt; /etc/docker/daemon.json </span></span><br><span class=\"line\"><span class=\"string\"> &#123;</span></span><br><span class=\"line\"><span class=\"string\">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#重启服务</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置加速 (此处使用的是阿里云的镜像加速)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://cqewcysu.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装k8s核心-都执行\"><a href=\"#安装k8s核心-都执行\" class=\"headerlink\" title=\"安装k8s核心(都执行)\"></a>安装k8s核心(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置K8S的yum源</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载旧版本</span></span><br><span class=\"line\">yum remove -y kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可以安装的版本</span></span><br><span class=\"line\">yum list kubelet --showduplicates | <span class=\"built_in\">sort</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装kubelet、kubeadm、kubectl 指定版本</span></span><br><span class=\"line\">yum install -y kubelet-1.21.0 kubeadm-1.21.0 kubectl-1.21.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机启动kubelet</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化master节点\"><a href=\"#初始化master节点\" class=\"headerlink\" title=\"初始化master节点\"></a>初始化master节点</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############下载核心镜像 kubeadm config images list：查看需要哪些镜像###########</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####封装成images.sh文件</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">images=(</span><br><span class=\"line\">  kube-apiserver:v1.21.0</span><br><span class=\"line\">  kube-proxy:v1.21.0</span><br><span class=\"line\">  kube-controller-manager:v1.21.0</span><br><span class=\"line\">  kube-scheduler:v1.21.0</span><br><span class=\"line\">  coredns:v1.8.0</span><br><span class=\"line\">  etcd:3.4.13-0</span><br><span class=\"line\">  pause:3.4.1</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    docker pull registry.cn-beijing.aliyuncs.com/k8s_fanq/<span class=\"variable\">$imageName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#####封装结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x images.sh &amp;&amp; ./images.sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##注意1.21.0版本的k8s coredns镜像比较特殊，结合阿里云需要特殊处理，重新打标签</span></span><br><span class=\"line\">docker tag registry.cn-beijing.aliyuncs.com/k8s_fanq/coredns:v1.8.0 registry.cn-beijing.aliyuncs.com/k8s_fanq/coredns/coredns:v1.8.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">########kubeadm init 一个master########################</span></span><br><span class=\"line\"><span class=\"comment\">########kubeadm join 其他worker########################</span></span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.56.106 \\</span><br><span class=\"line\">--image-repository registry.cn-beijing.aliyuncs.com/k8s_fanq \\</span><br><span class=\"line\">--kubernetes-version v1.21.0 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=192.167.0.0/16</span><br><span class=\"line\"><span class=\"comment\">## 注意：pod-cidr与service-cidr</span></span><br><span class=\"line\"><span class=\"comment\"># apiserver-advertise-address是master的ip地址</span></span><br><span class=\"line\"><span class=\"comment\"># cidr 无类别域间路由（Classless Inter-Domain Routing、CIDR）</span></span><br><span class=\"line\"><span class=\"comment\"># 指定一个网络可达范围  pod的子网范围+service负载均衡网络的子网范围+本机ip的子网范围不能有重复域</span></span><br><span class=\"line\"><span class=\"comment\">######################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 按照启动日志继续执行</span></span><br><span class=\"line\"><span class=\"comment\">## 复制相关文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 导出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 部署一个pod网络</span></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\">  <span class=\"comment\">##############如下：安装calico#####################</span></span><br><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 命令检查</span></span><br><span class=\"line\">kubectl get pod -A  <span class=\"comment\">##获取集群中所有部署好的应用Pod</span></span><br><span class=\"line\">kubectl get nodes  <span class=\"comment\">##查看集群所有机器的状态</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>master初始化日志</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubeadm init \\</span></span><br><span class=\"line\">&gt; --apiserver-advertise-address=192.168.56.106 \\</span><br><span class=\"line\">&gt; --image-repository registry.cn-beijing.aliyuncs.com/k8s_fanq \\</span><br><span class=\"line\">&gt; --kubernetes-version v1.21.0 \\</span><br><span class=\"line\">&gt; --service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">&gt; --pod-network-cidr=192.167.0.0/16</span><br><span class=\"line\">[init] Using Kubernetes version: v1.21.0</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Pulling images required <span class=\"keyword\">for</span> setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action <span class=\"keyword\">in</span> beforehand using <span class=\"string\">&#x27;kubeadm config images pull&#x27;</span></span><br><span class=\"line\">[certs] Using certificateDir folder <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.56.106]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/server&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/server serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master localhost] and IPs [192.168.56.106 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/peer serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master localhost] and IPs [192.168.56.106 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;sa&quot;</span> key and public key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder <span class=\"string\">&quot;/etc/kubernetes&quot;</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;admin.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;kubelet.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;controller-manager.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;scheduler.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-apiserver&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-controller-manager&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-scheduler&quot;</span></span><br><span class=\"line\">[etcd] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"built_in\">local</span> etcd <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[wait-control-plane] Waiting <span class=\"keyword\">for</span> the kubelet to boot up the control plane as static Pods from directory <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class=\"line\">[kubelet-check] Initial <span class=\"built_in\">timeout</span> of 40s passed.</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 60.009052 seconds</span><br><span class=\"line\">[upload-config] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap <span class=\"string\">&quot;kubelet-config-1.21&quot;</span> <span class=\"keyword\">in</span> namespace kube-system with the configuration <span class=\"keyword\">for</span> the kubelets <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] Using token: pxu7xq.yiqmz54ytjsp2wb7</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class=\"keyword\">in</span> order <span class=\"keyword\">for</span> nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class=\"keyword\">for</span> all node client certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[kubelet-finalize] Updating <span class=\"string\">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can <span class=\"built_in\">join</span> any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化worker节点\"><a href=\"#初始化worker节点\" class=\"headerlink\" title=\"初始化worker节点\"></a>初始化worker节点</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 用master生成的命令即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">\t</span><br><span class=\"line\">https://blog.csdn.net/rookie23rook/article/details/114369501\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##过期怎么办</span></span><br><span class=\"line\">kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm token create --ttl 0 --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p><code>初始化worker节点日志</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-node02 ~]<span class=\"comment\"># kubeadm join 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span></span><br><span class=\"line\">&gt; --discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class=\"built_in\">join</span> the cluster.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"验证集群\"><a href=\"#验证集群\" class=\"headerlink\" title=\"验证集群\"></a>验证集群</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取所有节点，命令都是在master节点上执行</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   3m52s   v1.21.0</span><br><span class=\"line\">k8s-node01   Ready    &lt;none&gt;                 64s     v1.21.0</span><br><span class=\"line\">k8s-node02   Ready    &lt;none&gt;                 83s     v1.21.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#给节点打标签</span></span><br><span class=\"line\"><span class=\"comment\">## k8s中万物皆对象。node:机器  Pod：应用容器</span></span><br><span class=\"line\"><span class=\"comment\">###加标签  《h1》</span></span><br><span class=\"line\">kubectl label node k8s-node01 node-role.kubernetes.io/worker=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">kubectl label node k8s-node02 node-role.kubernetes.io/worker=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">###去标签</span></span><br><span class=\"line\">kubectl label node k8s-node02 node-role.kubernetes.io/worker-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次查看所有node</span></span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   6m55s   v1.21.0</span><br><span class=\"line\">k8s-node01   Ready    worker                 4m7s    v1.21.0</span><br><span class=\"line\">k8s-node02   Ready    worker                 4m26s   v1.21.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"设置ipvs模式\"><a href=\"#设置ipvs模式\" class=\"headerlink\" title=\"设置ipvs模式\"></a>设置ipvs模式</h1><p>k8s整个集群为了访问通；默认是用iptables,性能下（kube-proxy在集群之间同步iptables的内容）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看所有pod</span></span><br><span class=\"line\">kubectl get pods -A</span><br><span class=\"line\"></span><br><span class=\"line\">root@k8s-master /]<span class=\"comment\"># kubectl get pods -A</span></span><br><span class=\"line\">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   calico-kube-controllers-5d995d45d6-rjgt2   1/1     Running   0          7m35s</span><br><span class=\"line\">kube-system   calico-node-kmhnv                          1/1     Running   0          5m43s</span><br><span class=\"line\">kube-system   calico-node-q2bfw                          1/1     Running   0          5m24s</span><br><span class=\"line\">kube-system   calico-node-zh47h                          1/1     Running   0          7m35s</span><br><span class=\"line\">kube-system   coredns-85df767cfb-2lpdk                   1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   coredns-85df767cfb-7nfwn                   1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   etcd-k8s-master                            1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-apiserver-k8s-master                  1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-controller-manager-k8s-master         1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-proxy-fj4r2                           1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   kube-proxy-m88hq                           1/1     Running   0          5m24s</span><br><span class=\"line\">kube-system   kube-proxy-rrk75                           1/1     Running   0          5m43s</span><br><span class=\"line\">kube-system   kube-scheduler-k8s-master                  1/1     Running   0          8m8s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1、查看默认kube-proxy 使用的模式</span></span><br><span class=\"line\">kubectl logs -n kube-system kube-proxy-fj4r2</span><br><span class=\"line\"><span class=\"comment\">#2、需要修改 kube-proxy 的配置文件,修改mode 为ipvs。默认iptables，但是集群大了以后就很慢</span></span><br><span class=\"line\">kubectl edit cm kube-proxy -n kube-system</span><br><span class=\"line\">修改如下</span><br><span class=\"line\">   ipvs:</span><br><span class=\"line\">      excludeCIDRs: null</span><br><span class=\"line\">      minSyncPeriod: 0s</span><br><span class=\"line\">      scheduler: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      strictARP: <span class=\"literal\">false</span></span><br><span class=\"line\">      syncPeriod: 30s</span><br><span class=\"line\">    kind: KubeProxyConfiguration</span><br><span class=\"line\">    metricsBindAddress: 127.0.0.1:10249</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;ipvs&quot;</span></span><br><span class=\"line\"> <span class=\"comment\">###修改了kube-proxy的配置，为了让重新生效，需要杀掉以前的Kube-proxy</span></span><br><span class=\"line\"> kubectl get pod -A|grep kube-proxy</span><br><span class=\"line\"> kubectl delete pod kube-proxy-fj4r2  kube-proxy-m88hq kube-proxy-rrk75 -n kube-system</span><br><span class=\"line\"><span class=\"comment\">### 修改完成后可以重启kube-proxy以生效</span></span><br></pre></td></tr></table></figure>\n\n<p>到此为止k8s集群搭建完成。</p>\n","categories":["K8S"],"tags":["K8S"]},{"title":"k8s基础","url":"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/","content":"<h2 id=\"k8s设计架构\"><a href=\"#k8s设计架构\" class=\"headerlink\" title=\"k8s设计架构\"></a>k8s设计架构</h2><p>Kubernetes集群包含有节点代理kubelet和Master组件(APIs, scheduler, etc)，一切都基于分布式的存储系统。下面这张图是Kubernetes的架构图。</p>\n<img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/architecture.png\" class title=\"architecture.png\">\n\n<hr>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>在这张系统架构图中，我们把服务分为运行在工作节点上的服务和组成集群级别控制板的服务。</p>\n<p>Kubernetes节点有运行应用容器必备的服务，而这些都是受Master的控制。</p>\n<p>每次个节点上当然都要运行Docker。Docker来负责所有具体的映像下载和容器运行。</p>\n<p>Kubernetes主要由以下几个核心组件组成：</p>\n<ul>\n<li><p>etcd保存了整个集群的状态；</p>\n</li>\n<li><p>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</p>\n</li>\n<li><p>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</p>\n</li>\n<li><p>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</p>\n</li>\n<li><p>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</p>\n</li>\n<li><p>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；</p>\n</li>\n<li><p>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/k8s-architecture.png\" class title=\"k8s-architecture\">\n\n<hr>\n<img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/1619075196642.png\" class title=\"1619075196642.png\">\n\n<h2 id=\"原理分解\"><a href=\"#原理分解\" class=\"headerlink\" title=\"原理分解\"></a>原理分解</h2><p><img src=\"/k8s%E5%9F%BA%E7%A1%80/k8s-master.png\" alt=\"k8s-master.png\"></p>\n<hr>\n<img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/k8s-node.png\" class title=\"k8s-node.png\">\n\n<hr>\n<h2 id=\"组件交互原理\"><a href=\"#组件交互原理\" class=\"headerlink\" title=\"组件交互原理\"></a>组件交互原理</h2><img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/1619076211983.png\" class width=\"1619076211983\">\n\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">想让k8s部署一个tomcat?</span><br><span class=\"line\"></span><br><span class=\"line\">0、开机默认所有节点的kubelet、master节点的scheduler（调度器）、controller-manager（控制管理器）一直监听master的api-server发来的事件变化（for ::）</span><br><span class=\"line\"></span><br><span class=\"line\">1、程序员使用命令行工具： kubectl ； kubectl create deploy tomcat --image=tomcat8（告诉master让集群使用tomcat8镜像，部署一个tomcat应用）</span><br><span class=\"line\"></span><br><span class=\"line\">2、kubectl命令行内容发给api-server，api-server保存此次创建信息到etcd</span><br><span class=\"line\"></span><br><span class=\"line\">3、etcd给api-server上报事件，说刚才有人给我里面保存一个信息。（部署Tomcat[deploy]）</span><br><span class=\"line\"></span><br><span class=\"line\">4、controller-manager监听到api-server的事件，是 （部署Tomcat[deploy]）</span><br><span class=\"line\"></span><br><span class=\"line\">5、controller-manager 处理这个 （部署Tomcat[deploy]）的事件。controller-manager会生成Pod的部署信息【pod信息】</span><br><span class=\"line\"></span><br><span class=\"line\">6、controller-manager 把Pod的信息交给api-server，再保存到etcd</span><br><span class=\"line\"></span><br><span class=\"line\">7、etcd上报事件【pod信息】给api-server。</span><br><span class=\"line\"></span><br><span class=\"line\">8、scheduler专门监听 【pod信息】 ，拿到 【pod信息】的内容，计算，看哪个节点合适部署这个Pod【pod调度过后的信息（node: node-02）】，</span><br><span class=\"line\"></span><br><span class=\"line\">9、scheduler把 【pod调度过后的信息（node: node-02）】交给api-server保存给etcd</span><br><span class=\"line\"></span><br><span class=\"line\">10、etcd上报事件【pod调度过后的信息（node: node-02）】，给api-server</span><br><span class=\"line\"></span><br><span class=\"line\">11、其他节点的kubelet专门监听 【pod调度过后的信息（node: node-02）】 事件，集群所有节点kubelet从api-server就拿到了 【pod调度过后的信息（node: node-02）】 事件</span><br><span class=\"line\"></span><br><span class=\"line\">12、每个节点的kubelet判断是否属于自己的事情；node-02的kubelet发现是他的事情</span><br><span class=\"line\"></span><br><span class=\"line\">13、node-02的kubelet启动这个pod。汇报给master当前启动好的所有信息</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"分层架构\"><a href=\"#分层架构\" class=\"headerlink\" title=\"分层架构\"></a>分层架构</h2><p>Kubernetes设计理念和功能其实就是一个类似Linux的分层架构，如下图所示</p>\n<img src=\"/2022/08/17/k8s/K8S%E5%9F%BA%E7%A1%80/14937095836427.jpg\" class title=\"14937095836427.jpg\">\n\n<ul>\n<li>核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境</li>\n<li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）</li>\n<li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）</li>\n<li>接口层：kubectl命令行工具、客户端SDK以及集群联邦</li>\n<li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴<ul>\n<li>Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等</li>\n<li>Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li>\n</ul>\n</li>\n</ul>\n","categories":["K8S"],"tags":["K8S"]}]