[{"title":"Dubbo","url":"/2022/08/11/Dubbo/","content":"","categories":["Dubbo"],"tags":["Dubbo"]},{"title":"Git Action","url":"/2022/08/11/Git-Action/","content":"<h1 id=\"Actions-secrets\"><a href=\"#Actions-secrets\" class=\"headerlink\" title=\"Actions secrets\"></a>Actions secrets</h1><p>在<strong>Actions secrets</strong>中添加的变量，可以直接在Git Action中使用个来直接获取到<code>$&#123;&#123;&#125;&#125;</code>，并且打印到CI流程中是***。</p>\n<p>在添加Actions secrets，也无法查看到Actions secrets的value。也保证了私密信息的安全性。</p>\n<h1 id=\"Git-Action\"><a href=\"#Git-Action\" class=\"headerlink\" title=\"Git Action\"></a>Git Action</h1><p>在项目的根目录下创建一个文件夹，文件夹中创建一个yml文件，目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.github</span><br><span class=\"line\">---workflows</span><br><span class=\"line\">------main.yml</span><br></pre></td></tr></table></figure>\n\n<p>在创建的main.yml中编写项目的CI</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a basic workflow to help you get started with Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Controls when the workflow will run</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">JDK</span> <span class=\"number\">1.8</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-java@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">java-version:</span> <span class=\"number\">1.8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">with</span> <span class=\"string\">Maven</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">mvn</span> <span class=\"string\">-B</span> <span class=\"string\">package</span> <span class=\"string\">--file</span> <span class=\"string\">pom.xml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BuildDockerImage</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">docker</span> <span class=\"string\">build</span> <span class=\"string\">.</span> <span class=\"string\">--file</span> <span class=\"string\">Dockerfile</span> <span class=\"string\">--tag</span> <span class=\"string\">my-image-name:$(date</span> <span class=\"string\">+%s)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Login</span> <span class=\"string\">to</span> <span class=\"string\">DockerHub</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/login-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKER_USERNAME</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 这个Actions secrets中添加的秘钥</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKER_PASSWORD</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 这个Actions secrets中添加的秘钥</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">to</span> <span class=\"string\">Docker</span> <span class=\"string\">Repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/build-push-action@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">          <span class=\"attr\">push:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">tags:</span> <span class=\"string\">fanq1213/app:latest</span></span><br></pre></td></tr></table></figure>\n\n<p>当有新的代码提交后，会自动触发Git Action实现CI流程。</p>\n<p>代码示例：</p>\n<p><a href=\"https://github.com/fanq1213/java-devops-demo\">java-devops-demo</a></p>\n","categories":["CICD"],"tags":["CICD"]},{"title":"Jenkins的使用","url":"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"插件的安装\"><a href=\"#插件的安装\" class=\"headerlink\" title=\"插件的安装\"></a>插件的安装</h1><blockquote>\n<p>在Manage Jenkins下的Manage Plugins中安装一下插件</p>\n</blockquote>\n<ul>\n<li><p><strong>Docker Pipeline &amp;&amp; Docker</strong></p>\n<ul>\n<li><p>安装Docker Pipeline会自动安装docker相关的</p>\n</li>\n<li><p>这个允许我们自定义agent使用docker环境</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Git Parameter</strong></p>\n<ul>\n<li>解析git参数，允许我们选择分支进行构建</li>\n</ul>\n</li>\n<li><p><strong>Active Choices</strong></p>\n<ul>\n<li>可以做到参数的级联选择</li>\n</ul>\n</li>\n<li><p><strong>Generic Webhook Trigger</strong></p>\n<ul>\n<li>通用的webhook触发器，构建更强大的webhook功能</li>\n</ul>\n</li>\n<li><p><strong>Role-based Authorization Strategy</strong> </p>\n<ul>\n<li>RBAC权限指定，给一个用户精确指定权限</li>\n</ul>\n</li>\n<li><p><strong>List Git Branches Parameter</strong></p>\n<ul>\n<li>列出分支参数</li>\n</ul>\n</li>\n<li><p><strong>Build With Parameters</strong></p>\n<ul>\n<li>基于自定义参数构建</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"流水线的创建\"><a href=\"#流水线的创建\" class=\"headerlink\" title=\"流水线的创建\"></a>流水线的创建</h1><blockquote>\n<p>在Dashboard下的新建Item，创建一个流水线，然后确定。</p>\n</blockquote>\n<img src=\"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209211809255.png\" class title=\"image-20211209211809255\">\n\n<blockquote>\n<p>然后再java-devops-demo中选择配置，添加触发远程构建，在流水线定义中，选择Pipeline script from SCM。</p>\n<span id=\"more\"></span>\n\n<p>下图中的身份验证令牌在jenkins可以随意填写，等到在git或者gitee仓库添加WebHooks的时候，保持一直即可。</p>\n<p>Repository URL就是你自己的代码仓库的URL。由于我目前的仓库是公开的，所以不需要添加Credentials。</p>\n</blockquote>\n<img src=\"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209212141935.png\" class title=\"image-20211209212141935\">\n\n<img src=\"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209212213159.png\" class title=\"image-20211209212213159\">\n\n<h1 id=\"创建Jenkins用户\"><a href=\"#创建Jenkins用户\" class=\"headerlink\" title=\"创建Jenkins用户\"></a>创建Jenkins用户</h1><blockquote>\n<p>在Manage Jenkins下的Manage Users创建一个新的用户，创建完成后使用新的用户登录Jenkins，然后使用当前登录用户创建一个token，是用来下面在git或者gitee添加WebHooks时使用。</p>\n<p>将创建好的用户名和token安装下面格式保存起来，下面添加WebHooks会用到。</p>\n<p>UserName:Token</p>\n</blockquote>\n<h1 id=\"添加WebHooks\"><a href=\"#添加WebHooks\" class=\"headerlink\" title=\"添加WebHooks\"></a>添加WebHooks</h1><blockquote>\n<p>为了测试方便，我目前使用的gitee下的仓库，如果使用的git，同理也可以同样添加。</p>\n<p>首先去到仓库的管理面板，选择WebHooks，选择添加。在URL处添加格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://UserName:Token@JenkinsURL:Port/job/流水线名字/build?token=流水线中添加的身份令牌的名字</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://fanq:1aqafb08456f2a35698wffad68fb4a7436@127.0.0.1:8080/job/java-devops-demo/build?token=fanq</span><br></pre></td></tr></table></figure>\n\n<p>默认选择的push事件，即当提交代码推送到仓库时，就会触发Jenkins的流水线工作。</p>\n</blockquote>\n<img src=\"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209213948231.png\" class title=\"image-20211209213948231\">\n\n<blockquote>\n<p>添加完成后，点击测试，显示成功。</p>\n</blockquote>\n<img src=\"/2022/08/11/Jenkins%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211209214134952.png\" class title=\"image-20211209214134952\">\n\n<p>以上就完成Jenkins了的自动触发流水线工作。</p>\n","categories":["CICD"],"tags":["CICD"]},{"title":"Zookeeper","url":"/2022/08/11/Zookeeper/","content":"<h1 id=\"什么是Zookeeper\"><a href=\"#什么是Zookeeper\" class=\"headerlink\" title=\"什么是Zookeeper\"></a>什么是Zookeeper</h1><p>官方文档上解释说，zookeeper它是一个分布式协调框架，主要是用来解决分布式应用中经常遇到得一些数据管理问题。例如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。。。</p>\n<h1 id=\"Zookeeper核心概念\"><a href=\"#Zookeeper核心概念\" class=\"headerlink\" title=\"Zookeeper核心概念\"></a>Zookeeper核心概念</h1><p>Zookeeper是一个用于存储少量数据的基于内存的数据库，主要有两个核心概念：文件系统数据结构和监听通知机制。</p>\n<h2 id=\"文件系统数据结构\"><a href=\"#文件系统数据结构\" class=\"headerlink\" title=\"文件系统数据结构\"></a>文件系统数据结构</h2><p>Zookeeper维护一个类似文件系统的数据结构，如下图</p>\n<img src=\"/2022/08/11/Zookeeper/image-20210508182538218.png\" class title=\"image-20210508182538218\">\n\n<p>每个子目录都被称为**znode(目录节点)**，和文件系统类似，我们可以自由增加、删除znode，在znode下增加、删除znode。</p>\n<h3 id=\"Zookeeper有六种类型的znode-新版本又增加了两个\"><a href=\"#Zookeeper有六种类型的znode-新版本又增加了两个\" class=\"headerlink\" title=\"Zookeeper有六种类型的znode(新版本又增加了两个)\"></a>Zookeeper有六种类型的znode(新版本又增加了两个)</h3><ul>\n<li><h4 id=\"PERSISTENT-持久化目录节点\"><a href=\"#PERSISTENT-持久化目录节点\" class=\"headerlink\" title=\"PERSISTENT-持久化目录节点\"></a>PERSISTENT-持久化目录节点</h4></li>\n</ul>\n<p>客户端与Zookeeper断开连接后，该节点依然存在，只要不手动删除改节点，它将一直存在。</p>\n<ul>\n<li><h4 id=\"PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点\"><a href=\"#PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点\" class=\"headerlink\" title=\"PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点\"></a>PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点</h4></li>\n</ul>\n<p>客户端与Zookeeper断开连接后，该节点依然存在，只是Zookeeper给该节点名称进行顺序编号</p>\n<ul>\n<li><h4 id=\"EPHEMERAL-临时目录节点\"><a href=\"#EPHEMERAL-临时目录节点\" class=\"headerlink\" title=\"EPHEMERAL-临时目录节点\"></a>EPHEMERAL-临时目录节点</h4></li>\n</ul>\n<p>客户端与zookeeper断开连接后，该节点被删除</p>\n<ul>\n<li><h4 id=\"EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点\"><a href=\"#EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点\" class=\"headerlink\" title=\"EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点\"></a>EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点</h4></li>\n</ul>\n<p>客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p>\n<ul>\n<li><h4 id=\"Container-节点\"><a href=\"#Container-节点\" class=\"headerlink\" title=\"Container 节点\"></a>Container 节点</h4></li>\n</ul>\n<p>3.5.3 版本新增，如果Container节点下面没有子节点，则Container节点在未来会被Zookeeper自动清除,定时任务默认60s 检查一次</p>\n<ul>\n<li><h4 id=\"TTL-节点\"><a href=\"#TTL-节点\" class=\"headerlink\" title=\"TTL 节点\"></a>TTL 节点</h4></li>\n</ul>\n<p> 默认禁用，只能通过系统配置 <em>zookeeper.extendedTypesEnabled&#x3D;true</em> 开启，不稳定</p>\n<img src=\"/2022/08/11/Zookeeper/image-20210508183449347.png\" class title=\"image-20210508183449347\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"监听通知机制\"><a href=\"#监听通知机制\" class=\"headerlink\" title=\"监听通知机制\"></a>监听通知机制</h2><p>未完待续。。。</p>\n","categories":["Zookeeper"],"tags":["Zookeeper"]},{"title":"Jasypt加密工具","url":"/2022/08/11/Jasypt%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7/","content":"<h1 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.ulisesbocchio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加application-yaml配置\"><a href=\"#添加application-yaml配置\" class=\"headerlink\" title=\"添加application.yaml配置\"></a>添加application.yaml配置</h1><ul>\n<li>采用对称加密的yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">  <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">fanq1213@163.com</span> <span class=\"comment\"># 加密和解密使用的盐</span></span><br><span class=\"line\">    <span class=\"attr\">algorithm:</span> <span class=\"string\">PBEWithMD5AndDES</span> <span class=\"comment\"># jasypt的默认对称加密算法</span></span><br><span class=\"line\">    <span class=\"attr\">property:</span></span><br><span class=\"line\">      <span class=\"attr\">prefix:</span> <span class=\"string\">ENC(</span> <span class=\"comment\"># 加密后的信息的前缀</span></span><br><span class=\"line\">      <span class=\"attr\">suffix:</span> <span class=\"string\">)</span> <span class=\"comment\"># 加密后的信息的后缀 </span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"comment\"># 此处可以是各种敏感信息(数据库密码，Redis密码)，此处简化处理</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span> <span class=\"string\">ENC(Pjp...)</span> <span class=\"comment\"># 被加密的密文，增加前后缀是为了让jasypt可以定位到密文</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>采用非对称加密的yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jasypt:</span></span><br><span class=\"line\">  <span class=\"attr\">encryptor:</span></span><br><span class=\"line\">    <span class=\"attr\">privateKeyFormat:</span> <span class=\"string\">PEM</span> <span class=\"comment\"># 非对称加密的秘钥类型: DER和PEM 此处要和你自己实现的非对称加密的工具相对应</span></span><br><span class=\"line\">    <span class=\"attr\">privateKeyString:</span> &#123;<span class=\"string\">RSAPrivateKey</span>&#125; <span class=\"comment\"># 非对称加密的私钥，用来解密密文</span></span><br><span class=\"line\">    <span class=\"attr\">property:</span></span><br><span class=\"line\">      <span class=\"attr\">prefix:</span> <span class=\"string\">ENC(</span> <span class=\"comment\"># 加密后的信息的前缀</span></span><br><span class=\"line\">      <span class=\"attr\">suffix:</span> <span class=\"string\">)</span> <span class=\"comment\"># 加密后的信息的后缀 </span></span><br><span class=\"line\"><span class=\"attr\">secret:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span> <span class=\"string\">ENC(Pjp...)</span> <span class=\"comment\"># 被加密的密文，增加前后缀是为了让jasypt可以定位到密文</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>非对称加密需要自己实现非对称加密的算法(网上找的工具类)</p>\n<span id=\"more\"></span>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.devops.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.encryptor.SimpleAsymmetricConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.encryptor.SimpleAsymmetricStringEncryptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ulisesbocchio.jasyptspringboot.util.AsymmetricCryptography;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Key;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPairGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RSA公钥/私钥 工具类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 注:此工具类摘录自某个网友，具体的我忘记了，这是之前去网上找的，当时忘记把链接记下来了，深感抱歉。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> JustryDeng</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/12 13:19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KeypairUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_ALGORITHM</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSA&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PUBLIC_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSAPublicKey&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PRIVATE_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSAPrivateKey&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取公钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyMap 公钥/私钥信息map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getPublicKey</span><span class=\"params\">(Map&lt;String, Object&gt; keyMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Key</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (Key) keyMap.get(PUBLIC_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encryptBase64(key.getEncoded());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取私钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyMap 公钥/私钥信息map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getPrivateKey</span><span class=\"params\">(Map&lt;String, Object&gt; keyMap)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Key</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (Key) keyMap.get(PRIVATE_KEY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encryptBase64(key.getEncoded());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将byte[]型的密钥转换为String类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 公钥/私钥字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥/私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">encryptBase64</span><span class=\"params\">(<span class=\"type\">byte</span>[] key)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.getEncoder().encodeToString(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将String类型的密钥转换为byte[]</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 公钥/私钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 公钥/私钥字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">byte</span>[] decryptBase64(String key) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.getDecoder().decode(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RSA是目前最有影响力的公钥加密算法，该算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，</span></span><br><span class=\"line\"><span class=\"comment\">     * 但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥，即公钥，而两个大素数</span></span><br><span class=\"line\"><span class=\"comment\">     * 组合成私钥。公钥是可发布的供任何人使用，私钥则为自己所有，供解密之用。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密者拥有私钥，并且将由私钥计算生成的公钥发布给加密者。加密都使用公钥进行加密，并将密文发送到</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密者，解密者用私钥解密将密文解码为明文。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 以甲要把信息发给乙为例，首先确定角色：甲为加密者，乙为解密者。首先由乙随机确定一个KEY，称之为</span></span><br><span class=\"line\"><span class=\"comment\">     * 密匙，将这个KEY始终保存在机器B中而不发出来；然后，由这个 KEY计算出另一个KEY，称之为公匙。这</span></span><br><span class=\"line\"><span class=\"comment\">     * 个公钥的特性是几乎不可能通过它自身计算出生成它的私钥。接下来通过网络把这个公钥传给甲，甲收到公</span></span><br><span class=\"line\"><span class=\"comment\">     * 钥后，利用公钥对信息加密，并把密文通过网络发送到乙，最后乙利用已知的私钥，就对密文进行解码了。</span></span><br><span class=\"line\"><span class=\"comment\">     * 以上就是RSA算法的工作流程。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 算法实现过程为：</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 随意选择两个大的质数p和q，p不等于q，计算N=pq。</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. 根据欧拉函数，不大于N且与N互质的整数個数為(p-1)(q-1)。</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. 选择一个整数e与(p-1)(q-1)互质，并且e小于(p-1)(q-1)。</span></span><br><span class=\"line\"><span class=\"comment\">     * 4. 用以下这个公式计算d：d× e ≡ 1 (mod (p-1)(q-1))。</span></span><br><span class=\"line\"><span class=\"comment\">     * 5. 将p和q的记录销毁。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 以上内容中，(N,e)是公钥，(N,d)是私钥。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RSA算法的应用。</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. RSA的公钥和私钥是由KeyPairGenerator生成的，获取KeyPairGenerator的实例后还需要设置其密钥位数。</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置密钥位数越高，加密过程越安全，一般使用1024位。     *</span></span><br><span class=\"line\"><span class=\"comment\">     * KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">     * keyPairGen.initialize(1024);</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.公钥和私钥可以通过KeyPairGenerator执行generateKeyPair()后生成密钥对KeyPair，</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过KeyPair.getPublic()和KeyPair.getPrivate()来获取。</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态生成密钥对，这是当前最耗时的操作，一般要2s以上。</span></span><br><span class=\"line\"><span class=\"comment\">     * KeyPair keyPair = keyPairGen.generateKeyPair();</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥</span></span><br><span class=\"line\"><span class=\"comment\">     * PublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span></span><br><span class=\"line\"><span class=\"comment\">     * 私钥</span></span><br><span class=\"line\"><span class=\"comment\">     * PrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * byte[] publicKeyData = publicKey.getEncoded();</span></span><br><span class=\"line\"><span class=\"comment\">     * byte[] privateKeyData = publicKey.getEncoded();</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥和私钥都有它们自己独特的比特编码，可以通过getEncoded()方法获取，返回类型为byte[]。</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过byte[]可以再度将公钥或私钥还原出来。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, Object&gt; <span class=\"title function_\">initKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取密钥对生成器</span></span><br><span class=\"line\">        <span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">keyPairGen</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(KEY_ALGORITHM);</span><br><span class=\"line\">        <span class=\"comment\">// 设置密钥位数</span></span><br><span class=\"line\">        keyPairGen.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成密钥对</span></span><br><span class=\"line\">        <span class=\"type\">KeyPair</span> <span class=\"variable\">keyPair</span> <span class=\"operator\">=</span> keyPairGen.generateKeyPair();</span><br><span class=\"line\">        <span class=\"comment\">// 公钥</span></span><br><span class=\"line\">        <span class=\"type\">RSAPublicKey</span> <span class=\"variable\">publicKey</span> <span class=\"operator\">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">        <span class=\"comment\">// 私钥</span></span><br><span class=\"line\">        <span class=\"type\">RSAPrivateKey</span> <span class=\"variable\">privateKey</span> <span class=\"operator\">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\">        Map&lt;String, Object&gt; keyMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class=\"line\">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getKey</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = initKey();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;公钥---&gt;&gt;&gt;&quot;</span> + getPublicKey(map));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;私钥---&gt;&gt;&gt;&quot;</span> + getPrivateKey(map));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        getKey();</span><br><span class=\"line\">        <span class=\"type\">SimpleAsymmetricConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAsymmetricConfig</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置密钥类型</span></span><br><span class=\"line\">        config.setKeyFormat(AsymmetricCryptography.KeyFormat.PEM);</span><br><span class=\"line\">        <span class=\"comment\">// 设置用来加密的公钥(注:生成的公钥/私钥可能会有换行，保不保留换行都一样)</span></span><br><span class=\"line\">        config.setPublicKey(<span class=\"string\">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJqB5wNM2Q5mcyIP/LHgNDQLhOZ0zAGE3Q4/fNJ0EDQe1ZJFLUx3IVveNXpv2AzPG33t9lmSOcbY4PpRlG+AJkWUDqyOg2ITc3YTbqyC0uTodBpX2f45mBdhX2yr/G3Np1hSZm9wogHZHYkFdZMEyWQtW7hINgSmDXBcx5q0JprwIDAQAB&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">StringEncryptor</span> <span class=\"variable\">encryptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAsymmetricStringEncryptor</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanq1213@163.com&quot;</span>;</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;加密前---&gt;&gt;&gt;&quot;</span> + info));</span><br><span class=\"line\">        <span class=\"comment\">// 加密</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> encryptor.encrypt(info);</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;加密后---&gt;&gt;&gt;&quot;</span> + result));</span><br><span class=\"line\">        <span class=\"comment\">// 解密</span></span><br><span class=\"line\">        config.setPrivateKey(<span class=\"string\">&quot;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAImoHnA0zZDmZzIg/8seA0NAuE5nTMAYTdDj980nQQNB7VkkUtTHchW941em/YDM8bfe32WZI5xtjg+lGUb4AmRZQOrI6DYhNzdhNurILS5Oh0GlfZ/jmYF2FfbKv8bc2nWFJmb3CiAdkdiQV1kwTJZC1buEg2BKYNcFzHmrQmmvAgMBAAECgYANQx87nDq53RjQIZHDVe7midO36gfg8fZ9S5lSMJf44l8lmXRJf7WkFplSlooR4KzhFB3dwfVGWt+27icTSU2hjAG+NOnzJZG6l115LEtxHQ6FcaTiEI74IntFmJj7A7iIJqjvOhd0NdsPByRbdnuNa9KckvQxBWxAMG1Eas+LoQJBAPKV78bn120sriuJr6F3CNp9L7+IiYkFHK30+d4UP0sBazwB6EabDvFbV0myBu8jbAqqGICoKT6WVDEpkzmyTgcCQQCRRMyETmAusbx+vF99IM2c7F7tPf+r3uMPgwWv/dntqODM80cuqa7CA96FWl61UjM+5kn/Cn3FmNGfTSd5bh0ZAkBOEYi353bB0MZAhq/585fq0KzkI+m3Kej/5r3fBX8VAWDkT+zThCU78VxXAC8RGMI1cGYwSW30kWaI58tUnxhTAkABr9PUIXjacfPnYNaXBF9+1/vOM28Zls/6KSJSxdbW/KQHnTeRYiUGWbcmw0LgRiEUNOZdEMkfF0Qv3lx7+3xZAkAfRfaNUc7wgC6S46R210Inl6ysTC0iOs7mKt7pZXfUb4IlMpF5QwokRXNL9GPaiz9OrmYw60sXBqsHrS11Deum&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originInfo</span> <span class=\"operator\">=</span> encryptor.decrypt(result);</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;解密后---&gt;&gt;&gt;&quot;</span> + originInfo));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Jenkins整合Jasypt\"><a href=\"#Jenkins整合Jasypt\" class=\"headerlink\" title=\"Jenkins整合Jasypt\"></a>Jenkins整合Jasypt</h1><p>将解密的私钥放在Jenkins的Credentials中，然后使用Jenkins的流水线中的环境变量可以取出，然后可以使用sed命令替换，或者使用docker run -e的命令从环境变量中取出来设置到SpringBoot应用中来实现私钥的管理。</p>\n<p>代码示例(Jenkins的流水线都在代码的Jenkinsfile中)：</p>\n<p><a href=\"https://gitee.com/fanq1213/java-devops-demo.git\">java-devops-demo</a></p>\n","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"git-secret","url":"/2022/08/11/git-secret/","content":"<h1 id=\"安装git-secret\"><a href=\"#安装git-secret\" class=\"headerlink\" title=\"安装git-secret\"></a>安装git-secret</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装git</span></span><br><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\"># 安装git-secret</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/sobolevn/git-secret.git git-secret</span><br><span class=\"line\"><span class=\"comment\">#初始化secret</span></span><br><span class=\"line\">git init &amp;&amp; git secret init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装GPG</span></span><br><span class=\"line\">sudo yum install gnupg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#生成gpg --gen-key</span></span><br><span class=\"line\">gpg --gen-key</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"执行log\"><a href=\"#执行log\" class=\"headerlink\" title=\"执行log\"></a>执行log</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># gpg --gen-key</span></span><br><span class=\"line\">gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Note: Use <span class=\"string\">&quot;gpg --full-generate-key&quot;</span> <span class=\"keyword\">for</span> a full featured key generation dialog.</span><br><span class=\"line\"></span><br><span class=\"line\">GnuPG needs to construct a user ID to identify your key.</span><br><span class=\"line\"></span><br><span class=\"line\">Real name: fanqiang</span><br><span class=\"line\">Email address: fanq1213@163.com</span><br><span class=\"line\">You selected this USER-ID:</span><br><span class=\"line\">    <span class=\"string\">&quot;fanqiang &lt;fanq1213@163.com&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Change (N)ame, (E)mail, or (O)kay/(Q)uit? o</span><br><span class=\"line\">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class=\"line\">some other action (<span class=\"built_in\">type</span> on the keyboard, move the mouse, utilize the</span><br><span class=\"line\">disks) during the prime generation; this gives the random number</span><br><span class=\"line\">generator a better chance to gain enough entropy.</span><br><span class=\"line\">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class=\"line\">some other action (<span class=\"built_in\">type</span> on the keyboard, move the mouse, utilize the</span><br><span class=\"line\">disks) during the prime generation; this gives the random number</span><br><span class=\"line\">generator a better chance to gain enough entropy.</span><br><span class=\"line\">gpg: key 127A170867B0BB5D marked as ultimately trusted</span><br><span class=\"line\">gpg: revocation certificate stored as <span class=\"string\">&#x27;/root/.gnupg/openpgp-revocs.d/396021C7A0773749CD2C3BEF127A170867B0BB5D.rev&#x27;</span></span><br><span class=\"line\">public and secret key created and signed.</span><br><span class=\"line\"></span><br><span class=\"line\">pub   rsa2048 2021-11-30 [SC] [expires: 2023-11-30]</span><br><span class=\"line\">      396021C7A0773749CD2C3BEF127A170867B0BB5D</span><br><span class=\"line\">uid                      fanqiang &lt;fanq1213@163.com&gt;</span><br><span class=\"line\">sub   rsa2048 2021-11-30 [E] [expires: 2023-11-30]</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git init &amp;&amp; git secret init</span></span><br><span class=\"line\">Reinitialized existing Git repository <span class=\"keyword\">in</span> /java-devops-demo/sec/.git/</span><br><span class=\"line\">git-secret: abort: already initialized.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret tell fanq1213@163.com</span></span><br><span class=\"line\">gpg: checking the trustdb</span><br><span class=\"line\">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class=\"line\">gpg: depth: 0  valid:   3  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 3u</span><br><span class=\"line\">gpg: next trustdb check due at 2023-11-30</span><br><span class=\"line\">gpg: keybox <span class=\"string\">&#x27;/java-devops-demo/sec/.gitsecret/keys/pubring.kbx&#x27;</span> created</span><br><span class=\"line\">gpg: /java-devops-demo/sec/.gitsecret/keys/trustdb.gpg: trustdb created</span><br><span class=\"line\">git-secret: <span class=\"keyword\">done</span>. fanq1213@163.com added as user(s) <span class=\"built_in\">who</span> know the secret.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret add secret</span></span><br><span class=\"line\">git-secret: these files are not <span class=\"keyword\">in</span> .gitignore: secret</span><br><span class=\"line\">git-secret: auto adding them to .gitignore</span><br><span class=\"line\">git-secret: 1 item(s) added.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># git secret hide</span></span><br><span class=\"line\">git-secret: <span class=\"keyword\">done</span>. 1 of 1 files are hidden.</span><br><span class=\"line\">[root@k8s-01 sec]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["CICD"],"tags":["CICD"]},{"title":"安装Jenkins","url":"/2022/08/11/%E5%AE%89%E8%A3%85Jenkins/","content":"<h1 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h1><p>官方文档地址：<strong><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">https://www.jenkins.io/zh/doc/book/installing/</a></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一步安装docker环境，然后执行docker run命令</span></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-u root \\</span><br><span class=\"line\">-d \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-p 50000:50000 \\</span><br><span class=\"line\">-v jenkins-data:/var/jenkins_home \\</span><br><span class=\"line\">-v /etc/localtime:/etc/localtime:ro \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">jenkinsci/blueocean </span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，通过ip地址访问，端口默认是docker run命令执行的8080端口，打开界面如下：</p>\n<img src=\"/2022/08/11/%E5%AE%89%E8%A3%85Jenkins/image-20211201233748173.png\" class title=\"image-20211201233748173\">\n\n<h2 id=\"获取管理员密码\"><a href=\"#获取管理员密码\" class=\"headerlink\" title=\"获取管理员密码\"></a>获取管理员密码</h2><h3 id=\"查看Jenkins启动日志\"><a href=\"#查看Jenkins启动日志\" class=\"headerlink\" title=\"查看Jenkins启动日志\"></a>查看Jenkins启动日志</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用命令</span></span><br><span class=\"line\">docker logs <span class=\"variable\">$&#123;CONTAINER ID&#125;</span></span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class=\"line\">Please use the following password to proceed to installation:</span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e</span><br><span class=\"line\"></span><br><span class=\"line\">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class=\"line\"></span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\">*************************************************************</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"进入到容器内部查看密码\"><a href=\"#进入到容器内部查看密码\" class=\"headerlink\" title=\"进入到容器内部查看密码\"></a>进入到容器内部查看密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用命令</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it <span class=\"variable\">$&#123;CONTAINER ID&#125;</span> /bin/sh</span><br><span class=\"line\">/ <span class=\"comment\"># cat /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看docker容器volume挂载位置\"><a href=\"#查看docker容器volume挂载位置\" class=\"headerlink\" title=\"查看docker容器volume挂载位置\"></a>查看docker容器volume挂载位置</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@master var]<span class=\"comment\"># docker volume ls</span></span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\"><span class=\"built_in\">local</span>     jenkins-data</span><br><span class=\"line\">[root@master var]<span class=\"comment\"># docker volume inspect jenkins-data</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2021-12-01T23:05:24+08:00&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Driver&quot;</span>: <span class=\"string\">&quot;local&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Labels&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Mountpoint&quot;</span>: <span class=\"string\">&quot;/var/lib/docker/volumes/jenkins-data/_data&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;jenkins-data&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Options&quot;</span>: null,</span><br><span class=\"line\">        <span class=\"string\">&quot;Scope&quot;</span>: <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">[root@master secrets]<span class=\"comment\"># cat /var/lib/docker/volumes/jenkins-data/_data/secrets/initialAdminPassword</span></span><br><span class=\"line\"><span class=\"comment\">#管理员密码</span></span><br><span class=\"line\">fa54e823e6d44ebabe48eb1ef3898f6e</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化过程\"><a href=\"#初始化过程\" class=\"headerlink\" title=\"初始化过程\"></a>初始化过程</h1><p>选择安装推荐的插件，安装完成后需要<strong>创建第一个管理员用户</strong>，然后保存并完成。</p>\n<img src=\"/2022/08/11/%E5%AE%89%E8%A3%85Jenkins/image-20211201233848226.png\" class title=\"image-20211201233848226\">\n\n<h1 id=\"完成安装\"><a href=\"#完成安装\" class=\"headerlink\" title=\"完成安装\"></a>完成安装</h1><p>使用admin登录后界面如下</p>\n<img src=\"/2022/08/11/%E5%AE%89%E8%A3%85Jenkins/image-20211201234103165.png\" class title=\"image-20211201234103165\">","categories":["CICD"],"tags":["CICD"]},{"title":"搭建k8s集群","url":"/2022/08/11/%E6%90%AD%E5%BB%BAK8S%E9%9B%86%E7%BE%A4/","content":"<h1 id=\"准备机器\"><a href=\"#准备机器\" class=\"headerlink\" title=\"准备机器\"></a>准备机器</h1><p>本地安装三台虚拟机</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点</th>\n<th align=\"center\">hostname</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">内存</th>\n<th align=\"center\">硬盘</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">master</td>\n<td align=\"center\">k8s-master</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n<tr>\n<td align=\"center\">node01</td>\n<td align=\"center\">k8s-node01</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n<tr>\n<td align=\"center\">node02</td>\n<td align=\"center\">k8s-node02</td>\n<td align=\"center\">CentOS7.8</td>\n<td align=\"center\">2</td>\n<td align=\"center\">4G</td>\n<td align=\"center\">40G</td>\n</tr>\n</tbody></table>\n<h1 id=\"基础环境-都执行\"><a href=\"#基础环境-都执行\" class=\"headerlink\" title=\"基础环境(都执行)\"></a>基础环境(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\">#关闭防火墙： 如果是云服务器，需要设置安全组策略放行端口</span></span><br><span class=\"line\"><span class=\"comment\"># https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 hostname 分别执行</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-master</span><br><span class=\"line\">hostnamectl set-hostname k8s-node01</span><br><span class=\"line\">hostnamectl set-hostname k8s-node02</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 hostname 解析</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;127.0.0.1   <span class=\"subst\">$(hostname)</span>&quot;</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.106 k8s-master</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.107 k8s-node01</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">192.168.56.108 k8s-node02</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看修改结果</span></span><br><span class=\"line\">hostnamectl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 selinux： </span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 swap：</span></span><br><span class=\"line\">swapoff -a  </span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许 iptables 检查桥接流量</span></span><br><span class=\"line\"><span class=\"comment\">#https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#%E5%85%81%E8%AE%B8-iptables-%E6%A3%80%E6%9F%A5%E6%A1%A5%E6%8E%A5%E6%B5%81%E9%87%8F</span></span><br><span class=\"line\"><span class=\"comment\">## 开启br_netfilter</span></span><br><span class=\"line\">sudo modprobe br_netfilter</span><br><span class=\"line\"><span class=\"comment\">## 确认下</span></span><br><span class=\"line\">lsmod | grep br_netfilter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改配置</span></span><br><span class=\"line\"><span class=\"comment\">#将桥接的 IPv4 流量传递到 iptables 的链：</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 /etc/sysctl.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 如果有配置，则修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;</span>  /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可能没有，追加</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.default.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;net.ipv6.conf.all.forwarding = 1&quot;</span>  &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\"><span class=\"comment\"># 执行命令以应用</span></span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"docker环境安装-都执行\"><a href=\"#docker环境安装-都执行\" class=\"headerlink\" title=\"docker环境安装(都执行)\"></a>docker环境安装(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker*</span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"><span class=\"comment\">#配置docker yum 源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装docker   docker-cli  19.03.9</span></span><br><span class=\"line\">yum install -y docker-ce  docker-ce-cli-19.03.9 containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动服务</span></span><br><span class=\"line\">systemctl start docker&amp;&amp;systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置cgroupdriver</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF&gt; /etc/docker/daemon.json </span></span><br><span class=\"line\"><span class=\"string\"> &#123;</span></span><br><span class=\"line\"><span class=\"string\">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"comment\">#重启服务</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置加速 (此处使用的是阿里云的镜像加速)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://cqewcysu.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装k8s核心-都执行\"><a href=\"#安装k8s核心-都执行\" class=\"headerlink\" title=\"安装k8s核心(都执行)\"></a>安装k8s核心(都执行)</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置K8S的yum源</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载旧版本</span></span><br><span class=\"line\">yum remove -y kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可以安装的版本</span></span><br><span class=\"line\">yum list kubelet --showduplicates | <span class=\"built_in\">sort</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装kubelet、kubeadm、kubectl 指定版本</span></span><br><span class=\"line\">yum install -y kubelet-1.21.0 kubeadm-1.21.0 kubectl-1.21.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机启动kubelet</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化master节点\"><a href=\"#初始化master节点\" class=\"headerlink\" title=\"初始化master节点\"></a>初始化master节点</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############下载核心镜像 kubeadm config images list：查看需要哪些镜像###########</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####封装成images.sh文件</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">images=(</span><br><span class=\"line\">  kube-apiserver:v1.21.0</span><br><span class=\"line\">  kube-proxy:v1.21.0</span><br><span class=\"line\">  kube-controller-manager:v1.21.0</span><br><span class=\"line\">  kube-scheduler:v1.21.0</span><br><span class=\"line\">  coredns:v1.8.0</span><br><span class=\"line\">  etcd:3.4.13-0</span><br><span class=\"line\">  pause:3.4.1</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">    docker pull registry.cn-beijing.aliyuncs.com/k8s_fanq/<span class=\"variable\">$imageName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#####封装结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x images.sh &amp;&amp; ./images.sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##注意1.21.0版本的k8s coredns镜像比较特殊，结合阿里云需要特殊处理，重新打标签</span></span><br><span class=\"line\">docker tag registry.cn-beijing.aliyuncs.com/k8s_fanq/coredns:v1.8.0 registry.cn-beijing.aliyuncs.com/k8s_fanq/coredns/coredns:v1.8.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">########kubeadm init 一个master########################</span></span><br><span class=\"line\"><span class=\"comment\">########kubeadm join 其他worker########################</span></span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.56.106 \\</span><br><span class=\"line\">--image-repository registry.cn-beijing.aliyuncs.com/k8s_fanq \\</span><br><span class=\"line\">--kubernetes-version v1.21.0 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=192.167.0.0/16</span><br><span class=\"line\"><span class=\"comment\">## 注意：pod-cidr与service-cidr</span></span><br><span class=\"line\"><span class=\"comment\"># apiserver-advertise-address是master的ip地址</span></span><br><span class=\"line\"><span class=\"comment\"># cidr 无类别域间路由（Classless Inter-Domain Routing、CIDR）</span></span><br><span class=\"line\"><span class=\"comment\"># 指定一个网络可达范围  pod的子网范围+service负载均衡网络的子网范围+本机ip的子网范围不能有重复域</span></span><br><span class=\"line\"><span class=\"comment\">######################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 按照启动日志继续执行</span></span><br><span class=\"line\"><span class=\"comment\">## 复制相关文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 导出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 部署一个pod网络</span></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\">  <span class=\"comment\">##############如下：安装calico#####################</span></span><br><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 命令检查</span></span><br><span class=\"line\">kubectl get pod -A  <span class=\"comment\">##获取集群中所有部署好的应用Pod</span></span><br><span class=\"line\">kubectl get nodes  <span class=\"comment\">##查看集群所有机器的状态</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>master初始化日志</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubeadm init \\</span></span><br><span class=\"line\">&gt; --apiserver-advertise-address=192.168.56.106 \\</span><br><span class=\"line\">&gt; --image-repository registry.cn-beijing.aliyuncs.com/k8s_fanq \\</span><br><span class=\"line\">&gt; --kubernetes-version v1.21.0 \\</span><br><span class=\"line\">&gt; --service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">&gt; --pod-network-cidr=192.167.0.0/16</span><br><span class=\"line\">[init] Using Kubernetes version: v1.21.0</span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Pulling images required <span class=\"keyword\">for</span> setting up a Kubernetes cluster</span><br><span class=\"line\">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class=\"line\">[preflight] You can also perform this action <span class=\"keyword\">in</span> beforehand using <span class=\"string\">&#x27;kubeadm config images pull&#x27;</span></span><br><span class=\"line\">[certs] Using certificateDir folder <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.56.106]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/server&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/server serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master localhost] and IPs [192.168.56.106 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class=\"line\">[certs] etcd/peer serving cert is signed <span class=\"keyword\">for</span> DNS names [k8s-master localhost] and IPs [192.168.56.106 127.0.0.1 ::1]</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;sa&quot;</span> key and public key</span><br><span class=\"line\">[kubeconfig] Using kubeconfig folder <span class=\"string\">&quot;/etc/kubernetes&quot;</span></span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;admin.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;kubelet.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;controller-manager.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubeconfig] Writing <span class=\"string\">&quot;scheduler.conf&quot;</span> kubeconfig file</span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[control-plane] Using manifest folder <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-apiserver&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-controller-manager&quot;</span></span><br><span class=\"line\">[control-plane] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"string\">&quot;kube-scheduler&quot;</span></span><br><span class=\"line\">[etcd] Creating static Pod manifest <span class=\"keyword\">for</span> <span class=\"built_in\">local</span> etcd <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class=\"line\">[wait-control-plane] Waiting <span class=\"keyword\">for</span> the kubelet to boot up the control plane as static Pods from directory <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class=\"line\">[kubelet-check] Initial <span class=\"built_in\">timeout</span> of 40s passed.</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 60.009052 seconds</span><br><span class=\"line\">[upload-config] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[kubelet] Creating a ConfigMap <span class=\"string\">&quot;kubelet-config-1.21&quot;</span> <span class=\"keyword\">in</span> namespace kube-system with the configuration <span class=\"keyword\">for</span> the kubelets <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class=\"line\">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class=\"line\">[bootstrap-token] Using token: pxu7xq.yiqmz54ytjsp2wb7</span><br><span class=\"line\">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class=\"keyword\">in</span> order <span class=\"keyword\">for</span> nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class=\"keyword\">for</span> all node client certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstrap-token] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[kubelet-finalize] Updating <span class=\"string\">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key</span><br><span class=\"line\">[addons] Applied essential addon: CoreDNS</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">Then you can <span class=\"built_in\">join</span> any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化worker节点\"><a href=\"#初始化worker节点\" class=\"headerlink\" title=\"初始化worker节点\"></a>初始化worker节点</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 用master生成的命令即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span><br><span class=\"line\">\t--discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">\t</span><br><span class=\"line\">https://blog.csdn.net/rookie23rook/article/details/114369501\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##过期怎么办</span></span><br><span class=\"line\">kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm token create --ttl 0 --print-join-command</span><br></pre></td></tr></table></figure>\n\n<p><code>初始化worker节点日志</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-node02 ~]<span class=\"comment\"># kubeadm join 192.168.56.106:6443 --token pxu7xq.yiqmz54ytjsp2wb7 \\</span></span><br><span class=\"line\">&gt; --discovery-token-ca-cert-hash sha256:5554e29a5c6f67b799c1031c19bea6d8fe2ea69f3353da8fe6679a6e9f66e038 </span><br><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">\t[WARNING IsDockerSystemdCheck]: detected <span class=\"string\">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class=\"string\">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class=\"built_in\">join</span> the cluster.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"验证集群\"><a href=\"#验证集群\" class=\"headerlink\" title=\"验证集群\"></a>验证集群</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取所有节点，命令都是在master节点上执行</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   3m52s   v1.21.0</span><br><span class=\"line\">k8s-node01   Ready    &lt;none&gt;                 64s     v1.21.0</span><br><span class=\"line\">k8s-node02   Ready    &lt;none&gt;                 83s     v1.21.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#给节点打标签</span></span><br><span class=\"line\"><span class=\"comment\">## k8s中万物皆对象。node:机器  Pod：应用容器</span></span><br><span class=\"line\"><span class=\"comment\">###加标签  《h1》</span></span><br><span class=\"line\">kubectl label node k8s-node01 node-role.kubernetes.io/worker=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">kubectl label node k8s-node02 node-role.kubernetes.io/worker=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">###去标签</span></span><br><span class=\"line\">kubectl label node k8s-node02 node-role.kubernetes.io/worker-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次查看所有node</span></span><br><span class=\"line\">[root@k8s-master /]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME         STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">k8s-master   Ready    control-plane,master   6m55s   v1.21.0</span><br><span class=\"line\">k8s-node01   Ready    worker                 4m7s    v1.21.0</span><br><span class=\"line\">k8s-node02   Ready    worker                 4m26s   v1.21.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"设置ipvs模式\"><a href=\"#设置ipvs模式\" class=\"headerlink\" title=\"设置ipvs模式\"></a>设置ipvs模式</h1><p>k8s整个集群为了访问通；默认是用iptables,性能下（kube-proxy在集群之间同步iptables的内容）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看所有pod</span></span><br><span class=\"line\">kubectl get pods -A</span><br><span class=\"line\"></span><br><span class=\"line\">root@k8s-master /]<span class=\"comment\"># kubectl get pods -A</span></span><br><span class=\"line\">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   calico-kube-controllers-5d995d45d6-rjgt2   1/1     Running   0          7m35s</span><br><span class=\"line\">kube-system   calico-node-kmhnv                          1/1     Running   0          5m43s</span><br><span class=\"line\">kube-system   calico-node-q2bfw                          1/1     Running   0          5m24s</span><br><span class=\"line\">kube-system   calico-node-zh47h                          1/1     Running   0          7m35s</span><br><span class=\"line\">kube-system   coredns-85df767cfb-2lpdk                   1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   coredns-85df767cfb-7nfwn                   1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   etcd-k8s-master                            1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-apiserver-k8s-master                  1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-controller-manager-k8s-master         1/1     Running   0          8m9s</span><br><span class=\"line\">kube-system   kube-proxy-fj4r2                           1/1     Running   0          7m52s</span><br><span class=\"line\">kube-system   kube-proxy-m88hq                           1/1     Running   0          5m24s</span><br><span class=\"line\">kube-system   kube-proxy-rrk75                           1/1     Running   0          5m43s</span><br><span class=\"line\">kube-system   kube-scheduler-k8s-master                  1/1     Running   0          8m8s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1、查看默认kube-proxy 使用的模式</span></span><br><span class=\"line\">kubectl logs -n kube-system kube-proxy-fj4r2</span><br><span class=\"line\"><span class=\"comment\">#2、需要修改 kube-proxy 的配置文件,修改mode 为ipvs。默认iptables，但是集群大了以后就很慢</span></span><br><span class=\"line\">kubectl edit cm kube-proxy -n kube-system</span><br><span class=\"line\">修改如下</span><br><span class=\"line\">   ipvs:</span><br><span class=\"line\">      excludeCIDRs: null</span><br><span class=\"line\">      minSyncPeriod: 0s</span><br><span class=\"line\">      scheduler: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      strictARP: <span class=\"literal\">false</span></span><br><span class=\"line\">      syncPeriod: 30s</span><br><span class=\"line\">    kind: KubeProxyConfiguration</span><br><span class=\"line\">    metricsBindAddress: 127.0.0.1:10249</span><br><span class=\"line\">    mode: <span class=\"string\">&quot;ipvs&quot;</span></span><br><span class=\"line\"> <span class=\"comment\">###修改了kube-proxy的配置，为了让重新生效，需要杀掉以前的Kube-proxy</span></span><br><span class=\"line\"> kubectl get pod -A|grep kube-proxy</span><br><span class=\"line\"> kubectl delete pod kube-proxy-fj4r2  kube-proxy-m88hq kube-proxy-rrk75 -n kube-system</span><br><span class=\"line\"><span class=\"comment\">### 修改完成后可以重启kube-proxy以生效</span></span><br></pre></td></tr></table></figure>\n\n<p>到此为止k8s集群搭建完成。</p>\n<h1 id=\"命令补全提示\"><a href=\"#命令补全提示\" class=\"headerlink\" title=\"命令补全提示\"></a>命令补全提示</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y bash-completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/share/bash-completion/bash_completion</span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","categories":["K8S"],"tags":["K8S"]},{"title":"编译JDK11","url":"/2022/08/11/%E7%BC%96%E8%AF%91JDK11/","content":"<h1 id=\"下载OpenJDK11s源文件\"><a href=\"#下载OpenJDK11s源文件\" class=\"headerlink\" title=\"下载OpenJDK11s源文件\"></a>下载OpenJDK11s源文件</h1><p>下载地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改Ubuntu源为阿里源\"><a href=\"#修改Ubuntu源为阿里源\" class=\"headerlink\" title=\"修改Ubuntu源为阿里源\"></a>修改Ubuntu源为阿里源</h1><p>先备份原文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>编辑原文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>将文件内容替换</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装编译所需文件\"><a href=\"#安装编译所需文件\" class=\"headerlink\" title=\"安装编译所需文件\"></a>安装编译所需文件</h1><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sudo apt-get install build-essential -y</td>\n<td>gcc</td>\n</tr>\n<tr>\n<td>sudo apt-get install libfreetype6-dev -y</td>\n<td>FreeType</td>\n</tr>\n<tr>\n<td>sudo apt-get install libcups2-dev -y</td>\n<td>CUPS</td>\n</tr>\n<tr>\n<td>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev -y</td>\n<td>X11</td>\n</tr>\n<tr>\n<td>sudo apt-get install libasound2-dev -y</td>\n<td>ALSA</td>\n</tr>\n<tr>\n<td>sudo apt-get install libffi-dev -y</td>\n<td>libffi</td>\n</tr>\n<tr>\n<td>sudo apt-get install autoconf -y</td>\n<td>Autoconf</td>\n</tr>\n<tr>\n<td>sudo apt-get install libfontconfig1-dev -y</td>\n<td>fontconfig</td>\n</tr>\n<tr>\n<td>sudo apt install  openjdk-11-jdk -y</td>\n<td>JDK11</td>\n</tr>\n</tbody></table>\n<h1 id=\"安装gcc-7\"><a href=\"#安装gcc-7\" class=\"headerlink\" title=\"安装gcc 7\"></a>安装gcc 7</h1><p>Ubuntu 20.04 gcc默认是9.4.0, 如果不安装gcc 7，在编译JDK时会报错</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc-7 -y</span><br><span class=\"line\">sudo apt-get install g++-7 -y</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100</span><br><span class=\"line\">sudo update-alternatives --config gcc</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 100</span><br><span class=\"line\">sudo update-alternatives --config g++</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h1><p>下载完成后的JDK原文件，进行解压，然后进入到JDK目录中，开始编译</p>\n<p>编译FastDebug版、仅含Server模式的HotSpot虚拟机，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash configure --enable-debug --with-jvm-variants=server    --with-extra-cflags=-Wno-deprecated-declarations</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，会输出调试级别，Java虚拟机的模式、特性， 使用的编译器版本等配置摘要信息，如下所示： </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">====================================================</span><br><span class=\"line\">The existing configuration has been successfully updated <span class=\"keyword\">in</span></span><br><span class=\"line\">/home/fanqian/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug</span><br><span class=\"line\">using configure arguments <span class=\"string\">&#x27;--enable-debug --with-jvm-variants=server --with-extra-cflags=-Wno-deprecated-declarations&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    fastdebug</span><br><span class=\"line\">* HS debug level: fastdebug</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* JVM features:   server: <span class=\"string\">&#x27;aot cds cmsgc compiler1 compiler2 epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services vm-structs&#x27;</span> </span><br><span class=\"line\">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class=\"line\">* Version string: 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad (11-internal)</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       openjdk version <span class=\"string\">&quot;11.0.15&quot;</span> 2022-04-19 OpenJDK Runtime Environment (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1) OpenJDK 64-Bit Server VM (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1, mixed mode, sharing)  (at /usr/lib/jvm/java-11-openjdk-amd64)</span><br><span class=\"line\">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class=\"line\">* C Compiler:     Version 7.5.0 (at /usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:   Version 7.5.0 (at /usr/bin/g++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   6</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   7950 MB</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: The result of this configuration has overridden an older</span><br><span class=\"line\">configuration. You *should* run <span class=\"string\">&#x27;make clean&#x27;</span> to make sure you get a</span><br><span class=\"line\">proper build. Failure to <span class=\"keyword\">do</span> so might result <span class=\"keyword\">in</span> strange build problems.</span><br><span class=\"line\"></span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad$ </span><br></pre></td></tr></table></figure>\n\n<p>继续执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make images</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，输出如下信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">Note: /home/fanqian/jdk11-1ddf9a99e4ad/src/demo/share/jfc/Stylepad/Stylepad.java uses unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use or override a deprecated API.</span><br><span class=\"line\">Note: Recompile with -Xlint:deprecation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: Some input files use or override a deprecated API.</span><br><span class=\"line\">Note: Recompile with -Xlint:deprecation <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Note: /home/fanqian/jdk11-1ddf9a99e4ad/src/demo/share/jfc/TableExample/TableExample4.java uses unchecked or unsafe operations.</span><br><span class=\"line\">Note: Recompile with -Xlint:unchecked <span class=\"keyword\">for</span> details.</span><br><span class=\"line\">Creating support/demos/image/jfc/CodePointIM/CodePointIM.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Font2DTest/Font2DTest.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SwingSet2/SwingSet2.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/J2Ddemo/J2Ddemo.jar</span><br><span class=\"line\">Creating images/jmods/jdk.jlink.jmod</span><br><span class=\"line\">Creating support/demos/image/jfc/Metalworks/Metalworks.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Notepad/Notepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Stylepad/Stylepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SampleTree/SampleTree.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TableExample/TableExample.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar</span><br><span class=\"line\">Creating images/jmods/java.base.jmod</span><br><span class=\"line\">Creating jdk image</span><br><span class=\"line\">Stopping sjavac server</span><br><span class=\"line\">Finished building target <span class=\"string\">&#x27;images&#x27;</span> <span class=\"keyword\">in</span> configuration <span class=\"string\">&#x27;linux-x86_64-normal-server-fastdebug&#x27;</span></span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad$ </span><br></pre></td></tr></table></figure>\n\n<p>进入编译后的jdk目录中执行java -version，输出如下信息，编译完成</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug/jdk/bin$ ./java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">&quot;11-internal&quot;</span> 2018-09-25</span><br><span class=\"line\">OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.fanqian.jdk11-1ddf9a99e4ad, mixed mode)</span><br><span class=\"line\">fanqian@fanqian-VirtualBox:~/jdk11-1ddf9a99e4ad/build/linux-x86_64-normal-server-fastdebug/jdk/bin$ </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["JDK"]},{"title":"Hexo搭建博客","url":"/2022/08/11/Hexo/Hexo%E4%BD%BF%E7%94%A8Next%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"初始化博客目录\"><a href=\"#初始化博客目录\" class=\"headerlink\" title=\"初始化博客目录\"></a>初始化博客目录</h2><p><code>例如：D:\\hexoblog\\docblog</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ hexo init</span><br><span class=\"line\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class=\"line\">INFO  Install dependencies</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">INFO  Start blogging with Hexo</span><br></pre></td></tr></table></figure>\n\n<p><code>目录信息</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml <span class=\"comment\">#Hexo的配置文件</span></span><br><span class=\"line\">├── db.json <span class=\"comment\">#Hexo自动生成的文件</span></span><br><span class=\"line\">├── package.json <span class=\"comment\">#插件配置文件，下同</span></span><br><span class=\"line\">├── package-lock.json </span><br><span class=\"line\">├── node_modules <span class=\"comment\">#生成网站需要用到的Node.js模块</span></span><br><span class=\"line\">├── scaffolds <span class=\"comment\">#存放模板的文件夹</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span> <span class=\"comment\">#博客Markdown源文件夹</span></span><br><span class=\"line\">├── public <span class=\"comment\">#存放生成的静态HTML文件</span></span><br><span class=\"line\">└── themes <span class=\"comment\">#主题文件夹</span></span><br></pre></td></tr></table></figure>\n\n<p><code>环境的各个信息</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ hexo -v</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 6.2.0</span><br><span class=\"line\">hexo-cli: 4.3.0</span><br><span class=\"line\">os: win32 10.0.22000 </span><br><span class=\"line\">node: 16.15.1</span><br><span class=\"line\">v8: 9.4.146.24-node.21</span><br><span class=\"line\">uv: 1.43.0</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.9</span><br><span class=\"line\">ares: 1.18.1</span><br><span class=\"line\">modules: 93</span><br><span class=\"line\">nghttp2: 1.47.0</span><br><span class=\"line\">napi: 8</span><br><span class=\"line\">llhttp: 6.0.4</span><br><span class=\"line\">openssl: 1.1.1o+quic</span><br><span class=\"line\">cldr: 40.0</span><br><span class=\"line\">icu: 70.1</span><br><span class=\"line\">tz: 2021a3</span><br><span class=\"line\">unicode: 14.0</span><br><span class=\"line\">ngtcp2: 0.1.0-DEV</span><br><span class=\"line\">nghttp3: 0.1.0-DEV</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ npm -v</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">8.17.0</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ node -v</span><br><span class=\"line\">v16.15.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装所需插件\"><a href=\"#安装所需插件\" class=\"headerlink\" title=\"安装所需插件\"></a>安装所需插件</h2><p><code>安装Next主题</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;themes/next&#x27;</span>...</span><br></pre></td></tr></table></figure>\n\n<p><code>安装字数统计和阅读时长</code></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install hexo-symbols-count-time --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\">npm WARN deprecated highlight.js@9.18.5: Support has ended <span class=\"keyword\">for</span> 9.x series. Upgrade to @latest</span><br><span class=\"line\"></span><br><span class=\"line\">added 8 packages, and audited 249 packages <span class=\"keyword\">in</span> 25s</span><br><span class=\"line\"></span><br><span class=\"line\">20 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues, run:</span><br><span class=\"line\">  npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install eslint --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 71 packages, and audited 320 packages <span class=\"keyword\">in</span> 1m</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n<p><code>安装git远程部署</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$  npm install hexo-deployer-git --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 1 package, and audited 321 packages <span class=\"keyword\">in</span> 3s</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>添加搜索</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[D:\\hexoblog\\docblog]$ npm install hexo-generator-searchdb --save</span><br><span class=\"line\">npm WARN config global `--global`, `--<span class=\"built_in\">local</span>` are deprecated. Use `--location=global` instead.</span><br><span class=\"line\"></span><br><span class=\"line\">added 1 package, and audited 322 packages <span class=\"keyword\">in</span> 3s</span><br><span class=\"line\"></span><br><span class=\"line\">40 packages are looking <span class=\"keyword\">for</span> funding</span><br><span class=\"line\">  run `npm fund` <span class=\"keyword\">for</span> details</span><br><span class=\"line\"></span><br><span class=\"line\">3 moderate severity vulnerabilities</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` <span class=\"keyword\">for</span> details.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更改配置文件\"><a href=\"#更改配置文件\" class=\"headerlink\" title=\"更改配置文件\"></a>更改配置文件</h2><p><code>更改_config.yml中的主题配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p><code>更改_config.yml中的Site配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\">title: dooubb</span><br><span class=\"line\">subtitle: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">description: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: dooubb</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>添加git部署配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  ignore_hidden: <span class=\"literal\">false</span> <span class=\"comment\"># 添加这个属性值为false 此配置为了git workflows工作</span></span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    <span class=\"comment\">#gitee: https://gitee.com/dooubb/doc.git,master</span></span><br><span class=\"line\">    github: https://github.com/dooubb/doco.git,master</span><br></pre></td></tr></table></figure>\n\n<p><code>在_config.yml添加字数统计和阅读时长配置</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: <span class=\"literal\">true</span></span><br><span class=\"line\">  time: <span class=\"literal\">true</span></span><br><span class=\"line\">  total_symbols: <span class=\"literal\">false</span></span><br><span class=\"line\">  total_time: <span class=\"literal\">false</span></span><br><span class=\"line\">  exclude_codeblock: <span class=\"literal\">false</span></span><br><span class=\"line\">  awl: 4</span><br><span class=\"line\">  wpm: 275</span><br><span class=\"line\">  suffix: <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更改主题配置文件\"><a href=\"#更改主题配置文件\" class=\"headerlink\" title=\"更改主题配置文件\"></a>更改主题配置文件</h2><p><code>更改NexT主题下_config.yml配置文件</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings 主题显示样式</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\">scheme: Mist</span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Post wordcount display settings</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: <span class=\"literal\">false</span>     <span class=\"comment\"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class=\"line\">  item_text_post: <span class=\"literal\">false</span>     <span class=\"comment\"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class=\"line\"> <span class=\"comment\"># item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class=\"line\">  awl: 4                   <span class=\"comment\"># Average Word Length</span></span><br><span class=\"line\">  wpm: 275                 <span class=\"comment\"># Words Per Minute（每分钟阅读词数）</span></span><br><span class=\"line\">  suffix: mins.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Site Information Settings 网页小图标</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://theme-next.org/docs/getting-started/</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/qpp.png</span><br><span class=\"line\">  medium: /images/qpp.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br><span class=\"line\">  <span class=\"comment\">#android_manifest: /images/manifest.json</span></span><br><span class=\"line\">  <span class=\"comment\">#ms_browserconfig: /images/browserconfig.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Settings 文章的目录显示位置</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">sidebar:</span><br><span class=\"line\">  <span class=\"comment\"># Sidebar Position.</span></span><br><span class=\"line\">  <span class=\"comment\">#position: left</span></span><br><span class=\"line\">  position: right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Social Links</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the link label showing to end users.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/dooubb  || fab fa-github</span><br><span class=\"line\">  E-Mail: fanq1213@163.com || fa fa-envelope</span><br><span class=\"line\">  </span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  icons_only: <span class=\"literal\">false</span></span><br><span class=\"line\">  transition: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local Search 本地搜索</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  top_n_per_article: 1</span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  unescape: <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  preload: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文章创建时间和更新时间</span></span><br><span class=\"line\"><span class=\"comment\"># Post meta display settings</span></span><br><span class=\"line\">post_meta:</span><br><span class=\"line\">  item_text: <span class=\"literal\">true</span></span><br><span class=\"line\">  created_at: <span class=\"literal\">true</span></span><br><span class=\"line\">  updated_at:</span><br><span class=\"line\">    <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    another_day: <span class=\"literal\">false</span>  <span class=\"comment\">#如果是true表示同一天只显示创建时间</span></span><br><span class=\"line\">  categories: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改首页文章标题和统计信息居中\"><a href=\"#修改首页文章标题和统计信息居中\" class=\"headerlink\" title=\"修改首页文章标题和统计信息居中\"></a>修改首页文章标题和统计信息居中</h2><p><code>替换themes/next/source/css/_schemes/Mist/_posts-expanded.styl文件内容</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Post Expand</span><br><span class=\"line\">// --------------------------------------------------</span><br><span class=\"line\">.posts-expand &#123;</span><br><span class=\"line\">  &amp;.index &#123;</span><br><span class=\"line\">    .post-title&#123;</span><br><span class=\"line\">      text-align: center; <span class=\"comment\">#文章标题</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    .post-meta &#123;</span><br><span class=\"line\">      text-align: center; <span class=\"comment\">#统计信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      +<span class=\"function\"><span class=\"title\">mobile</span></span>() &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .post-meta &#123;</span><br><span class=\"line\">      margin: 5px 0 20px 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-eof &#123;</span><br><span class=\"line\">    display: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-block:not(:first-child) &#123;</span><br><span class=\"line\">    margin-top: 120px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-title, .post-meta &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-body img &#123;</span><br><span class=\"line\">    margin-left: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-tags &#123;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\"></span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">      background: <span class=\"variable\">$whitesmoke</span>;</span><br><span class=\"line\">      border-bottom: none;</span><br><span class=\"line\">      padding: 1px 5px;</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;:hover &#123;</span><br><span class=\"line\">        background: <span class=\"variable\">$grey</span>-light;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .post-nav &#123;</span><br><span class=\"line\">    margin-top: 40px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.post-button &#123;</span><br><span class=\"line\">  margin-top: 20px;</span><br><span class=\"line\">  text-align: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  .btn &#123;</span><br><span class=\"line\">    // color: <span class=\"variable\">$grey</span>-dim;</span><br><span class=\"line\">    background: none;</span><br><span class=\"line\">    border: 0;</span><br><span class=\"line\">    border-bottom: 2px solid var(--btn-default-border-color);</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    transition-property: border;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      border-bottom-color: var(--btn-default-hover-border-color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加网站运行时长和备案号\"><a href=\"#添加网站运行时长和备案号\" class=\"headerlink\" title=\"添加网站运行时长和备案号\"></a>添加网站运行时长和备案号</h2><p><code>全部替换themes\\next\\layout\\_partials\\footer.swig文件</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.footer.beian.enable %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;beian&quot;</span>&gt;</span><br><span class=\"line\">    &#123;&#123;- next_url(<span class=\"string\">&#x27;https://beian.miit.gov.cn&#x27;</span>, theme.footer.beian.icp + <span class=\"string\">&#x27; &#x27;</span>) &#125;&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.footer.beian.gongan_icon_url %&#125;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">&quot;&#123;&#123; url_for(theme.footer.beian.gongan_icon_url) &#125;&#125;&quot;</span> style=<span class=\"string\">&quot;display: inline-block;&quot;</span>&gt;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.footer.beian.gongan_id and theme.footer.beian.gongan_num %&#125;</span><br><span class=\"line\">      &#123;&#123;- next_url(<span class=\"string\">&#x27;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=&#x27;</span> + theme.footer.beian.gongan_id, theme.footer.beian.gongan_num + <span class=\"string\">&#x27; &#x27;</span>) &#125;&#125;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=<span class=\"string\">&quot;copyright&quot;</span>&gt;</span><br><span class=\"line\">  &#123;%- <span class=\"built_in\">set</span> copyright_year = <span class=\"built_in\">date</span>(null, <span class=\"string\">&#x27;YYYY&#x27;</span>) %&#125;</span><br><span class=\"line\">  &amp;copy; &#123;% <span class=\"keyword\">if</span> theme.footer.since and theme.footer.since != copyright_year %&#125;&#123;&#123; theme.footer.since &#125;&#125; – &#123;% endif %&#125;</span><br><span class=\"line\">  &lt;span itemprop=<span class=\"string\">&quot;copyrightYear&quot;</span>&gt;&#123;&#123; copyright_year &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=<span class=\"string\">&quot;with-love&quot;</span>&gt;</span><br><span class=\"line\">    &lt;i class=<span class=\"string\">&quot;&#123;&#123; theme.footer.icon.name &#125;&#125;&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=<span class=\"string\">&quot;author&quot;</span> itemprop=<span class=\"string\">&quot;copyrightHolder&quot;</span>&gt;&#123;&#123; theme.footer.copyright or author &#125;&#125; &amp;&amp; &lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;sitetime&quot;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">  &lt;script language=javascript&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">siteTime</span></span>()&#123;</span><br><span class=\"line\">\t\twindow.setTimeout(<span class=\"string\">&quot;siteTime()&quot;</span>, 1000);</span><br><span class=\"line\">\t\tvar seconds = 1000;</span><br><span class=\"line\">\t\tvar minutes = seconds * 60;</span><br><span class=\"line\">\t\tvar hours = minutes * 60;</span><br><span class=\"line\">\t\tvar days = hours * 24;</span><br><span class=\"line\">\t\tvar years = days * 365;</span><br><span class=\"line\">\t\tvar today = new Date();</span><br><span class=\"line\">\t\tvar todayYear = today.getFullYear();</span><br><span class=\"line\">\t\tvar todayMonth = today.getMonth()+1;</span><br><span class=\"line\">\t\tvar todayDate = today.getDate();</span><br><span class=\"line\">\t\tvar todayHour = today.getHours();</span><br><span class=\"line\">\t\tvar todayMinute = today.getMinutes();</span><br><span class=\"line\">\t\tvar todaySecond = today.getSeconds();</span><br><span class=\"line\">\t\t/* Date.UTC() -- 返回<span class=\"built_in\">date</span>对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span><br><span class=\"line\">\t\tyear - 作为<span class=\"built_in\">date</span>对象的年份，为4位年份值</span><br><span class=\"line\">\t\tmonth - 0-11之间的整数，做为<span class=\"built_in\">date</span>对象的月份</span><br><span class=\"line\">\t\tday - 1-31之间的整数，做为<span class=\"built_in\">date</span>对象的天数</span><br><span class=\"line\">\t\thours - 0(午夜24点)-23之间的整数，做为<span class=\"built_in\">date</span>对象的小时数</span><br><span class=\"line\">\t\tminutes - 0-59之间的整数，做为<span class=\"built_in\">date</span>对象的分钟数</span><br><span class=\"line\">\t\tseconds - 0-59之间的整数，做为<span class=\"built_in\">date</span>对象的秒数</span><br><span class=\"line\">\t\tmicroseconds - 0-999之间的整数，做为<span class=\"built_in\">date</span>对象的毫秒数 */</span><br><span class=\"line\">\t\tvar t1 = Date.UTC(2018,02,13,15,00,00); //北京时间2018-2-13 00:00:00</span><br><span class=\"line\">\t\tvar t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span><br><span class=\"line\">\t\tvar diff = t2-t1;</span><br><span class=\"line\">\t\tvar diffYears = Math.floor(diff/years);</span><br><span class=\"line\">\t\tvar diffDays = Math.floor((diff/days)-diffYears*365);</span><br><span class=\"line\">\t\tvar diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours);</span><br><span class=\"line\">\t\tvar diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes);</span><br><span class=\"line\">\t\tvar diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span><br><span class=\"line\">\t\tdocument.getElementById(<span class=\"string\">&quot;sitetime&quot;</span>).innerHTML=<span class=\"string\">&quot; 已运行&quot;</span>+/*diffYears+<span class=\"string\">&quot; 年 &quot;</span>+*/diffDays+<span class=\"string\">&quot; 天 &quot;</span>+diffHours+<span class=\"string\">&quot; 小时 &quot;</span>+diffMinutes+<span class=\"string\">&quot; 分钟 &quot;</span>+diffSeconds+<span class=\"string\">&quot; 秒&quot;</span>;</span><br><span class=\"line\">\t&#125;/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span><br><span class=\"line\">\tsiteTime();</span><br><span class=\"line\">&lt;/script&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.footer.powered %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;powered-by&quot;</span>&gt;</span><br><span class=\"line\">    &#123;%- <span class=\"built_in\">set</span> next_site = <span class=\"string\">&#x27;https://theme-next.org&#x27;</span> %&#125;</span><br><span class=\"line\">    &#123;%- <span class=\"keyword\">if</span> theme.scheme !== <span class=\"string\">&#x27;Gemini&#x27;</span> %&#125;</span><br><span class=\"line\">      &#123;%- <span class=\"built_in\">set</span> next_site = <span class=\"string\">&#x27;https://&#x27;</span> + theme.scheme | lower + <span class=\"string\">&#x27;.theme-next.org&#x27;</span> %&#125;</span><br><span class=\"line\">    &#123;%- endif %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;footer.powered&#x27;</span>, next_url(<span class=\"string\">&#x27;https://hexo.io&#x27;</span>, <span class=\"string\">&#x27;Hexo&#x27;</span>, &#123;class: <span class=\"string\">&#x27;theme-link&#x27;</span>&#125;) + <span class=\"string\">&#x27; &amp; &#x27;</span> + next_url(next_site, <span class=\"string\">&#x27;NexT.&#x27;</span> + theme.scheme, &#123;class: <span class=\"string\">&#x27;theme-link&#x27;</span>&#125;)) &#125;&#125;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">&quot;https://beian.miit.gov.cn/&quot;</span>&gt;京ICP备2022022850号-1&lt;/a&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;%- <span class=\"keyword\">if</span> theme.add_this_id %&#125;</span><br><span class=\"line\">  &lt;div class=<span class=\"string\">&quot;addthis_inline_share_toolbox&quot;</span>&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=&#123;&#123; theme.add_this_id &#125;&#125;&quot;</span> async=<span class=\"string\">&quot;async&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;%- endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;- next_inject(<span class=\"string\">&#x27;footer&#x27;</span>) &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改浏览器标签页title\"><a href=\"#修改浏览器标签页title\" class=\"headerlink\" title=\"修改浏览器标签页title\"></a>修改浏览器标签页title</h2><p><code>更改themes\\next\\layout\\page.swig</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% block title %&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"built_in\">set</span> page_title_suffix = <span class=\"string\">&#x27; | &#x27;</span> + title %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">if</span> page.type === <span class=\"string\">&#x27;categories&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.category&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">elif</span> page.type === <span class=\"string\">&#x27;tags&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.tag&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">elif</span> page.type === <span class=\"string\">&#x27;schedule&#x27;</span> and not page.title %&#125;</span><br><span class=\"line\">    &#123;&#123;- __(<span class=\"string\">&#x27;title.schedule&#x27;</span>) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">  &#123;%- <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">    &#123;&#123;- page.name + page_title_suffix &#125;&#125;<span class=\"comment\">#有title更改为name</span></span><br><span class=\"line\">  &#123;%- endif %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>在对应菜单的index.md文件中修改title为name</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">name: 分类</span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo注意事项","url":"/2022/08/12/Hexo/hexo%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","content":"<h1 id=\"文件和文件夹\"><a href=\"#文件和文件夹\" class=\"headerlink\" title=\"文件和文件夹\"></a>文件和文件夹</h1><p><code>编写文章所在目录</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\hexoblog\\docblog\\<span class=\"built_in\">source</span>\\_posts</span><br><span class=\"line\">当前目录下是存放笔记和笔记中所带的图片信息，笔记编辑使用Typora，</span><br><span class=\"line\">图片使用相对位置存放在同级目录并且和笔记名字一致的文件夹中[需要安装插件，在搭建hexo的笔记中有体现]</span><br></pre></td></tr></table></figure>\n\n<p><code>创建不同的文件夹</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">当笔记过多的时候，可以在\\_posts下面创建不同的文件夹来存放不同的笔记</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\hexoblog\\docblog\\<span class=\"built_in\">source</span>\\_posts\\java  </span><br><span class=\"line\">                            ├── java   <span class=\"comment\">#创建存放笔记的文件夹</span></span><br><span class=\"line\">                                ├── JavaClassLoader   <span class=\"comment\">#存放笔记引用的图片</span></span><br><span class=\"line\">                                ├── JavaClassLoader.md   <span class=\"comment\">#笔记</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更改侧边栏背景颜色\"><a href=\"#更改侧边栏背景颜色\" class=\"headerlink\" title=\"更改侧边栏背景颜色\"></a>更改侧边栏背景颜色</h1><p><code>更改配置文件themes\\next\\source\\css\\_common\\outline\\sidebar\\sidebar.styl</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  background: <span class=\"variable\">$black</span>-deep; <span class=\"comment\">#背景颜色</span></span><br><span class=\"line\">  bottom: 0;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!hexo-config(<span class=\"string\">&#x27;back2top.sidebar&#x27;</span>))&#123;</span><br><span class=\"line\">    box-shadow: inset 0 2px 6px black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  +tablet-<span class=\"function\"><span class=\"title\">mobile</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hexo-config(<span class=\"string\">&#x27;sidebar.onmobile&#x27;</span>)) &#123;</span><br><span class=\"line\">      display: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>未完待续。。。</p>\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Linux","url":"/2022/08/13/Linux/Linux/","content":"<h1 id=\"Linux基础\"><a href=\"#Linux基础\" class=\"headerlink\" title=\"Linux基础\"></a>Linux基础</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>是Binary的缩写，这个目录存放着最经常使用的命令</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>就是Super User的意思，放的是系统管理员使用的系统管理程序</td>\n</tr>\n<tr>\n<td>&#x2F;home</td>\n<td>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>该目录为系统管理员</td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</td>\n</tr>\n<tr>\n<td>&#x2F;lost+found</td>\n<td>这个目录一般情况下是空的，当系统非法关机后，当前文件夹会出现一些文件</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>所有的系统管理所需要的配置文件和子目录</td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>用户自己安装的应用程序和文件都放在这个目录下，类似于windows下的program files目录</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;bin</td>\n<td>系统用户使用的应用程序</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;sbin</td>\n<td>超级用户使用的比较高级的管理程序和系统守护程</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;src</td>\n<td>内核源代码默认的放置目录</td>\n</tr>\n<tr>\n<td>&#x2F;run</td>\n<td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</td>\n</tr>\n<tr>\n<td>&#x2F;proc</td>\n<td>这个目录是一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息<span id=\"more\"></span></td>\n</tr>\n<tr>\n<td>&#x2F;srv</td>\n<td>service缩写，该目录存放一些服务启动之后需要提取的数据。</td>\n</tr>\n<tr>\n<td>&#x2F;sys</td>\n<td>这是Linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</td>\n</tr>\n<tr>\n<td>&#x2F;tmp</td>\n<td>这个目录是用来存放一些临时文件的,Linux会自动清理当前目录内的内容[tmpwatch这个定时任务]</td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>类似于windows的设备管理器，把所有的硬件用文件的形式存储。</td>\n</tr>\n<tr>\n<td>&#x2F;media</td>\n<td>Linux系统会自动识别一些设备，例如U盘、光驱等等<br>当识别后Linux会把识别的设备挂载到这个目录下<br>CentOS7迁移到&#x2F;run&#x2F;media</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>临时挂载文件系统，可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里的内容了</td>\n</tr>\n<tr>\n<td>&#x2F;opt</td>\n<td>这是给主机额外安装软件所摆放的目录，默认是空的。</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td>\n</tr>\n</tbody></table>\n<h2 id=\"VI-x2F-VIM-编辑器\"><a href=\"#VI-x2F-VIM-编辑器\" class=\"headerlink\" title=\"VI&#x2F;VIM 编辑器\"></a><strong>VI&#x2F;VIM</strong> 编辑器</h2><p><strong>注: <a href=\"https://www.runoob.com/linux/linux-vim.html\">图文并茂请看菜鸟教程</a></strong></p>\n<blockquote>\n<p>VI 是 Unix 操作系统和类 Unix 操作系统中最通用的文本编辑器。<br>VIM 编辑器是从 VI 发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>VIM 与 VI 编辑器完全兼容。</p>\n</blockquote>\n<h3 id=\"常用语法之移动光标\"><a href=\"#常用语法之移动光标\" class=\"headerlink\" title=\"常用语法之移动光标\"></a><code>常用语法之移动光标</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">h 或 向左箭头键(←)</td>\n<td align=\"left\">光标向左移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">j 或 向下箭头键(↓)</td>\n<td align=\"left\">光标向下移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">k 或 向上箭头键(↑)</td>\n<td align=\"left\">光标向上移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">l 或 向右箭头键(→)</td>\n<td align=\"left\">光标向右移动一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [f]</td>\n<td align=\"left\">屏幕『向下』移动一页，相当于 [Page Down]按键</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [b]</td>\n<td align=\"left\">屏幕『向上』移动一页，相当于 [Page Up] 按键</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl] + [d]</td>\n<td align=\"left\">屏幕『向下』移动半页</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之搜索替换\"><a href=\"#常用语法之搜索替换\" class=\"headerlink\" title=\"常用语法之搜索替换\"></a><code>常用语法之搜索替换</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x2F;word</td>\n<td align=\"left\">向光标之下寻找一个名称为 word 的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">?word</td>\n<td align=\"left\">向光标之上寻找一个字符串名称为 word 的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;word去向下搜寻 word这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 word 的字符串。如果是执行 ?word的话，那么按下 n 则会向上继续搜寻名称为 word的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">N</td>\n<td align=\"left\">这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;word后，按下 N 则表示『向上』搜寻 word</td>\n</tr>\n<tr>\n<td align=\"left\">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td align=\"left\">n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』</td>\n</tr>\n<tr>\n<td align=\"left\">:1,$s&#x2F;word1&#x2F;word2&#x2F;g或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td>\n<td align=\"left\">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之复制粘贴\"><a href=\"#常用语法之复制粘贴\" class=\"headerlink\" title=\"常用语法之复制粘贴\"></a><code>常用语法之复制粘贴</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">x, X</td>\n<td align=\"left\">在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>\n</tr>\n<tr>\n<td align=\"left\">nx</td>\n<td align=\"left\">n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>\n</tr>\n<tr>\n<td align=\"left\">dd</td>\n<td align=\"left\">剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td>\n</tr>\n<tr>\n<td align=\"left\">ndd</td>\n<td align=\"left\">n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td>\n</tr>\n<tr>\n<td align=\"left\">d1G</td>\n<td align=\"left\">删除光标所在到第一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">dG</td>\n<td align=\"left\">删除光标所在到最后一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">d$</td>\n<td align=\"left\">删除游标所在处，到该行的最后一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">d0</td>\n<td align=\"left\">那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">yy</td>\n<td align=\"left\">复制游标所在的那一行(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">nyy</td>\n<td align=\"left\">n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行</td>\n</tr>\n<tr>\n<td align=\"left\">y1G</td>\n<td align=\"left\">复制游标所在行到第一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">yG</td>\n<td align=\"left\">复制游标所在行到最后一行的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">y0</td>\n<td align=\"left\">复制光标所在的那个字符到该行行首的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">y$</td>\n<td align=\"left\">复制光标所在的那个字符到该行行尾的所有数据</td>\n</tr>\n<tr>\n<td align=\"left\">p, P</td>\n<td align=\"left\">p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行</td>\n</tr>\n<tr>\n<td align=\"left\">J</td>\n<td align=\"left\">将光标所在行与下一行的数据结合成同一行</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">复原前一个动作。(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">[Ctrl]+r</td>\n<td align=\"left\">重做上一个动作。(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用语法之模式切换\"><a href=\"#常用语法之模式切换\" class=\"headerlink\" title=\"常用语法之模式切换\"></a><code>常用语法之模式切换</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">i, I</td>\n<td align=\"left\">进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』</td>\n</tr>\n<tr>\n<td align=\"left\">a, A</td>\n<td align=\"left\">进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』</td>\n</tr>\n<tr>\n<td align=\"left\">o, O</td>\n<td align=\"left\">进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">r, R</td>\n<td align=\"left\">进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止</td>\n</tr>\n<tr>\n<td align=\"left\">[Esc]</td>\n<td align=\"left\">退出编辑模式，回到一般模式中</td>\n</tr>\n<tr>\n<td align=\"left\">:w</td>\n<td align=\"left\">将编辑的数据写入硬盘档案中(常用)</td>\n</tr>\n<tr>\n<td align=\"left\">:w!</td>\n<td align=\"left\">若文件属性为『只读』时，强制写入该档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:q</td>\n<td align=\"left\">离开 vi</td>\n</tr>\n<tr>\n<td align=\"left\">:q!</td>\n<td align=\"left\">若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:wq</td>\n<td align=\"left\">储存后离开，若为 :wq! 则为强制储存后离开</td>\n</tr>\n<tr>\n<td align=\"left\">ZZ</td>\n<td align=\"left\">这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>\n</tr>\n<tr>\n<td align=\"left\">ZQ</td>\n<td align=\"left\">不保存，强制退出。效果等同于 **:q!**。</td>\n</tr>\n<tr>\n<td align=\"left\">:w [filename]</td>\n<td align=\"left\">将编辑的数据储存成另一个档案（类似另存新档）</td>\n</tr>\n<tr>\n<td align=\"left\">:r [filename]</td>\n<td align=\"left\">在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>\n</tr>\n<tr>\n<td align=\"left\">:n1,n2 w [filename]</td>\n<td align=\"left\">将 n1 到 n2 的内容储存成 filename 这个档案。</td>\n</tr>\n<tr>\n<td align=\"left\">:! command</td>\n<td align=\"left\">暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux-中的服务管理\"><a href=\"#Linux-中的服务管理\" class=\"headerlink\" title=\"Linux 中的服务管理\"></a>Linux 中的服务管理</h2><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）</p>\n<p>启动之后一只存在、常驻内存的进程，一般被称作“服务”（service）</p>\n<h3 id=\"systemctl常用命令\"><a href=\"#systemctl常用命令\" class=\"headerlink\" title=\"systemctl常用命令\"></a><code>systemctl常用命令</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">systemctl start service_name</td>\n<td align=\"left\">启动某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl status service_name</td>\n<td align=\"left\">查看某个服务当前状态</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl restart service_name</td>\n<td align=\"left\">重启某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl stop service_name</td>\n<td align=\"left\">停止某个服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl daemon-reload</td>\n<td align=\"left\">重新加载配置文件</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl disable service_name</td>\n<td align=\"left\">关掉指定服务的自动启动</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl enable service_name</td>\n<td align=\"left\">开启指定服务的自动启动</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files</td>\n<td align=\"left\">查看服务开机启动状态</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files –type&#x3D;service</td>\n<td align=\"left\">列出所有服务（包括启用的和禁用的）</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl list-unit-files –type&#x3D;mount</td>\n<td align=\"left\">所有系统挂载点</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl is-enabled service_name</td>\n<td align=\"left\">检查指定服务是否启用</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl kill service_name</td>\n<td align=\"left\">杀死服务</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl show service_name</td>\n<td align=\"left\">检查指定服务的所有配置细节</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl get-default</td>\n<td align=\"left\">查看当前运行级别</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl set-default TARGET.target</td>\n<td align=\"left\">修改当前运行级别[TARGET 取 multi-user 或者 graphical]</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl show -p CPUShares httpd.service</td>\n<td align=\"left\">获取当前服务的CPU分配额（如httpd）</td>\n</tr>\n<tr>\n<td align=\"left\">systemctl set-property httpd.service CPUShares&#x3D;2000</td>\n<td align=\"left\">将（httpd.service）的CPU分配份额限制为2000 CPUShares<br>（新增文件&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;httpd.service.d&#x2F;90-CPUShares.conf ）</td>\n</tr>\n</tbody></table>\n<p>查看服务的方法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> -al /usr/lib/systemd/system</span><br></pre></td></tr></table></figure>\n\n<p>注：</p>\n<p><strong>Linux系统有7种运行级别(runlevel):常用的是级别3和5</strong></p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p>\n<p>运行级别1：单用户工作状态，oot权限，用于系统维护，禁止远程登陆</p>\n<p>运行级别2：多用户状态（没有NFS),不支持网络</p>\n<p>运行级别3：完全的多用户状态（有NFS),登陆后进入控制台命令行模式</p>\n<p>运行级别4：系统未使用，保留</p>\n<p>运行级别5：X11控制台，登陆后进入图形GU模式</p>\n<p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p><strong>CentOS7</strong> <strong>的运行级别简化为</strong><strong>:</strong> </p>\n<p>multi-user.target 等价于原运行级别 3（多用户有网，无图形界面） </p>\n<p>graphical.target 等价于原运行级别 5（多用户有网，有图形界面）</p>\n<h2 id=\"常用基本命令\"><a href=\"#常用基本命令\" class=\"headerlink\" title=\"常用基本命令\"></a>常用基本命令</h2><h3 id=\"常用命令之文件目录\"><a href=\"#常用命令之文件目录\" class=\"headerlink\" title=\"常用命令之文件目录\"></a><code>常用命令之文件目录</code></h3><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pwd</td>\n<td align=\"left\">显示当前工作目录的绝对路径</td>\n</tr>\n<tr>\n<td align=\"left\">ls -al</td>\n<td align=\"left\">列出当前目录全部文件，包括[.开头的文件]<br>每行列出的信息依次是：<br> 文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字</td>\n</tr>\n<tr>\n<td align=\"left\">cd 绝对路径</td>\n<td align=\"left\">切换路径</td>\n</tr>\n<tr>\n<td align=\"left\">cd 相对路径</td>\n<td align=\"left\">切换路径</td>\n</tr>\n<tr>\n<td align=\"left\">cd ~或者 cd</td>\n<td align=\"left\">回到自己的家目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd -</td>\n<td align=\"left\">回到上一次所在目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd ..</td>\n<td align=\"left\">回到当前目录的上一级目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd -P</td>\n<td align=\"left\">跳转到实际物理路径，而非快捷方式路径</td>\n</tr>\n<tr>\n<td align=\"left\">mkdir -p xxx</td>\n<td align=\"left\">创建多层目录</td>\n</tr>\n<tr>\n<td align=\"left\">rmdir xxx</td>\n<td align=\"left\">删除一个空的文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">touch 文件名称</td>\n<td align=\"left\">创建空文件</td>\n</tr>\n<tr>\n<td align=\"left\">cp  source dest</td>\n<td align=\"left\">source[源文件] dest[目标文件]  复制文件</td>\n</tr>\n<tr>\n<td align=\"left\">cp  -r source dest</td>\n<td align=\"left\">递归复制整个文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">rm -r xxx</td>\n<td align=\"left\">递归删除目录中所有内容</td>\n</tr>\n<tr>\n<td align=\"left\">rm -f xxx</td>\n<td align=\"left\">强制执行删除操作，而不提示用于进行确认</td>\n</tr>\n<tr>\n<td align=\"left\">rm  -v xxx</td>\n<td align=\"left\">显示指令的详细执行过程</td>\n</tr>\n<tr>\n<td align=\"left\">mv oldNameFile newNameFile</td>\n<td align=\"left\">重命名</td>\n</tr>\n<tr>\n<td align=\"left\">mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder</td>\n<td align=\"left\">移动文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用命令之文件查看\"><a href=\"#常用命令之文件查看\" class=\"headerlink\" title=\"常用命令之文件查看\"></a><code>常用命令之文件查看</code></h3><h4 id=\"more-文件内容分屏查看器\"><a href=\"#more-文件内容分屏查看器\" class=\"headerlink\" title=\"more 文件内容分屏查看器\"></a><strong>more 文件内容分屏查看器</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">more 要查看的文件</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">Enter</td>\n<td align=\"left\">代表向下翻『一行』</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">代表立刻离开 more ，不再显示该文件内容</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+F</td>\n<td align=\"left\">向下滚动一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+B</td>\n<td align=\"left\">返回上一屏</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">:f</td>\n<td align=\"left\">输出文件名和当前行的行号</td>\n</tr>\n</tbody></table>\n<h4 id=\"less分屏显示文件内容\"><a href=\"#less分屏显示文件内容\" class=\"headerlink\" title=\"less分屏显示文件内容\"></a><strong>less分屏显示文件内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">less 要查看的文件</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pagedown]</td>\n<td align=\"left\">向下翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pageup]</td>\n<td align=\"left\">向上翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;字串</td>\n<td align=\"left\">向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>\n</tr>\n<tr>\n<td align=\"left\">?字串</td>\n<td align=\"left\">向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">离开 less 这个程序；</td>\n</tr>\n</tbody></table>\n<h4 id=\"head显示文件头部内容\"><a href=\"#head显示文件头部内容\" class=\"headerlink\" title=\"head显示文件头部内容\"></a><strong>head显示文件头部内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">head</span> 文件</span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 5 文件 <span class=\"comment\"># 指定显示头部内容的行数,可以是任意行数</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"tail输出文件尾部内容\"><a href=\"#tail输出文件尾部内容\" class=\"headerlink\" title=\"tail输出文件尾部内容\"></a><strong>tail输出文件尾部内容</strong></h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> 文件</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -n 5 文件 <span class=\"comment\">#查看文件尾部5行内容,5可以是任意行数</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f 文件  <span class=\"comment\">#实时追踪该文档的所有更新</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gt-输出重定向和-gt-gt-追加\"><a href=\"#gt-输出重定向和-gt-gt-追加\" class=\"headerlink\" title=\"&gt;输出重定向和&gt;&gt;追加\"></a><strong>&gt;输出重定向和&gt;&gt;追加</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ls -al &gt; a.txt</td>\n<td align=\"left\">列表的内容写入文件 a.txt 中（<strong>覆盖写</strong>）</td>\n</tr>\n<tr>\n<td align=\"left\">ls -al &gt;&gt; aa.txt</td>\n<td align=\"left\">列表的内容<strong>追加</strong>到文件 aa.txt 的末尾</td>\n</tr>\n<tr>\n<td align=\"left\">cat 文件 1 &gt; 文件 2</td>\n<td align=\"left\">将文件 1 的内容覆盖到文件 2</td>\n</tr>\n<tr>\n<td align=\"left\">echo “内容” &gt;&gt; 文件</td>\n<td align=\"left\">内容<strong>追加</strong>到文件的末尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"ln软链接\"><a href=\"#ln软链接\" class=\"headerlink\" title=\"ln软链接\"></a><strong>ln软链接</strong></h4><p><code>软链接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块.</code> </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s [原文件或目录] [软链接名] <span class=\"comment\">#给原文件创建一个软链接</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf 软链接名 <span class=\"comment\">#删除软链接(注意不要在软链接最后写/)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令之用户管理\"><a href=\"#常用命令之用户管理\" class=\"headerlink\" title=\"常用命令之用户管理\"></a><code>常用命令之用户管理</code></h3>","categories":["Linux"],"tags":["Linux"]},{"title":"Nginx的安装","url":"/2022/08/11/Nginx/Nginx/","content":"<h1 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class=\"line\"><span class=\"comment\"># 安装wget工具</span></span><br><span class=\"line\">yum -y install wget </span><br><span class=\"line\"><span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"comment\"># 下载安装包</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.21.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压到当前文件夹</span></span><br><span class=\"line\">tar -xvf nginx-1.21.4.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入到nginx目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx-1.21.4</span><br><span class=\"line\"><span class=\"comment\"># 添加模块(可以通过http请求来查看nginx状态)</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</span><br><span class=\"line\"><span class=\"comment\"># 编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改默认配置文件\"><a href=\"#修改默认配置文件\" class=\"headerlink\" title=\"修改默认配置文件\"></a>修改默认配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       81; # 修改默认端口</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t# 新增查看nginx状态接口</span><br><span class=\"line\">\t\tlocation /ngx_status &#123;</span><br><span class=\"line\">\t\t    stub_status on;</span><br><span class=\"line\">\t\t    access_log off;</span><br><span class=\"line\">\t\t   #allow 127.0.0.1;</span><br><span class=\"line\">\t\t   #deny all;</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>检查配置文件</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx  -t</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h1><p>执行命令启动nginx</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"comment\"># 如果修改配置文件后可以重新加载</span></span><br><span class=\"line\">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"检查nginx的状态\"><a href=\"#检查nginx的状态\" class=\"headerlink\" title=\"检查nginx的状态\"></a>检查nginx的状态</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行命令查看</span></span><br><span class=\"line\">curl http://127.0.0.1:81/ngx_status</span><br><span class=\"line\"><span class=\"comment\">###执行结果 </span></span><br><span class=\"line\">Active connections: 1 </span><br><span class=\"line\">server accepts handled requests</span><br><span class=\"line\"> 3 3 5 </span><br><span class=\"line\">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置nginx环境变量\"><a href=\"#配置nginx环境变量\" class=\"headerlink\" title=\"配置nginx环境变量\"></a>配置nginx环境变量</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑环境变量配置文件</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在末尾追加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 测试命令</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"><span class=\"comment\">###执行结果</span></span><br><span class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置环境变量后的命令\"><a href=\"#配置环境变量后的命令\" class=\"headerlink\" title=\"配置环境变量后的命令\"></a>配置环境变量后的命令</h1><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">nginx</span><br><span class=\"line\"><span class=\"comment\"># 退出命令</span></span><br><span class=\"line\">nginx -s quit/stop</span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["CICD"],"tags":["Nginx"]},{"title":"初级爬虫练手01","url":"/2022/08/11/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B01/","content":"<h1 id=\"豆瓣电影-Top-250\"><a href=\"#豆瓣电影-Top-250\" class=\"headerlink\" title=\"豆瓣电影 Top 250\"></a>豆瓣电影 Top 250</h1><p>使用正则表达式来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备heater</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">lits = [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;year&quot;</span>, <span class=\"string\">&quot;country&quot;</span>, <span class=\"string\">&quot;category&quot;</span>, <span class=\"string\">&quot;score&quot;</span>, <span class=\"string\">&quot;number&quot;</span>, <span class=\"string\">&quot;quote&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 准备文件</span></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;豆瓣电影 Top 250.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">csvwriter = csv.writer(f)</span><br><span class=\"line\"><span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">csvwriter.writerow([<span class=\"string\">&quot;电影名称&quot;</span>, <span class=\"string\">&quot;年份&quot;</span>, <span class=\"string\">&quot;国家&quot;</span>, <span class=\"string\">&quot;分类&quot;</span>, <span class=\"string\">&quot;评分&quot;</span>, <span class=\"string\">&quot;评分人数&quot;</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> uri <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">250</span>, <span class=\"number\">25</span>):</span><br><span class=\"line\">    url = <span class=\"string\">f&quot;https://movie.douban.com/top250?start=<span class=\"subst\">&#123;uri&#125;</span>&quot;</span></span><br><span class=\"line\">    resp = requests.get(url, headers=headers)</span><br><span class=\"line\">    resp.encoding = <span class=\"string\">&quot;utf-8&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备正则匹配</span></span><br><span class=\"line\">    obj = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;&lt;/span&gt;.*?&lt;p class=&quot;&quot;&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp;/&amp;nbsp;(?P&lt;country&gt;.*?)&amp;nbsp;/&amp;nbsp;(?P&lt;category&gt;.*?)&lt;/p&gt;&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;.*?&lt;div class=&quot;star&quot;&gt;.*?&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;&lt;span&gt;(?P&lt;number&gt;.*?)人评价&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">    result = obj.finditer(resp.text)</span><br><span class=\"line\">    <span class=\"comment\"># 循环格式化数据，并且写入文件中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        dic = it.groupdict()</span><br><span class=\"line\">        dic[<span class=\"string\">&#x27;year&#x27;</span>] = dic[<span class=\"string\">&#x27;year&#x27;</span>].strip()</span><br><span class=\"line\">        dic[<span class=\"string\">&#x27;category&#x27;</span>] = dic[<span class=\"string\">&#x27;category&#x27;</span>].strip()</span><br><span class=\"line\">        csvwriter.writerow(dic.values())</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;写入完成。。。&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"初级爬虫练手02","url":"/2022/08/11/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B02/","content":"<h1 id=\"彼岸网4K动漫图片\"><a href=\"#彼岸网4K动漫图片\" class=\"headerlink\" title=\"彼岸网4K动漫图片\"></a>彼岸网4K动漫图片</h1><p>使用BeautifulSoup来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">child_domin = <span class=\"string\">&quot;https://pic.netbian.com&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page_index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">162</span>):</span><br><span class=\"line\">    domain = <span class=\"string\">f&quot;https://pic.netbian.com/4kdongman/index_<span class=\"subst\">&#123;page_index&#125;</span>.html&quot;</span></span><br><span class=\"line\">    resp = requests.get(domain)</span><br><span class=\"line\">    resp.encoding = <span class=\"string\">&quot;gbk&quot;</span>  <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">    page = resp.text</span><br><span class=\"line\">    <span class=\"comment\"># 解析page的内容</span></span><br><span class=\"line\">    context = BeautifulSoup(page, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取页面中的缩略图的路径</span></span><br><span class=\"line\">    aList = context.find(<span class=\"string\">&quot;ul&quot;</span>, class_=<span class=\"string\">&quot;clearfix&quot;</span>).find_all(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取跳转页面的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> aList:</span><br><span class=\"line\">        child_url = child_domin + a.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取跳转后的页面源码</span></span><br><span class=\"line\">        child_resp = requests.get(child_url)</span><br><span class=\"line\">        child_resp.encoding = <span class=\"string\">&quot;gbk&quot;</span>  <span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">        child_page = child_resp.text</span><br><span class=\"line\">        <span class=\"comment\"># 解析二级页面获取到真正的图片的url</span></span><br><span class=\"line\">        child_context = BeautifulSoup(child_page, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取uri</span></span><br><span class=\"line\">        img_uri = child_context.find(<span class=\"string\">&quot;div&quot;</span>, class_=<span class=\"string\">&quot;photo-pic&quot;</span>).find(<span class=\"string\">&quot;img&quot;</span>).get(<span class=\"string\">&quot;src&quot;</span>)</span><br><span class=\"line\">        img_url = child_domin + img_uri</span><br><span class=\"line\">        img_resp = requests.get(img_url)</span><br><span class=\"line\">        img_name = img_url.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 下载图片 并将图片写入文件夹内</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;img/&quot;</span> + img_name, mode=<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(img_resp.content)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;over!!!&quot;</span>, img_name)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;all over!!!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"初级爬虫练手03","url":"/2022/08/11/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B03/","content":"<h1 id=\"电影天堂\"><a href=\"#电影天堂\" class=\"headerlink\" title=\"电影天堂\"></a>电影天堂</h1><p>使用正则表达式来爬取数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备url</span></span><br><span class=\"line\">domian = <span class=\"string\">&quot;https://www.dytt89.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备heater</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resp = requests.get(domian, headers=headers)</span><br><span class=\"line\"><span class=\"comment\"># 指定字符集</span></span><br><span class=\"line\">resp.encoding = <span class=\"string\">&quot;gb2312&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取首页中2021必看热片的跳转连接</span></span><br><span class=\"line\">obj = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;2021必看热片.*?&lt;ul&gt;.*?&lt;li&gt;&lt;a href=&#x27;(?P&lt;uris&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class=\"line\">result = obj.finditer(resp.text)</span><br><span class=\"line\"><span class=\"comment\"># 获取a标签中的href连接</span></span><br><span class=\"line\">href = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&quot;&lt;li&gt;&lt;a href=&#x27;(?P&lt;uri&gt;.*?)&#x27;&quot;</span>, re.S)</span><br><span class=\"line\"><span class=\"comment\"># 循环构造完整连接</span></span><br><span class=\"line\">data = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;◎片　　名(?P&lt;movie&gt;.*?)&lt;br /&gt;.*?&lt;td &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">r&#x27;style=&quot;WORD-WRAP: break-word&quot; bgcolor=&quot;#fdfddf&quot;&gt;&lt;a href=&quot;(?P&lt;download&gt;.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;电影天堂必看热片.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">csvwriter = csv.writer(f)</span><br><span class=\"line\"><span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">csvwriter.writerow([<span class=\"string\">&quot;电影名称&quot;</span>, <span class=\"string\">&quot;下载连接&quot;</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    uris = href.finditer(it.group(<span class=\"string\">&quot;uris&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> uri <span class=\"keyword\">in</span> uris:</span><br><span class=\"line\">        url = domian + uri.group(<span class=\"string\">&quot;uri&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 在从urls中循环获取二级页面内的下载路径</span></span><br><span class=\"line\">        child_resp = requests.get(url, headers=headers)</span><br><span class=\"line\">        child_resp.encoding = <span class=\"string\">&quot;gb2312&quot;</span></span><br><span class=\"line\">        result_data = data.search(child_resp.text)</span><br><span class=\"line\">        dic = result_data.groupdict()</span><br><span class=\"line\">        csvwriter.writerow(dic.values())</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;下载完成。。。&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"Linux安装Redis","url":"/2022/08/11/Redis/Redis/","content":"<h1 id=\"Linux安装单机Redis\"><a href=\"#Linux安装单机Redis\" class=\"headerlink\" title=\"Linux安装单机Redis\"></a>Linux安装单机Redis</h1><h2 id=\"安装gcc\"><a href=\"#安装gcc\" class=\"headerlink\" title=\"安装gcc\"></a>安装gcc</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install gcc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入usr-x2F-local文件夹下\"><a href=\"#进入usr-x2F-local文件夹下\" class=\"headerlink\" title=\"进入usr&#x2F;local文件夹下\"></a>进入usr&#x2F;local文件夹下</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解压到当前文件夹\"><a href=\"#解压到当前文件夹\" class=\"headerlink\" title=\"解压到当前文件夹\"></a>解压到当前文件夹</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入解压后的redis文件夹中然后编译\"><a href=\"#进入解压后的redis文件夹中然后编译\" class=\"headerlink\" title=\"进入解压后的redis文件夹中然后编译\"></a>进入解压后的redis文件夹中然后编译</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改redis的配置文件redis-conf\"><a href=\"#修改redis的配置文件redis-conf\" class=\"headerlink\" title=\"修改redis的配置文件redis.conf\"></a>修改redis的配置文件redis.conf</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span>  <span class=\"comment\">#后台启动</span></span><br><span class=\"line\">protected-mode no  <span class=\"comment\">#关闭保护模式，开启的话，只有本机才可以访问redis</span></span><br><span class=\"line\"><span class=\"comment\"># 需要注释掉bind</span></span><br><span class=\"line\"><span class=\"comment\">#bind 127.0.0.1（bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可）</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动redis-server\"><a href=\"#启动redis-server\" class=\"headerlink\" title=\"启动redis-server\"></a>启动redis-server</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">src/redis-server redis.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证是否启动成功\"><a href=\"#验证是否启动成功\" class=\"headerlink\" title=\"验证是否启动成功\"></a>验证是否启动成功</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证启动是否成功 </span></span><br><span class=\"line\">ps -ef | grep redis </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动redis-cli\"><a href=\"#启动redis-cli\" class=\"headerlink\" title=\"启动redis-cli\"></a>启动redis-cli</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入redis客户端 </span></span><br><span class=\"line\">src/redis-cli</span><br><span class=\"line\"><span class=\"comment\"># 执行ping</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\" size=\"5\">以上单机redis安装完成。。。。。</font></p>\n<h1 id=\"Linux安装Redis主从架构\"><a href=\"#Linux安装Redis主从架构\" class=\"headerlink\" title=\"Linux安装Redis主从架构\"></a>Linux安装Redis主从架构</h1><h2 id=\"redis主从架构搭建，配置从节点步骤：\"><a href=\"#redis主从架构搭建，配置从节点步骤：\" class=\"headerlink\" title=\"redis主从架构搭建，配置从节点步骤：\"></a><strong>redis主从架构搭建，配置从节点步骤：</strong></h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在redis目录下创建一个config文件夹然后复制redis.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 修改相关配置</span></span><br><span class=\"line\">port 6380 </span><br><span class=\"line\">pidfile /var/run/redis_6380.pid    <span class=\"comment\"># 把pid进程号写入pidfile配置的文件 </span></span><br><span class=\"line\"><span class=\"comment\"># 需要注释掉bind                             </span></span><br><span class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 配置主从复制</span></span><br><span class=\"line\">replicaof 192.168.245.130 6379   <span class=\"comment\"># 从本机6379的redis实例复制数据，Redis 5.0之前使用slaveof</span></span><br><span class=\"line\">replica-read-only <span class=\"built_in\">yes</span>  <span class=\"comment\"># 配置从节点只读</span></span><br><span class=\"line\"><span class=\"comment\"># 启动从节点</span></span><br><span class=\"line\"><span class=\"comment\"># 连接从节点</span></span><br><span class=\"line\">src/redis-cli -p 6380</span><br></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在6379实例上写数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> <span class=\"built_in\">test</span> success</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在6380上读数据</span></span><br><span class=\"line\">127.0.0.1:6380&gt; get <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">127.0.0.1:6380&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在6381上读数据</span></span><br><span class=\"line\">127.0.0.1:6381&gt; get <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Redis"],"tags":["Redis"]},{"title":"初级爬虫练手04","url":"/2022/08/11/Python/%E5%88%9D%E7%BA%A7%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B04/","content":"<h1 id=\"网易云音乐热评\"><a href=\"#网易云音乐热评\" class=\"headerlink\" title=\"网易云音乐热评\"></a>网易云音乐热评</h1><p>主要是网易使用js来加密请求数据，他们会定期修改方法函数和隐藏请求体，需要花费时间进行追踪和解密加密方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> base64 <span class=\"keyword\">import</span> b64encode</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">js中赋值的方法</span></span><br><span class=\"line\"><span class=\"string\"> e9f.data = j9a.cq9h(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                params: bVj0x.encText,</span></span><br><span class=\"line\"><span class=\"string\">                encSecKey: bVj0x.encSecKey</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">js中加密请求数据的方法  </span></span><br><span class=\"line\"><span class=\"string\">    获取一个随机的字符串          </span></span><br><span class=\"line\"><span class=\"string\">    function a(a) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">        for (d = 0; a &gt; d; d += 1)</span></span><br><span class=\"line\"><span class=\"string\">            e = Math.random() * b.length,</span></span><br><span class=\"line\"><span class=\"string\">            e = Math.floor(e),</span></span><br><span class=\"line\"><span class=\"string\">            c += b.charAt(e);</span></span><br><span class=\"line\"><span class=\"string\">        return c</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    使用AES就行对称加密</span></span><br><span class=\"line\"><span class=\"string\">    function b(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var c = CryptoJS.enc.Utf8.parse(b) b=0CoJUm6Qyw8W8jud</span></span><br><span class=\"line\"><span class=\"string\">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class=\"line\"><span class=\"string\">          , e = CryptoJS.enc.Utf8.parse(a) a=传入的数据 </span></span><br><span class=\"line\"><span class=\"string\">          , f = CryptoJS.AES.encrypt(e, c, &#123;</span></span><br><span class=\"line\"><span class=\"string\">            iv: d,</span></span><br><span class=\"line\"><span class=\"string\">            mode: CryptoJS.mode.CBC</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">        return f.toString()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    使用RSA非对称加密</span></span><br><span class=\"line\"><span class=\"string\">    function c(a, b, c) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        var d, e;</span></span><br><span class=\"line\"><span class=\"string\">        return setMaxDigits(131),</span></span><br><span class=\"line\"><span class=\"string\">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class=\"line\"><span class=\"string\">        e = encryptedString(d, a)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    真正的加密方法</span></span><br><span class=\"line\"><span class=\"string\">    function d(d, e, f, g) &#123; ) </span></span><br><span class=\"line\"><span class=\"string\">        var h = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          , i = a(16); 是一个16位的字符串 &quot;8nPYfHhrGEIu5JjP&quot;</span></span><br><span class=\"line\"><span class=\"string\">        return h.encText = b(d, g),</span></span><br><span class=\"line\"><span class=\"string\">        h.encText = b(h.encText, i),</span></span><br><span class=\"line\"><span class=\"string\">        h.encSecKey = c(i, e, f),</span></span><br><span class=\"line\"><span class=\"string\">        h</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;rid&quot;</span>: <span class=\"string\">&quot;R_SO_4_569213220&quot;</span>, <span class=\"comment\"># 歌曲对应的id</span></span><br><span class=\"line\">    <span class=\"string\">&quot;threadId&quot;</span>: <span class=\"string\">&quot;R_SO_4_569213220&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pageNo&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pageSize&quot;</span>: <span class=\"string\">&quot;20&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cursor&quot;</span>: <span class=\"string\">&quot;-1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;offset&quot;</span>: <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;orderType&quot;</span>: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;csrf_token&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 用来加密data用的参数</span></span><br><span class=\"line\">f = <span class=\"string\">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&quot;</span></span><br><span class=\"line\">g = <span class=\"string\">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class=\"line\">i = <span class=\"string\">&quot;8nPYfHhrGEIu5JjP&quot;</span></span><br><span class=\"line\">e = <span class=\"string\">&quot;010001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于i可以debug获取到，所以d方法中的c方法最终的结果就是一个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_encSecKey</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;73e99ee217cdb4d07b6947635c74047bff778823dd433ab870e0f11c2e7056add7bf7a4daf7c598f96192e5559c17ceee8d267fe7e9121511d224e8b74138b49e94e9983768e75641adccbda73b5b9d9b5809a82277dc017ed4f557561bdaab8b80cfed70a84538c2dbf02a637c462b842c0f7fa2443589a85395d99aaff22c3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加密过程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enc_params</span>(<span class=\"params\">data, key</span>):</span><br><span class=\"line\">    iv = <span class=\"string\">&quot;0102030405060708&quot;</span></span><br><span class=\"line\">    data = to_16(data)</span><br><span class=\"line\">    aes = AES.new(key=key.encode(<span class=\"string\">&quot;utf-8&quot;</span>), IV=iv.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class=\"comment\"># 创建加密器</span></span><br><span class=\"line\">    bs = aes.encrypt(data.encode(<span class=\"string\">&quot;utf-8&quot;</span>))  <span class=\"comment\"># 加密, 加密的内容的长度必须是16的倍数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(b64encode(bs), <span class=\"string\">&quot;utf-8&quot;</span>)  <span class=\"comment\"># 转化成字符串返回,</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">param = <span class=\"string\">&quot;QKjNbInsQdG7ignRVvh+DrvYYtPrFNeMMMdriP7RWLRSG3Pgbj1/Rk39K+BpukpSwbFY9JIkmWGBAxCW2WLlkDtI0aP0S9JodTb4YX8wLOsTB/+I6XVIHtAKd204b4wGYFtspC6oYK147otyETw9qe+HsMpYA3ZkawcTxqrx1+ns4Kh5mgra2IFlaKDw9jGRG4m5tPKGItxNOjBf0awMfkUYHJqCqzd/Ed2KsH6X8sbgthlDzMvn8Qz+6REbmpxy1GOVuPWmZKVPAFFjNFuqpHEPfZxUduV8xp35go+d44A=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转化成16的倍数, 位下方的加密算法服务</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">to_16</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    pad = <span class=\"number\">16</span> - <span class=\"built_in\">len</span>(data) % <span class=\"number\">16</span></span><br><span class=\"line\">    data += <span class=\"built_in\">chr</span>(pad) * pad</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把参数进行加密</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_params</span>(<span class=\"params\">data</span>):  <span class=\"comment\"># 默认这里接收到的是字符串</span></span><br><span class=\"line\">    first = enc_params(data, g)</span><br><span class=\"line\">    second = enc_params(first, i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> second  <span class=\"comment\"># 返回的就是params</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 时间戳转成时间</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">timeStamp</span>(<span class=\"params\">timeNum</span>):</span><br><span class=\"line\">    timeStamp = <span class=\"built_in\">float</span>(timeNum/<span class=\"number\">1000</span>)</span><br><span class=\"line\">    timeArray = time.localtime(timeStamp)</span><br><span class=\"line\">    otherStyleTime = time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeArray)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> otherStyleTime</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>():</span><br><span class=\"line\">    resp = requests.post(url, data=&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class=\"line\">        <span class=\"string\">&quot;encSecKey&quot;</span>: get_encSecKey()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp.json()[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;hotComments&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 准备文件</span></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;网易云音乐热评.csv&quot;</span>, mode=<span class=\"string\">&quot;a&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>, newline=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    csvwriter = csv.writer(f)</span><br><span class=\"line\">    <span class=\"comment\"># 写入表头</span></span><br><span class=\"line\">    csvwriter.writerow([<span class=\"string\">&quot;昵称&quot;</span>, <span class=\"string\">&quot;热评&quot;</span>, <span class=\"string\">&quot;点赞数&quot;</span>, <span class=\"string\">&quot;评论时间&quot;</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">    hotComments = get_data()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> hotComment <span class=\"keyword\">in</span> hotComments:</span><br><span class=\"line\">        csvwriter.writerow([hotComment[<span class=\"string\">&quot;user&quot;</span>][<span class=\"string\">&quot;nickname&quot;</span>],hotComment[<span class=\"string\">&quot;content&quot;</span>],hotComment[<span class=\"string\">&quot;likedCount&quot;</span>],timeStamp(hotComment[<span class=\"string\">&quot;time&quot;</span>])])</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["爬虫进阶"],"tags":["爬虫进阶"]},{"title":"Shell编程","url":"/2022/08/12/Shell/shell/","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p><code>shell支持三种定义变量的方式</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">var=dooubb</span><br><span class=\"line\">var=<span class=\"string\">&#x27;dooubb&#x27;</span></span><br><span class=\"line\">var=<span class=\"string\">&quot;dooubb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果赋值变量的值没有空格或者tab缩进，不加引号也可以</p>\n<p>如果赋值变量的值有空格或者tab缩进，则需要加引号</p>\n<p>单引号和双引号也是有区别的</p>\n<ol>\n<li>由单引号<code>&#39; &#39;</code>包围的字符串：</li>\n</ol>\n<ul>\n<li>任何字符都会原样输出，在其中使用变量是无效的。</li>\n<li>字符串中不能出现单引号，即使对单引号进行转义也不行。</li>\n</ul>\n<ol>\n<li>由双引号<code>&quot; &quot;</code>包围的字符串：</li>\n</ol>\n<ul>\n<li>如果其中包含了某个变量，那么该变量会被解析（得到该变量的值），而不是原样输出。</li>\n<li>字符串中可以出现双引号，只要它被转义了就行。</li>\n</ul>\n<ol>\n<li>不被引号包围的字符串</li>\n</ol>\n<ul>\n<li>不被引号包围的字符串中出现变量时也会被解析，这一点和双引号<code>&quot; &quot;</code>包围的字符串一样。</li>\n<li>字符串中不能出现空格，否则空格后边的字符串会作为其他变量或者命令解析。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\">str1=<span class=\"built_in\">test</span><span class=\"variable\">$var</span></span><br><span class=\"line\">str2=<span class=\"string\">&quot;shell \\&quot;script\\&quot; <span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\">str3=<span class=\"string\">&#x27;print  $var&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">testdooubb</span><br><span class=\"line\">shell <span class=\"string\">&quot;script&quot;</span> dooubb</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"variable\">$var</span></span><br><span class=\"line\">使用变量</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">dooubb</span><br><span class=\"line\">dooubb</span><br></pre></td></tr></table></figure>\n\n<p>加花括号是为了帮助解释器识别变量的边界</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=dooubb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果--&gt;&#x27;</span><span class=\"variable\">$vartest</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果--&gt;&#x27;</span><span class=\"variable\">$&#123;var&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">解释器会将vartest当成一个变量，所以输出结果为空，并不是咱们期望的dooubbtest</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">结果--&gt;</span><br><span class=\"line\">结果--&gt;dooubb</span><br><span class=\"line\">变量重新赋值</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">tom</span><br><span class=\"line\">jack</span><br><span class=\"line\">只读变量,无法修改变量值</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">readonly</span> var_name</span><br><span class=\"line\">var_name=<span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">shell.sh: line 4: var_name: <span class=\"built_in\">readonly</span> variable</span><br><span class=\"line\">删除变量</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> var_name</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;结果-&gt;&#x27;</span><span class=\"variable\">$var_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">结果-&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p><code>定义数数组</code></p>\n<p>使用()来表示数组，数组中的元素使用空格来分开</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\">array_2=(</span><br><span class=\"line\">    doubao </span><br><span class=\"line\">    dooub </span><br><span class=\"line\">    dooubb</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_1-&gt;&#x27;</span><span class=\"variable\">$&#123;array_1[@]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_2-&gt;&#x27;</span><span class=\"variable\">$&#123;array_2[@]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">array_1-&gt;doubao dooub dooubb</span><br><span class=\"line\">array_2-&gt;doubao dooub dooubb</span><br></pre></td></tr></table></figure>\n\n<p>数组名[@]可以获取数组中所有的元素</p>\n<p><code>使用数组下标访问数组元素</code></p>\n<p>下标从0开始</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;array_1-&gt;&#x27;</span><span class=\"variable\">$&#123;array_1[1]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">array_1-&gt;dooub</span><br><span class=\"line\">获取数组的长度</span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">array_1=(doubao dooub dooubb)</span><br><span class=\"line\"><span class=\"comment\"># 取得数组元素的个数</span></span><br><span class=\"line\">length_1=<span class=\"variable\">$&#123;#array_1[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">length_2=<span class=\"variable\">$&#123;#array_1[*]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 取得数组单个元素的长度(默认取0下标的数组元素的长度) #array_1[2][n]  表示取数组第二个下标的数组元素的长度</span></span><br><span class=\"line\">lengthn=<span class=\"variable\">$&#123;#array_1[n]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length_1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length_2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$lengthn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h1><p><code>在执行shell脚本时，想脚本中传递参数</code></p>\n<p>shell脚本内获取参数的格式 $n , n表示数字，1表示执行shell脚本后面跟的第一个参数，2表示执行shell脚本后面跟的第二个参数，以此类推。。</p>\n<p>其中 <strong>$0</strong> 为执行的文件名（包含文件路径）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Shell 传递参数测试！&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行的文件名：<span class=\"variable\">$0</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第一个参数为：<span class=\"variable\">$1</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第二个参数为：<span class=\"variable\">$2</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第三个参数为：<span class=\"variable\">$3</span>&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行操作</span></span><br><span class=\"line\">sh shell.sh a b c </span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">Shell 传递参数测试！</span><br><span class=\"line\">执行的文件名：shell.sh</span><br><span class=\"line\">第一个参数为：a</span><br><span class=\"line\">第二个参数为：b</span><br><span class=\"line\">第三个参数为：c</span><br><span class=\"line\">几个特殊字符用来处理参数</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数处理</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$#</td>\n<td align=\"left\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$$</td>\n<td align=\"left\">脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$!</td>\n<td align=\"left\">后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$-</td>\n<td align=\"left\">显示Shell使用的当前选项，与set命令功能相同。</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Shell 传递参数测试！&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;执行的文件名：<span class=\"variable\">$1</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第一个参数为：<span class=\"variable\">$2</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第二个参数为：<span class=\"variable\">$3</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;第三个参数为：<span class=\"variable\">$4</span>&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;参数个数为：<span class=\"variable\">$#</span>&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;传递的参数作为一个字符串显示：$*&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行命令</span></span><br><span class=\"line\">sh shell.sh a b c d</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">Shell 传递参数测试！</span><br><span class=\"line\">执行的文件名：a</span><br><span class=\"line\">第一个参数为：b</span><br><span class=\"line\">第二个参数为：c</span><br><span class=\"line\">第三个参数为：d</span><br><span class=\"line\">参数个数为：4</span><br><span class=\"line\">传递的参数作为一个字符串显示：a b c d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a><code>算数运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法[需要在<em>前面加*<em>反斜杠</em></em>]</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">除法</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取余</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">赋值</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;&#x3D;</td>\n<td align=\"left\">相等。用于比较两个数字，相同则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">不相等。用于比较两个数字，不相同则返回 true。</td>\n</tr>\n</tbody></table>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span>            </span><br><span class=\"line\">var1=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> + <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var2=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> - <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var3=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> \\* <span class=\"variable\">$b</span>`</span><br><span class=\"line\">var4=`<span class=\"built_in\">expr</span> <span class=\"variable\">$b</span> / <span class=\"variable\">$a</span>`</span><br><span class=\"line\">var5=`<span class=\"built_in\">expr</span> <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a == b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a != b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t\t  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a+b-&gt;&gt;&#x27;</span><span class=\"variable\">$var1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a-b-&gt;&gt;&#x27;</span><span class=\"variable\">$var2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a*b-&gt;&gt;&#x27;</span><span class=\"variable\">$var3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a/b-&gt;&gt;&#x27;</span><span class=\"variable\">$var4</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;expr a=b-&gt;&gt;&#x27;</span><span class=\"variable\">$var5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh 10 20</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a != b</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a+b-&gt;&gt;30</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a-b-&gt;&gt;-10</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a*b-&gt;&gt;200</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a/b-&gt;&gt;2</span><br><span class=\"line\"><span class=\"built_in\">expr</span> a=b-&gt;&gt;0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a><code>关系运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">检测两个数是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">检测两个数是否不相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n</tr>\n</tbody></table>\n<hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span>: a 不大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span>: a 不小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 大于或等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -ge <span class=\"variable\">$b</span>: a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 小于或等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> -le <span class=\"variable\">$b</span>: a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh 10 20</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">10 -eq 20: a 不等于 b</span><br><span class=\"line\">10 -ne 20: a 不等于 b</span><br><span class=\"line\">10 -gt 20: a 不大于 b</span><br><span class=\"line\">10 -lt 20: a 小于 b</span><br><span class=\"line\">10 -ge 20: a 小于 b</span><br><span class=\"line\">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a><code>布尔运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">!</td>\n<td align=\"left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">或运算，有一个表达式为 true 则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">与运算，两个表达式都为 true 才返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a><code>逻辑运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑的 AND</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑的 OR</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a><code>字符串运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">检测两个字符串是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">检测两个字符串是否不相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-z</td>\n<td align=\"left\">检测字符串长度是否为0，为0返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">检测字符串长度是否不为 0，不为 0 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">检测字符串是否不为空，不为空返回 true。</td>\n</tr>\n</tbody></table>\n<h2 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a><code>文件测试运算符</code></h2><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td align=\"left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td align=\"left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td align=\"left\">检测文件是否是目录，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td align=\"left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td align=\"left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td align=\"left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td align=\"left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td align=\"left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td align=\"left\">检测文件是否可读，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td align=\"left\">检测文件是否可写，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td align=\"left\">检测文件是否可执行，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td align=\"left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td align=\"left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n</tr>\n</tbody></table>\n<h1 id=\"常用的流程控制\"><a href=\"#常用的流程控制\" class=\"headerlink\" title=\"常用的流程控制\"></a>常用的流程控制</h1><h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a><code>if else</code></h3><p>if else 的 <strong>[…]</strong> 判断语句中大于使用 <strong>-gt</strong>，小于使用 <strong>-lt</strong>。</p>\n<p>如果使用 <strong>((…))</strong> 作为判断语句，大于和小于可以直接使用 <strong>&gt;</strong> 和 **&lt;**。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> -gt <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span> ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &gt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &lt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-------&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> ));</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &gt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a &lt; b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh  12 13</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">a &lt; b</span><br><span class=\"line\">-------</span><br><span class=\"line\">a &lt; b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" class=\"headerlink\" title=\"if else-if else\"></a><code>if else-if else</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=<span class=\"variable\">$1</span></span><br><span class=\"line\">b=<span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有符合的条件&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;---------&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 大于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &lt; <span class=\"variable\">$b</span> ))</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 小于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有符合的条件&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令和执行结果</span></span><br><span class=\"line\">sh shell.sh 2 4</span><br><span class=\"line\">a 小于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 小于 b</span><br><span class=\"line\">sh shell.sh 2 2</span><br><span class=\"line\">a 等于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 等于 b</span><br><span class=\"line\">sh shell.sh 2 1</span><br><span class=\"line\">a 大于 b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a 大于 b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a><code>for 循环</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;The value is: <span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入命令</span></span><br><span class=\"line\">sh shell.sh</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">The value is: 1</span><br><span class=\"line\">The value is: 2</span><br><span class=\"line\">The value is: 3</span><br><span class=\"line\">The value is: 4</span><br><span class=\"line\">The value is: 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a><code>while 语句</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">int=1</span><br><span class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></span><br><span class=\"line\">    <span class=\"comment\">#自加</span></span><br><span class=\"line\">    <span class=\"built_in\">let</span> <span class=\"string\">&quot;int++&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行命令</span></span><br><span class=\"line\">sh shell.sh</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a><code>死循环</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式一</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#方式二</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#方式三</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入-x2F-输出重定向\"><a href=\"#输入-x2F-输出重定向\" class=\"headerlink\" title=\"输入&#x2F;输出重定向\"></a>输入&#x2F;输出重定向</h1><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table>\n<h2 id=\"输出重定向\"><a href=\"#输出重定向\" class=\"headerlink\" title=\"输出重定向\"></a>输出重定向</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将ls展示的信息输入到a.txt文件中</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> &gt; a.txt</span><br><span class=\"line\"><span class=\"comment\">#查看a.txt内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt </span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">shell.sh</span><br></pre></td></tr></table></figure>\n\n<p>输出重定向会覆盖文件内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> b.txt</span><br><span class=\"line\"><span class=\"built_in\">ls</span> &gt; a.txt</span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果不想覆盖文件内容，可以使用追加到文件末尾</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;追加文件末尾&#x27;</span> &gt;&gt; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br><span class=\"line\">追加文件末尾</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重定向深入讲解\"><a href=\"#重定向深入讲解\" class=\"headerlink\" title=\"重定向深入讲解\"></a>重定向深入讲解</h2><p>一般情况下，每个 Unix&#x2F;Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>\n</ul>\n<p>几个基本符号及其含义</p>\n<ul>\n<li>&#x2F;dev&#x2F;null 表示空设备文件</li>\n<li>0 表示 stdin 标准输入</li>\n<li>1 表示 stdout 标准输出</li>\n<li>2 表示 stderr 标准错误</li>\n</ul>\n<blockquote>\n<p>使用 “2&gt; ” 符号，将标准错误输出重定向到文件中。形式为：命令 2&gt; 文件名</p>\n<p>使用 “2&gt;&gt; ” 符号，将标准错误输出追加到指定文件后面。形式为：命令 2&gt;&gt; 文件名</p>\n<p>使用 “2&gt;&amp;1 ” 符号或 “ &amp;&gt; ” 符号，将把标准错误输出 stderr 重定向到标准输出 stdout</p>\n<p>使用 “&gt;&#x2F;dev&#x2F;null” 符号，将命令执行结果重定向到空设备中，也就是不显示任何信息。</p>\n</blockquote>\n<h2 id=\"Here-Document\"><a href=\"#Here-Document\" class=\"headerlink\" title=\"Here Document\"></a>Here Document</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; <span class=\"string\">delimiter[一般都是EOF]</span></span><br><span class=\"line\"><span class=\"string\">    document</span></span><br><span class=\"line\"><span class=\"string\">delimiter</span>[EOF]</span><br></pre></td></tr></table></figure>\n\n<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>\n<li>开始的delimiter前后的空格会被忽略掉。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt;&gt; a.txt &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">\t测试Here Document</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> a.txt</span><br><span class=\"line\"><span class=\"comment\">#输出结果</span></span><br><span class=\"line\">a.txt</span><br><span class=\"line\">b.txt</span><br><span class=\"line\">shell.sh</span><br><span class=\"line\">追加文件末尾</span><br><span class=\"line\">测试Here Document</span><br></pre></td></tr></table></figure>\n\n","categories":["Shell"],"tags":["Shell"]},{"title":"k8s基础","url":"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/","content":"<h2 id=\"k8s设计架构\"><a href=\"#k8s设计架构\" class=\"headerlink\" title=\"k8s设计架构\"></a>k8s设计架构</h2><p>Kubernetes集群包含有节点代理kubelet和Master组件(APIs, scheduler, etc)，一切都基于分布式的存储系统。下面这张图是Kubernetes的架构图。</p>\n<img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/architecture.png\" class title=\"architecture.png\">\n\n<hr>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>在这张系统架构图中，我们把服务分为运行在工作节点上的服务和组成集群级别控制板的服务。</p>\n<p>Kubernetes节点有运行应用容器必备的服务，而这些都是受Master的控制。</p>\n<p>每次个节点上当然都要运行Docker。Docker来负责所有具体的映像下载和容器运行。</p>\n<p>Kubernetes主要由以下几个核心组件组成：</p>\n<ul>\n<li><p>etcd保存了整个集群的状态；</p>\n</li>\n<li><p>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</p>\n</li>\n<li><p>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</p>\n</li>\n<li><p>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</p>\n</li>\n<li><p>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</p>\n</li>\n<li><p>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；</p>\n</li>\n<li><p>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/k8s-architecture.png\" class title=\"k8s-architecture\">\n\n<hr>\n<img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/1619075196642.png\" class title=\"1619075196642.png\">\n\n<h2 id=\"原理分解\"><a href=\"#原理分解\" class=\"headerlink\" title=\"原理分解\"></a>原理分解</h2><p><img src=\"/k8s%E5%9F%BA%E7%A1%80/k8s-master.png\" alt=\"k8s-master.png\"></p>\n<hr>\n<img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/k8s-node.png\" class title=\"k8s-node.png\">\n\n<hr>\n<h2 id=\"组件交互原理\"><a href=\"#组件交互原理\" class=\"headerlink\" title=\"组件交互原理\"></a>组件交互原理</h2><img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/1619076211983.png\" class width=\"1619076211983\">\n\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">想让k8s部署一个tomcat?</span><br><span class=\"line\"></span><br><span class=\"line\">0、开机默认所有节点的kubelet、master节点的scheduler（调度器）、controller-manager（控制管理器）一直监听master的api-server发来的事件变化（for ::）</span><br><span class=\"line\"></span><br><span class=\"line\">1、程序员使用命令行工具： kubectl ； kubectl create deploy tomcat --image=tomcat8（告诉master让集群使用tomcat8镜像，部署一个tomcat应用）</span><br><span class=\"line\"></span><br><span class=\"line\">2、kubectl命令行内容发给api-server，api-server保存此次创建信息到etcd</span><br><span class=\"line\"></span><br><span class=\"line\">3、etcd给api-server上报事件，说刚才有人给我里面保存一个信息。（部署Tomcat[deploy]）</span><br><span class=\"line\"></span><br><span class=\"line\">4、controller-manager监听到api-server的事件，是 （部署Tomcat[deploy]）</span><br><span class=\"line\"></span><br><span class=\"line\">5、controller-manager 处理这个 （部署Tomcat[deploy]）的事件。controller-manager会生成Pod的部署信息【pod信息】</span><br><span class=\"line\"></span><br><span class=\"line\">6、controller-manager 把Pod的信息交给api-server，再保存到etcd</span><br><span class=\"line\"></span><br><span class=\"line\">7、etcd上报事件【pod信息】给api-server。</span><br><span class=\"line\"></span><br><span class=\"line\">8、scheduler专门监听 【pod信息】 ，拿到 【pod信息】的内容，计算，看哪个节点合适部署这个Pod【pod调度过后的信息（node: node-02）】，</span><br><span class=\"line\"></span><br><span class=\"line\">9、scheduler把 【pod调度过后的信息（node: node-02）】交给api-server保存给etcd</span><br><span class=\"line\"></span><br><span class=\"line\">10、etcd上报事件【pod调度过后的信息（node: node-02）】，给api-server</span><br><span class=\"line\"></span><br><span class=\"line\">11、其他节点的kubelet专门监听 【pod调度过后的信息（node: node-02）】 事件，集群所有节点kubelet从api-server就拿到了 【pod调度过后的信息（node: node-02）】 事件</span><br><span class=\"line\"></span><br><span class=\"line\">12、每个节点的kubelet判断是否属于自己的事情；node-02的kubelet发现是他的事情</span><br><span class=\"line\"></span><br><span class=\"line\">13、node-02的kubelet启动这个pod。汇报给master当前启动好的所有信息</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"分层架构\"><a href=\"#分层架构\" class=\"headerlink\" title=\"分层架构\"></a>分层架构</h2><p>Kubernetes设计理念和功能其实就是一个类似Linux的分层架构，如下图所示</p>\n<img src=\"/2022/08/11/k8s/K8S%E5%9F%BA%E7%A1%80/14937095836427.jpg\" class title=\"14937095836427.jpg\">\n\n<ul>\n<li>核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境</li>\n<li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）</li>\n<li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）</li>\n<li>接口层：kubectl命令行工具、客户端SDK以及集群联邦</li>\n<li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴<ul>\n<li>Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等</li>\n<li>Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li>\n</ul>\n</li>\n</ul>\n","categories":["K8S"],"tags":["K8S"]},{"title":"JavaClassLoader","url":"/2022/08/11/java/JavaClassLoader/","content":"<h1 id=\"类加载运行全过程\"><a href=\"#类加载运行全过程\" class=\"headerlink\" title=\"类加载运行全过程\"></a>类加载运行全过程</h1><p>当使用java命令运行某个类的main函数时，首先需要通过<strong>类加载器</strong>把类加载到<strong>JVM</strong>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fanq.entity.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Math</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">initData</span> <span class=\"operator\">=</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compute</span><span class=\"params\">()</span> &#123;  <span class=\"comment\">//一个方法对应一块栈帧内存区域</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (a + b) * <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Math</span> <span class=\"variable\">math</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Math</span>();</span><br><span class=\"line\">        math.compute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"通过java执行大体流程如下图\"><a href=\"#通过java执行大体流程如下图\" class=\"headerlink\" title=\"通过java执行大体流程如下图\"></a>通过java执行大体流程如下图</h2><img src=\"/2022/08/11/java/JavaClassLoader/image-20210411133245285.png\" class title=\"image-20210411133245285\">\n\n<h2 id=\"loadClass的类加载过程\"><a href=\"#loadClass的类加载过程\" class=\"headerlink\" title=\"loadClass的类加载过程\"></a>loadClass的类加载过程</h2><p> <strong>加载-&gt;&gt;验证-&gt;&gt;准备-&gt;&gt;解析-&gt;&gt;初始化-&gt;&gt;使用-&gt;&gt;卸载</strong></p>\n<ul>\n<li>加载：在硬盘上通过IO读入字节码文件，使用类时才会加载类。例如在调用类的main函数，new对象等等。在加载阶段会在内存中生成一个Class对象，作为方法区这个类的各种数据的访问入口(对于程序员来操作类，通过反射)</li>\n<li>验证：检验字节码文件的正确性(java的字节码文件开头有cafe babe)</li>\n<li>准备：给类的静态变量分配内存，并且赋予默认值</li>\n<li>解析：将符号引用替换为直接引用，该阶段会把一些静态方法(也就是符号引用，例如main方法替换为指向数据所存内存的指针或者句柄等[直接引用]，这就是所谓的静态链接过程[类加载期间完成]。动态链接实在程序运行期间完成的，是将符号引用替换为直接引用)</li>\n<li>初始化：对类的静态变量初始化为指定的值，执行静态代码块</li>\n</ul>\n<img src=\"/2022/08/11/java/JavaClassLoader/clipboard-1618120939613.png\" class title=\"img\">\n\n\n\n<p>类被加载到方法区后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应class实例的引用</strong>等信息。</p>\n<p><strong>类加载器的引用</strong>：这个类的类加载器实例的引用</p>\n<p><strong>对应class实例的引用</strong>：类加载器在加载类信息放到方法区后，会创建一个对应类的Class类型的对象实例放到堆中，为了开发人员可以访问方法区中类的信息</p>\n<p><font size=\"3\" color=\"red\">注</font></p>\n<blockquote>\n<p>主类在运行的过程中如果使用到其他类，会逐步的加载这些类。jar和war里面的类不是一次性全部加载的，都是使用的时候才会加载对应的类</p>\n</blockquote>\n<h1 id=\"类加载器和双亲委派机制\"><a href=\"#类加载器和双亲委派机制\" class=\"headerlink\" title=\"类加载器和双亲委派机制\"></a>类加载器和双亲委派机制</h1><h2 id=\"java中的类加载器\"><a href=\"#java中的类加载器\" class=\"headerlink\" title=\"java中的类加载器\"></a>java中的类加载器</h2><p>上面的类加载过程都是通过类加载器来完成的。java中有如下几种类加载器</p>\n<ul>\n<li>引导类加载器：负责加载支撑JVM运行的位于jre的lib目录下的核心类库。例如rt.jar和charsets.jar等</li>\n<li>扩展类加载器：负责加载支撑JVM运行的位于jre的lib目录下的ext扩展目录中的jar。</li>\n<li>应用类加载器：负责加载classpath路径下的类，主要就是加载自己写的那些类</li>\n<li>自定义类加载器：负责加载用户自定义路径下的类</li>\n</ul>\n<p>测试代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq.jvm;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Launcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestJDKClassLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">        System.out.println(com.sun.crypto.provider.DESKeyFactory.class.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(TestJDKClassLoader.class.getClassLoader().getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">appClassLoader</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">extClassloader</span> <span class=\"operator\">=</span> appClassLoader.getParent();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">bootstrapLoader</span> <span class=\"operator\">=</span> extClassloader.getParent();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the bootstrapLoader : &quot;</span> + bootstrapLoader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the extClassloader : &quot;</span> + extClassloader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the appClassLoader : &quot;</span> + appClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bootstrapLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        URL[] urls = Launcher.getBootstrapClassPath().getURLs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; urls.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(urls[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;extClassloader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.ext.dirs&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;appClassLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">sun.misc.Launcher$ExtClassLoader</span><br><span class=\"line\">sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">the bootstrapLoader : <span class=\"literal\">null</span></span><br><span class=\"line\">the extClassloader : sun.misc.Launcher$ExtClassLoader@29453f44</span><br><span class=\"line\">the appClassLoader : sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class=\"line\"></span><br><span class=\"line\">bootstrapLoader加载以下文件：</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/resources.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/rt.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/sunrsasign.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jsse.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jce.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/charsets.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/lib/jfr.jar</span><br><span class=\"line\">file:/C:/Program%20Files/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>/jre/classes</span><br><span class=\"line\"></span><br><span class=\"line\">extClassloader加载以下文件：</span><br><span class=\"line\">C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext;C:\\WINDOWS\\Sun\\Java\\lib\\ext</span><br><span class=\"line\"></span><br><span class=\"line\">appClassLoader加载以下文件：</span><br><span class=\"line\">C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\deploy.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\access-bridge-<span class=\"number\">64.</span>jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\cldrdata.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\dnsns.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\jaccess.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\jfxrt.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\localedata.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\nashorn.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunec.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunjce_provider.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunmscapi.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\sunpkcs11.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\ext\\zipfs.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\javaws.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jfxswt.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\management-agent.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\plugin.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_181</span>\\jre\\lib\\rt.jar;G:\\demo\\demo\\target\\classes;G:\\develop\\Maven\\repository\\org\\openjdk\\jol\\jol-core\\<span class=\"number\">0.9</span>\\jol-core-<span class=\"number\">0.9</span>.jar;G:\\develop\\IntelliJ IDEA <span class=\"number\">2020.3</span><span class=\"number\">.3</span>\\lib\\idea_rt.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类加载器初始化过程\"><a href=\"#类加载器初始化过程\" class=\"headerlink\" title=\"类加载器初始化过程\"></a>类加载器初始化过程</h2><p>参见类加载全过程流程图可知，会创建JVM启动器实例sun.misc.Launcher。</p>\n<p>在Launcher类中构造方法内部，创建了两个类加载器，分别是sun.misc.Launcher.ExtClassLoader(扩展类加载器)和sun.misc.Launcher.AppClassLoader(应用类加载器)。</p>\n<p>JVM默认使用Launcher的getClassLoader()方法返回的类加载器AppClassLoader的实例加载我们的应用程序。</p>\n<p>jdk源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Launcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       Launcher.ExtClassLoader var1;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//构造扩展类加载器。在构造得过程中将其父类加载器属性设置为null</span></span><br><span class=\"line\">           var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException var10) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create extension class loader&quot;</span>, var10);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//构造应用类加载器。在构造的过程中将其父类加载器属性设置为ExtClassLoader</span></span><br><span class=\"line\">           <span class=\"comment\">//Launcher的loader属性值是AppClassLoader，我们都是使用这个类加载器来加载我们自己下的类</span></span><br><span class=\"line\">           <span class=\"built_in\">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException var9) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create application class loader&quot;</span>, var9);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       Thread.currentThread().setContextClassLoader(<span class=\"built_in\">this</span>.loader);</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.security.manager&quot;</span>);</span><br><span class=\"line\">       。。。。。。。其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>JVM类加载器是有父子层级结构关系的，如下图</p>\n<img src=\"/2022/08/11/java/JavaClassLoader/clipboard-1618123296065.png\" class title=\"img\">\n\n<p>类的加载其实就是一个双亲委派机制，加载某个类的时候会先请求父类加载器去寻找加载目标，找不到在继续委托上层父类加载器加载，如果父类加载器在自己加载的路径下找到目标类，就加载目标类，反之如果所有的父类加载器都在自己加载的路径下找不到目标类，那么就会向下退回加载请求，那么扩展类加载器就会自己加载，如果扩展类加载器找不到就会继续回退到应用类加载器加载。。。</p>\n<p><font size=\"3\" color=\"red\">通俗的说就是</font></p>\n<blockquote>\n<p>双亲委派机制就是有类加载就先找父类，父类不行，就再由自己加载</p>\n</blockquote>\n<h2 id=\"源码体现\"><a href=\"#源码体现\" class=\"headerlink\" title=\"源码体现\"></a>源码体现</h2><p>应用程序类加载器AppClassLoader加载器的双亲委派机制源码，最终实在父类ClassLoader中的loadClass方法，里面实现了双亲委派机制，大体逻辑如下</p>\n<ul>\n<li>首先检查一下当前类是否被加载过，加载过了就直接返回。</li>\n<li>如果类没有被加载过，那么先判断有没有父类加载器，有就委托给父类加载器，没有父类就指定为引导类加载器(bootstrap)来加载。</li>\n<li>如果父类或者bootstrap类加载器都没有加载到目标类，那么就调用当前类加载器中的findClass方法来完成加载(ClassLoader中的findClass为空实现，目地就是为了子类来实现具体的加载方式)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            <span class=\"comment\">// 先检查有没有被加载过</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 再检查有没有父类加载器</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 有父类就委托父类加载器加载</span></span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 没有父类加载器就使用bootstrap引导类加载器加载</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果父类和bootstrap类加载器都没有加载到</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    <span class=\"comment\">// 调用当前类加载器的findClass方法。ClassLoader中的findClass是空实现，所以会调用当前子类中的findClass实现</span></span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要设计双亲委派机制？\"><a href=\"#为什么要设计双亲委派机制？\" class=\"headerlink\" title=\"为什么要设计双亲委派机制？\"></a>为什么要设计双亲委派机制？</h2><ul>\n<li>沙箱安全机制：自己写的java.lang.String类不会被加载，这样可以防止java中的核心类库不会被随意的篡改</li>\n<li>避免类的重复加载：当父类已经加载了该类时，子类加载器就没有必要在加载一次了。保证了类只会被加载一次。</li>\n</ul>\n<p>代码验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************My String Class**************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果</span><br><span class=\"line\">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br></pre></td></tr></table></figure>\n\n<p><strong>全盘负责委托机制</strong></p>\n<p>全盘负责是指当一个类加载器加载一个类的时候，除非显示的使用另一个类加载器，不然改类所依赖的及其引用的类也有这个类加载来加载。</p>\n<h1 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a>自定义类加载器</h1><p>上面提到<strong>ClassLoader</strong>中的<strong>loadClass</strong>方法实现了双亲委派，还有一个<strong>findClass</strong>空实现。这是自定义类加载器的两个核心方法。所以我们要继承ClassLoader，然后重写findClass方法</p>\n<h2 id=\"实现双亲委派机制\"><a href=\"#实现双亲委派机制\" class=\"headerlink\" title=\"实现双亲委派机制\"></a>实现双亲委派机制</h2><p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.fanq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoaderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String classPath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">MyClassLoader</span><span class=\"params\">(String classPath)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.classPath = classPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] loadByte(String name) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            name = name.replaceAll(<span class=\"string\">&quot;\\\\.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(classPath + <span class=\"string\">&quot;/&quot;</span> + name</span><br><span class=\"line\">                    + <span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> fis.available();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[len];</span><br><span class=\"line\">            fis.read(data);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] data = loadByte(name);</span><br><span class=\"line\">                <span class=\"comment\">//defineClass将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(name, data, <span class=\"number\">0</span>, data.length);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化自定义类加载器，过程中会把自定义类加载器的父加载器设置为应用程序类加载器AppClassLoader</span></span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>(<span class=\"string\">&quot;G:/test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//G盘创建 test/com/fanq/jvm 几级目录，将一个类的class文件放在目录下</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.fanq.jvm.User1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">        <span class=\"comment\">//通过反射来调用print方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(<span class=\"string\">&quot;print&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        method.invoke(obj, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(clazz.getClassLoader().getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\">================自定义类加载器=================</span><br><span class=\"line\">com.fanq.MyClassLoaderTest$MyClassLoader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打破双亲委派机制\"><a href=\"#打破双亲委派机制\" class=\"headerlink\" title=\"打破双亲委派机制\"></a>打破双亲委派机制</h2><p>打破双亲委派机制就是要重新ClassLoader中的loadClass方法</p>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoaderTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String classPath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">MyClassLoader</span><span class=\"params\">(String classPath)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.classPath = classPath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] loadByte(String name) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            name = name.replaceAll(<span class=\"string\">&quot;\\\\.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(classPath + <span class=\"string\">&quot;/&quot;</span> + name</span><br><span class=\"line\">                    + <span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> fis.available();</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] data = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[len];</span><br><span class=\"line\">            fis.read(data);</span><br><span class=\"line\">            fis.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 重写类加载方法，实现自己的加载逻辑，不委派给双亲加载</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> name 包名</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> resolve</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@throws</span> ClassNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">                <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">                Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    <span class=\"comment\">//打破双亲委派机制,自定义的包名走自定义的类加载器</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">&quot;com.fanq.jvm&quot;</span>))&#123;</span><br><span class=\"line\">                        c = <span class=\"built_in\">this</span>.getParent().loadClass(name);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findClass(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                    resolveClass(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] data = loadByte(name);</span><br><span class=\"line\">                <span class=\"comment\">//defineClass将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(name, data, <span class=\"number\">0</span>, data.length);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化自定义类加载器，过程中会把自定义类加载器的父加载器设置为应用程序类加载器AppClassLoader</span></span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>(<span class=\"string\">&quot;G:/test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//G盘创建 test/com/fanq/jvm 几级目录，将一个类的class文件放在目录下</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.fanq.jvm.User1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">        <span class=\"comment\">//通过反射来调用print方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(<span class=\"string\">&quot;print&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        method.invoke(obj, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(clazz.getClassLoader().getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">运行结果</span><br><span class=\"line\">================自定义类加载器=================</span><br><span class=\"line\">com.fanq.MyClassLoaderTest$MyClassLoader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可以使用自定义加载器加载java-lang-String么\"><a href=\"#可以使用自定义加载器加载java-lang-String么\" class=\"headerlink\" title=\"可以使用自定义加载器加载java.lang.String么\"></a>可以使用自定义加载器加载java.lang.String么</h2><p>不可以，因为类加载器最终都会调用defineClass方法，defineClass方法中有preDefineClass方法校验。ClassLoader中的preDefineClass方法源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ProtectionDomain <span class=\"title function_\">preDefineClass</span><span class=\"params\">(String name,</span></span><br><span class=\"line\"><span class=\"params\">                                        ProtectionDomain pd)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkName(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoClassDefFoundError</span>(<span class=\"string\">&quot;IllegalName: &quot;</span> + name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note:  Checking logic in java.lang.invoke.MemberName.checkForTypeAlias</span></span><br><span class=\"line\">    <span class=\"comment\">// relies on the fact that spoofing is impossible if a class has a name</span></span><br><span class=\"line\">    <span class=\"comment\">// of the form &quot;java.*&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//以java.开头的包名都不可以被加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((name != <span class=\"literal\">null</span>) &amp;&amp; name.startsWith(<span class=\"string\">&quot;java.&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecurityException</span></span><br><span class=\"line\">            (<span class=\"string\">&quot;Prohibited package name: &quot;</span> +</span><br><span class=\"line\">             name.substring(<span class=\"number\">0</span>, name.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pd == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        pd = defaultDomain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"literal\">null</span>) checkCerts(name, pd.getCodeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>补充：Hotspot源码JVM启动执行main方法流程</strong></p>\n<img src=\"/2022/08/11/java/JavaClassLoader/hotspot%E6%BA%90%E7%A0%81jvm%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8Cmain%E6%96%B9%E6%B3%95%E6%B5%81%E7%A8%8B.jpg\" class title=\"img\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["JVM"]},{"title":"k8s基础概念","url":"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/","content":"<h1 id=\"Kubernetes-组件\"><a href=\"#Kubernetes-组件\" class=\"headerlink\" title=\"Kubernetes 组件\"></a>Kubernetes 组件</h1><img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815222135791.png\" class title=\"image-20220815222135791\">\n\n<p><strong>Master节点</strong></p>\n<p>Master节点是集群的控制节点，由API Server、Scheduler、Controller Manager和ETCD四个组件构成。</p>\n<ul>\n<li>API Server：各组件互相通讯的中转站，接受外部请求，并将信息写到ETCD中。</li>\n<li>Controller Manager：执行集群级功能，例如复制组件，跟踪Node节点，处理节点故障等等。</li>\n<li>Scheduler：负责应用调度的组件，根据各种条件（如可用的资源、节点的亲和性等）将容器调度到Node上运行。</li>\n<li>ETCD：一个分布式数据存储组件，负责存储集群的配置信息。</li>\n</ul>\n<p>在生产环境中，为了保障集群的高可用，通常会部署多个master，如CCE的集群高可用模式就是3个master节点。</p>\n<p><strong>Node节点</strong></p>\n<p>Node节点是集群的计算节点，即运行容器化应用的节点。</p>\n<ul>\n<li>kubelet：kubelet主要负责同Container Runtime打交道，并与API Server交互，管理节点上的容器。</li>\n<li>kube-proxy：应用组件间的访问代理，解决节点上应用的访问问题。</li>\n<li>Container Runtime：容器运行时，如Docker，最主要的功能是下载镜像和运行容器。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"Kubernetes的扩展性\"><a href=\"#Kubernetes的扩展性\" class=\"headerlink\" title=\"Kubernetes的扩展性\"></a>Kubernetes的扩展性</h1><p>Kubernetes开放了容器运行时接口（CRI）、容器网络接口（CNI）和容器存储接口（CSI），这些接口让Kubernetes的扩展性变得最大化，而Kubernetes本身则专注于容器调度。</p>\n<ul>\n<li>CRI（Container Runtime Interface）：容器运行时接口，提供计算资源，CRI隔离了各个容器引擎之间的差异，而通过统一的接口与各个容器引擎之间进行互动。</li>\n<li>CNI（Container Network Interface）：容器网络接口，提供网络资源，通过CNI接口，Kubernetes可以支持不同网络环境。</li>\n<li>CSI（Container Storage Interface）：容器存储接口，提供存储资源，通过CSI接口，Kubernetes可以支持各种类型的存储。</li>\n</ul>\n<h1 id=\"Kubernetes中的基本对象\"><a href=\"#Kubernetes中的基本对象\" class=\"headerlink\" title=\"Kubernetes中的基本对象\"></a>Kubernetes中的基本对象</h1><img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815222237485.png\" class title=\"image-20220815222237485\">\n\n<ul>\n<li><p>Pod</p>\n<p>Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（container）、存储资源（volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。</p>\n</li>\n<li><p>Deployment</p>\n<p>Deployment是对Pod的服务化封装。一个Deployment可以包含一个或多个Pod，每个Pod的角色相同，所以系统会自动为Deployment的多个Pod分发请求。</p>\n</li>\n<li><p>StatefulSet</p>\n<p>StatefulSet是用来管理有状态应用的对象。和Deployment相同的是，StatefulSet管理了基于相同容器定义的一组Pod。但和Deployment不同的是，StatefulSet为它们的每个Pod维护了一个固定的ID。这些Pod是基于相同的声明来创建的，但是不能相互替换，无论怎么调度，每个Pod都有一个永久不变的ID。</p>\n</li>\n<li><p>Job</p>\n<p>Job是用来控制批处理型任务的对象。批处理业务与长期伺服业务（Deployment）的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出（Pod自动删除）。</p>\n</li>\n<li><p>CronJob</p>\n<p>CronJob是基于时间控制的Job，类似于Linux系统的crontab，在指定的时间周期运行指定的任务。</p>\n</li>\n<li><p>DaemonSet</p>\n<p>DaemonSet是这样一种对象（守护进程），它在集群的每个节点上运行一个Pod，且保证只有一个Pod，这非常适合一些系统层面的应用，例如日志收集、资源监控等，这类应用需要每个节点都运行，且不需要太多实例，一个比较好的例子就是Kubernetes的kube-proxy。</p>\n</li>\n<li><p>Service</p>\n<p>Service是用来解决Pod访问问题的。Service有一个固定IP地址，Service将访问流量转发给Pod，而且Service可以给这些Pod做负载均衡。</p>\n</li>\n<li><p>Ingress</p>\n<p>Service是基于四层TCP和UDP协议转发的，Ingress可以基于七层的HTTP和HTTPS协议转发，可以通过域名和路径做到更细粒度的划分。</p>\n</li>\n<li><p>ConfigMap</p>\n<p>ConfigMap是一种用于存储应用所需配置信息的资源类型，用于保存配置数据的键值对。通过ConfigMap可以方便的做到配置解耦，使得不同环境有不同的配置。</p>\n</li>\n<li><p>Secret</p>\n<p>Secret是一种加密存储的资源对象，您可以将认证信息、证书、私钥等保存在Secret中，而不需要把这些敏感数据暴露到镜像或者Pod定义中，从而更加安全和灵活。</p>\n</li>\n<li><p>PersistentVolume（PV）</p>\n<p>PV指持久化数据存储卷，主要定义的是一个持久化存储在宿主机上的目录，比如一个NFS的挂载目录。</p>\n</li>\n<li><p>PersistentVolumeClaim（PVC）</p>\n<p>Kubernetes提供PVC专门用于持久化存储的申请，PVC可以让您无需关心底层存储资源如何创建、释放等动作，而只需要申明您需要何种类型的存储资源、多大的存储空间。</p>\n</li>\n</ul>\n<h1 id=\"Kubernetes对象的描述\"><a href=\"#Kubernetes对象的描述\" class=\"headerlink\" title=\"Kubernetes对象的描述\"></a>Kubernetes对象的描述</h1><p>kubernetes中资源可以使用YAML描述，也可以使用JSON。其内容可以分为如下四个部分：</p>\n<ul>\n<li>typeMeta：对象类型的元信息，声明对象使用哪个API版本，哪个类型的对象。</li>\n<li>objectMeta：对象的元信息，包括对象名称、使用的标签等。</li>\n<li>spec：对象的期望状态，例如对象使用什么镜像、有多少副本等。</li>\n<li>status：对象的实际状态，只能在对象创建后看到，创建对象时无需指定。</li>\n</ul>\n<h1 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h1><h2 id=\"Pod基础信息\"><a href=\"#Pod基础信息\" class=\"headerlink\" title=\"Pod基础信息\"></a>Pod基础信息</h2><p><strong><code>Kubernetes中的最小调度对象</code></strong></p>\n<p>Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（container）、存储资源（volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。</p>\n<p>Pod使用主要分为两种方式：</p>\n<ul>\n<li>Pod中运行一个容器。这是Kubernetes最常见的用法，您可以将Pod视为单个封装的容器，但是Kubernetes是直接管理Pod而不是容器。</li>\n<li>Pod中运行多个需要耦合在一起工作、需要共享资源的容器。通常这种场景下应用包含一个主容器和几个辅助容器（SideCar Container）。</li>\n</ul>\n<p>创建pod的yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                      <span class=\"comment\"># Kubernetes的API Version</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                           <span class=\"comment\"># Kubernetes的资源类型</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       <span class=\"comment\"># Pod的名称</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                               <span class=\"comment\"># Pod的具体规格（specification）</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span>             <span class=\"comment\"># 使用的镜像为 nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span>               <span class=\"comment\"># 容器的名称</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span>                      <span class=\"comment\"># 申请容器所需的资源</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span>                            <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">env_key</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">env_value</span>  </span><br><span class=\"line\">    <span class=\"attr\">command:</span>                     <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">top</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;-b&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span>                 <span class=\"comment\"># 启动后处理</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&quot;/postStart.sh&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">preStop:</span>                   <span class=\"comment\"># 停止前处理</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&quot;/preStop.sh&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span>                 <span class=\"comment\"># 拉取镜像使用的证书</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod-存活探针（Liveness-Probe）\"><a href=\"#Pod-存活探针（Liveness-Probe）\" class=\"headerlink\" title=\"Pod 存活探针（Liveness Probe）\"></a>Pod 存活探针（Liveness Probe）</h2><p>Kubernetes支持如下三种探测机制。</p>\n<ul>\n<li>HTTP GET：向容器发送HTTP GET请求，如果Probe收到2xx或3xx，说明容器是健康的。</li>\n<li>TCP Socket：尝试与容器指定端口建立TCP连接，如果连接成功建立，说明容器是健康的。</li>\n<li>Exec：Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明容器是健康的。</li>\n</ul>\n<h3 id=\"HTTP-GET\"><a href=\"#HTTP-GET\" class=\"headerlink\" title=\"HTTP GET\"></a>HTTP GET</h3><p>HTTP GET方式是最常见的探测方法，其具体机制是向容器发送HTTP GET请求，如果Probe收到2xx或3xx，说明容器是健康的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-http</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>\t\t\t\t <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>\t\t\t\t\t <span class=\"comment\"># HTTP GET定义</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>    <span class=\"comment\"># 容器启动后多久开始探测</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>          <span class=\"comment\"># 表示容器必须在2s内做出相应反馈给probe，否则视为探测失败</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span>          <span class=\"comment\"># 探测周期，每30s探测一次</span></span><br><span class=\"line\">      <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span>        <span class=\"comment\"># 连续探测1次成功表示成功</span></span><br><span class=\"line\">      <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span>        <span class=\"comment\"># 连续探测3次失败表示失败</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP-Socket\"><a href=\"#TCP-Socket\" class=\"headerlink\" title=\"TCP Socket\"></a>TCP Socket</h3><p>TCP Socket尝试与容器指定端口建立TCP连接，如果连接成功建立，说明容器是健康的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">test:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-tcp</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>           <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h3><p>Exec即执行具体命令，具体机制是Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明健康</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">test:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">liveness-exec</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">liveness</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/sh</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">touch</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">30</span><span class=\"string\">;</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">/tmp/healthy;</span> <span class=\"string\">sleep</span> <span class=\"number\">600</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>           <span class=\"comment\"># liveness probe</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span>                  <span class=\"comment\"># Exec定义</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod就绪探针（Readiness-Probe）\"><a href=\"#Pod就绪探针（Readiness-Probe）\" class=\"headerlink\" title=\"Pod就绪探针（Readiness Probe）\"></a>Pod就绪探针（Readiness Probe）</h2><p>Kubernetes支持如下三种类型。</p>\n<ul>\n<li>Exec：Probe执行容器中的命令并检查命令退出的状态码，如果状态码为0则说明已经就绪。</li>\n<li>HTTP GET：往容器的IP:Port发送HTTP GET请求，如果Probe收到2xx或3xx，说明已经就绪。</li>\n<li>TCP Socket：尝试与容器建立TCP连接，如果能建立连接说明已经就绪。</li>\n</ul>\n<h3 id=\"HTTP-GET-1\"><a href=\"#HTTP-GET-1\" class=\"headerlink\" title=\"HTTP GET\"></a>HTTP GET</h3><p>Readiness Probe的配置与<code>存活探针（livness probe）</code>一样，都是在Pod Template的containers里面，如下所示，这个Readiness Probe向Pod发送HTTP请求，当Probe收到2xx或3xx返回时，说明Pod已经就绪</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>           <span class=\"comment\"># readinessProbe</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span>                <span class=\"comment\"># HTTP GET定义</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/read</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">10</span>    <span class=\"comment\"># 容器启动后多久开始探测</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">2</span>          <span class=\"comment\"># 表示容器必须在2s内做出相应反馈给probe，否则视为探测失败</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span>          <span class=\"comment\"># 探测周期，每30s探测一次</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span>        <span class=\"comment\"># 连续探测1次成功表示成功</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span>        <span class=\"comment\"># 连续探测3次失败表示失败</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP-Socket-1\"><a href=\"#TCP-Socket-1\" class=\"headerlink\" title=\"TCP Socket\"></a>TCP Socket</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>             <span class=\"comment\"># readinessProbe</span></span><br><span class=\"line\">          <span class=\"attr\">tcpSocket:</span>                <span class=\"comment\"># TCP Socket定义</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Exec-1\"><a href=\"#Exec-1\" class=\"headerlink\" title=\"Exec\"></a>Exec</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span>      <span class=\"comment\"># Readiness Probe</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span>              <span class=\"comment\"># 定义 ls /ready 命令</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ls</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/ready</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h2><p><strong><code>组织Pod的利器: Kubernetes提供了一种机制来为资源分类，那就是Label（标签）</code></strong></p>\n<p>没有分类组织的Pod</p>\n<img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815225858369.png\" class title=\"image-20220815225858369\">\n\n<p>使用Label组织的Pod</p>\n<img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220815225949945.png\" class title=\"image-20220815225949945\">\n\n<h3 id=\"添加Label\"><a href=\"#添加Label\" class=\"headerlink\" title=\"添加Label\"></a>添加Label</h3><p>Label的形式为key-value形式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\"># 为Pod设置两个Label    </span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span>    </span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看Label\"><a href=\"#查看Label\" class=\"headerlink\" title=\"查看Label\"></a>查看Label</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改Label\"><a href=\"#修改Label\" class=\"headerlink\" title=\"修改Label\"></a>修改Label</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nginx是上面的pod的name</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">label</span> <span class=\"string\">pod</span> <span class=\"string\">nginx</span> <span class=\"string\">env=debug</span> <span class=\"string\">--overwrite</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Pod的编排与调度\"><a href=\"#Pod的编排与调度\" class=\"headerlink\" title=\"Pod的编排与调度\"></a>Pod的编排与调度</h1><h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>一个Deployment可以包含一个或多个Pod副本，每个Pod副本的角色相同，并且提供副本管理、滚动升级和自愈能力</p>\n<h3 id=\"Deployment的创建\"><a href=\"#Deployment的创建\" class=\"headerlink\" title=\"Deployment的创建\"></a>Deployment的创建</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> \t\t\t<span class=\"comment\"># 注意这里与Pod的区别，Deployment是apps/v1而不是v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span> \t\t\t\t<span class=\"comment\"># 资源类型为Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-web</span> \t\t\t\t<span class=\"comment\"># Deployment的名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mall-dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span> \t\t\t\t\t<span class=\"comment\"># Pod的数量，Deployment会确保一直有2个Pod运行</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>\t\t\t\t\t\t<span class=\"comment\"># Label Selector</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>\t\t\t\t\t\t<span class=\"comment\"># Pod的定义，用于创建Pod，也称为Pod template</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALLOW_EMPTY_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;yes&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">REDIS_REPLICATION_MOD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">master</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">redis:5</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-web</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">ephemeral-storage:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">128Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">private-registry-secret</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">schedulerName:</span> <span class=\"string\">default-scheduler</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">2000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsNonRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p>使用kubectl get查看Deployment和Pod，可以看到<strong>READY</strong>值为2&#x2F;2，前一个2表示当前有2个Pod运行，后一个2表示期望有2个Pod，<strong>AVAILABLE</strong>为2表示有2个Pod是可用的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get deployments.apps -n mall-dev</span></span><br><span class=\"line\">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">redis-web      2/2     2            2           146d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deployment控制Pod\"><a href=\"#Deployment控制Pod\" class=\"headerlink\" title=\"Deployment控制Pod\"></a>Deployment控制Pod</h3><p>Deployment是通过一种名为ReplicaSet的控制器控制Pod。</p>\n<p><code>Deployment控制ReplicaSet，ReplicaSet控制Pod</code></p>\n<p>查询ReplicaSet命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl get rs -n mall-dev</span></span><br><span class=\"line\">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">redis-web-db6f7cd87       2         2         2       145d</span><br></pre></td></tr></table></figure>\n\n<p>使用kubectl describe命令查看Deployment的详情，您就可以看到ReplicaSet</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master ~]<span class=\"comment\"># kubectl describe deployments.apps redis-web -n mall-dev</span></span><br><span class=\"line\">Name:                   redis-web</span><br><span class=\"line\">Namespace:              mall-dev</span><br><span class=\"line\">CreationTimestamp:      Tue, 22 Mar 2022 01:10:22 +0800</span><br><span class=\"line\">Labels:                 &lt;none&gt;</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: 6</span><br><span class=\"line\">Selector:               app=redis-web</span><br><span class=\"line\">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        0</span><br><span class=\"line\">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:       app=redis-web</span><br><span class=\"line\">  Annotations:  kubectl.kubernetes.io/restartedAt: 2022-03-23T22:51:20+08:00</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   redis-web:</span><br><span class=\"line\">    Image:      redis:5</span><br><span class=\"line\">    Port:       6379/TCP</span><br><span class=\"line\">    Host Port:  0/TCP</span><br><span class=\"line\">    Limits:</span><br><span class=\"line\">      cpu:                2</span><br><span class=\"line\">      ephemeral-storage:  1Gi</span><br><span class=\"line\">      memory:             256Mi</span><br><span class=\"line\">    Requests:</span><br><span class=\"line\">      cpu:                200m</span><br><span class=\"line\">      ephemeral-storage:  200Mi</span><br><span class=\"line\">      memory:             128Mi</span><br><span class=\"line\">    Environment:</span><br><span class=\"line\">      ALLOW_EMPTY_PASSWORD:   <span class=\"built_in\">yes</span></span><br><span class=\"line\">      REDIS_REPLICATION_MOD:  master</span><br><span class=\"line\">    Mounts:                   &lt;none&gt;</span><br><span class=\"line\">  Volumes:                    &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  Type           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   redis-web-db6f7cd87 (2/2 replicas created) <span class=\"comment\">#ReplicaSet信息</span></span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  9m14s  deployment-controller  Scaled up replica <span class=\"built_in\">set</span> redis-web-db6f7cd87 to 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deployment升级\"><a href=\"#Deployment升级\" class=\"headerlink\" title=\"Deployment升级\"></a>Deployment升级</h3><p>Deployment可以设置不同的升级策略，有如下两种。</p>\n<ul>\n<li>RollingUpdate：滚动升级，即逐步创建新Pod再删除旧Pod，为默认策略。</li>\n<li>Recreate：替换升级，即先把当前Pod删掉再重新创建Pod。</li>\n</ul>\n<p>Deployment可以通过maxSurge和maxUnavailable两个参数控制升级过程中同时重新创建Pod的比例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>maxSurge：与Deployment中spec.replicas相比，可以有多少个Pod存在，默认值是25%，比如spec.replicas为 4，那升级过程中就不能超过5个Pod存在，即按1个的步伐升级，实际升级过程中会换算成数字，且换算会向上取整。这个值也可以直接设置成数字。</li>\n<li>maxUnavailable：与Deployment中spec.replicas相比，可以有多少个Pod失效，也就是删除的比例，默认值是25%，比如spec.replicas为4，那升级过程中就至少有3个Pod存在，即删除Pod的步伐是1。同样这个值也可以设置成数字。</li>\n</ul>\n<h3 id=\"Deployment回滚\"><a href=\"#Deployment回滚\" class=\"headerlink\" title=\"Deployment回滚\"></a>Deployment回滚</h3><p>回滚也称为回退，即当发现升级出现问题时，让应用回到老的版本。Deployment可以非常方便的回滚到老版本。</p>\n<p>假如上面升级的新版镜像有问题，可以执行kubectl rollout undo命令进行回滚。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl rollout undo deployment redis-web</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StatefulSet\"><a href=\"#StatefulSet\" class=\"headerlink\" title=\"StatefulSet\"></a>StatefulSet</h2><p>Deployment控制器下的Pod都有个共同特点，那就是每个Pod除了名称和IP地址不同，其余完全相同。需要的时候，Deployment可以通过Pod模板创建新的Pod；不需要的时候，Deployment就可以删除任意一个Pod。</p>\n<p>详细分析下有状态应用的需求，分布式有状态的特点主要是应用中每个部分的角色不同（即分工不同），比如数据库有主备，Pod之间有依赖，对应到Kubernetes中就是对Pod有如下要求：</p>\n<ul>\n<li>Pod能够被别的Pod找到，这就要求Pod有固定的标识。</li>\n<li>每个Pod有单独存储，Pod被删除恢复后，读取的数据必须还是以前那份，否则状态就会不一致。</li>\n</ul>\n<p>Kubernetes提供了StatefulSet来解决这个问题，其具体如下：</p>\n<ol>\n<li>StatefulSet给每个Pod提供固定名称，Pod名称增加从0-N的固定后缀，Pod重新调度后Pod名称和HostName不变。</li>\n<li>StatefulSet通过Headless Service给每个Pod提供固定的访问域名，Service的概念会在后面章节中详细介绍。</li>\n<li>StatefulSet通过创建固定标识的PVC保证Pod重新调度后还是能访问到相同的持久化数据。</li>\n</ol>\n<img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220816210111583.png\" class title=\"image-20220816210111583\">\n\n\n\n\n\n<h3 id=\"创建Headless-Service\"><a href=\"#创建Headless-Service\" class=\"headerlink\" title=\"创建Headless Service\"></a>创建Headless Service</h3><p>创建Statefulset需要一个Headless Service用于Pod访问</p>\n<p>使用如下文件描述Headless Service，其中：</p>\n<ul>\n<li>spec.clusterIP：必须设置为None，表示Headless Service。</li>\n<li>spec.ports.port：Pod间通信端口号。</li>\n<li>spec.ports.name：Pod间通信端口名称。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>       <span class=\"comment\"># 对象类型为Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>     <span class=\"comment\"># Pod间通信的端口名称</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span>        <span class=\"comment\"># Pod间通信的端口号</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span>        <span class=\"comment\"># 选择标签为app:nginx的Pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span>     <span class=\"comment\"># 必须设置为None，表示Headless Service</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>创建后的service</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl get service  -n mall-dev</span></span><br><span class=\"line\">NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">nginx   ClusterIP   None            &lt;none&gt;        80/TCP     2m26s</span><br><span class=\"line\">redis   ClusterIP   10.96.121.105   &lt;none&gt;        6379/TCP   147d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建Statefulset\"><a href=\"#创建Statefulset\" class=\"headerlink\" title=\"创建Statefulset\"></a>创建Statefulset</h3><p><strong><code>serviceName指定了Statefulset使用哪个Headless Service</code></strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">nginx</span>                             <span class=\"comment\"># headless service的名称</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container-0</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:alpine</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">default-secret</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>创建后的pod</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          5m43s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          3m59s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          3m55s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>删除pod后再查看pod</code></strong></p>\n<p>会发现k8s会重新创建一个name一样的pod出来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          11m</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m24s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m20s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl delete pod nginx-0 -n mall-dev</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-0&quot;</span> deleted</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          2s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m50s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m46s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-0                     1/1     Running   0          4s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          9m52s</span><br><span class=\"line\">nginx-2                     1/1     Running   0          9m48s</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>进入pod内部查看hostname</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-0 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-0</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-1 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-1</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl exec nginx-2 -n mall-dev -- sh -c &#x27;hostname&#x27; </span></span><br><span class=\"line\">nginx-2</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StatefulSet的网络标识\"><a href=\"#StatefulSet的网络标识\" class=\"headerlink\" title=\"StatefulSet的网络标识\"></a>StatefulSet的网络标识</h3><p>StatefulSet创建后，可以看下Pod是有固定名称的，那Headless Service是如何起作用的呢，那就是使用DNS，为Pod提供固定的域名，这样Pod间就可以使用域名访问，即便Pod被重新创建而导致Pod的IP地址发生变化，这个域名也不会发生变化。</p>\n<p>Headless Service创建后，每个Pod的IP都会有下面格式的域名。</p>\n<p><strong><code>&lt;pod-name&gt;.&lt;svc-name&gt;.&lt;namespace&gt;.svc.cluster.local</code></strong></p>\n<p>例如上面的三个Pod的域名就是：</p>\n<ul>\n<li>nginx-0.nginx.mall-dev.svc.cluster.local</li>\n<li>nginx-1.nginx.mall-dev..svc.cluster.local</li>\n<li>nginx-2.nginx.mall-dev.ult.svc.cluster.local</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl run -it --image=busybox:1.28.3 --restart=Never -n mall-dev dns-test /bin/sh</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.202 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-1.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.nginx</span><br><span class=\"line\">Address 1: 192.167.85.204 nginx-1.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-2.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-2.nginx</span><br><span class=\"line\">Address 1: 192.167.85.203 nginx-2.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\"># </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>删除一个pod后在查看dns</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除pod</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev </span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dns-test                    1/1     Running   0          75s</span><br><span class=\"line\">nginx-0                     1/1     Running   0          31m</span><br><span class=\"line\">nginx-1                     1/1     Running   0          41m</span><br><span class=\"line\">nginx-2                     1/1     Running   0          41m</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl delete pod -n mall-dev nginx-0</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-0&quot;</span> deleted</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl get pod -n mall-dev </span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">dns-test                    1/1     Running   0          2m47s</span><br><span class=\"line\">nginx-0                     1/1     Running   0          71s</span><br><span class=\"line\">nginx-1                     1/1     Running   0          43m</span><br><span class=\"line\">nginx-2                     1/1     Running   0          43m</span><br><span class=\"line\">redis-web-db6f7cd87-2pzff   1/1     Running   1          22h</span><br><span class=\"line\">redis-web-db6f7cd87-s4nph   1/1     Running   4          59d</span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">#查看dns</span></span><br><span class=\"line\">[root@k8s-master yaml]<span class=\"comment\"># kubectl run -it --image=busybox:1.28.3 --restart=Never -n mall-dev dns-test /bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#####第一次查看#####</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.202 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-1.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-1.nginx</span><br><span class=\"line\">Address 1: 192.167.85.204 nginx-1.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-2.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-2.nginx</span><br><span class=\"line\">Address 1: 192.167.85.203 nginx-2.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\"><span class=\"comment\">#####第二次查看#####</span></span><br><span class=\"line\">/ <span class=\"comment\">#  nslookup nginx-0.nginx</span></span><br><span class=\"line\">Server:    10.96.0.10</span><br><span class=\"line\">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">Name:      nginx-0.nginx</span><br><span class=\"line\">Address 1: 192.167.58.214 nginx-0.nginx.mall-dev.svc.cluster.local</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StatefulSet存储状态\"><a href=\"#StatefulSet存储状态\" class=\"headerlink\" title=\"StatefulSet存储状态\"></a>StatefulSet存储状态</h3><p><strong><code>StatefulSet可以通过PVC做持久化存储，保证Pod重新调度后还是能访问到相同的持久化数据，在删除Pod时，PVC不会被删除。</code></strong></p>\n<img src=\"/2022/08/15/k8s/K8S%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/image-20220816215943427.png\" class title=\"image-20220816215943427\">\n\n<h2 id=\"Job和CronJob\"><a href=\"#Job和CronJob\" class=\"headerlink\" title=\"Job和CronJob\"></a>Job和CronJob</h2><p>Job和CronJob是负责批量处理短暂的一次性任务（short lived one-off tasks），即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。</p>\n<ul>\n<li>Job：是Kubernetes用来控制批处理型任务的资源对象。批处理业务与长期伺服业务（Deployment、Statefulset）的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出（Pod自动删除）。</li>\n<li>CronJob：是基于时间的Job，就类似于Linux系统的crontab文件中的一行，在指定的时间周期运行指定的Job。</li>\n</ul>\n<p>任务负载的这种用完即停止的特性特别适合一次性任务，比如持续集成。</p>\n<table>\n<thead>\n<tr>\n<th>Job类型</th>\n<th>说明</th>\n<th>使用示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一次性Job</td>\n<td>创建一个Pod直至其成功结束</td>\n<td>数据库迁移</td>\n</tr>\n<tr>\n<td>固定结束次数的Job</td>\n<td>依次创建一个Pod运行直至completions个成功结束</td>\n<td>处理工作队列的Pod</td>\n</tr>\n<tr>\n<td>固定结束次数的并行Job</td>\n<td>依次创建多个Pod运行直至completions个成功结束</td>\n<td>多个Pod同时处理工作队列</td>\n</tr>\n<tr>\n<td>并行Job</td>\n<td>创建一个或多个Pod直至有一个成功结束</td>\n<td>多个Pod同时处理工作队列</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: batch/v1</span><br><span class=\"line\">kind: Job</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: pi-with-timeout</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  completions: 50            # 运行的次数，即Job结束需要成功运行的Pod个数</span><br><span class=\"line\">  parallelism: 5             # 并行运行Pod的数量，默认为1</span><br><span class=\"line\">  backoffLimit: 5            # 表示失败Pod的重试最大次数，超过这个次数不会继续重试。</span><br><span class=\"line\">  activeDeadlineSeconds: 10  # 表示Pod超期时间，一旦达到这个时间，Job及其所有的Pod都会停止。</span><br><span class=\"line\">  template:                  # Pod定义</span><br><span class=\"line\">    spec: </span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: pi</span><br><span class=\"line\">        image: perl</span><br><span class=\"line\">        command:</span><br><span class=\"line\">        - perl</span><br><span class=\"line\">        - &quot;-Mbignum=bpi&quot;</span><br><span class=\"line\">        - &quot;-wle&quot;</span><br><span class=\"line\">        - print bpi(2000)</span><br><span class=\"line\">      restartPolicy: Never</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["K8S"],"tags":["K8S"]}]